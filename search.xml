<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSR,SSR及同构渲染的区别</title>
    <url>/2023/11/16/CSR-SSR%E5%8F%8A%E5%90%8C%E6%9E%84%E6%B8%B2%E6%9F%93%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="SSR（传统服务端渲染）"><a href="#SSR（传统服务端渲染）" class="headerlink" title="SSR（传统服务端渲染）"></a>SSR（传统服务端渲染）</h2><p>如：爱彼迎</p>
<p>传统的服务端渲染有：<strong>asp</strong>、<strong>jsp</strong>、<strong>ejs</strong>等，服务端语言往往通过这些模板引擎将数据和 <strong>DOM</strong>在服务端渲染完成，返回一个完整的静态 <strong>HTML</strong>页面给客户端，由客户端直接显示。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ol>
<li>客户端发送 <strong>HTTP</strong>请求</li>
<li>服务端响应 <strong>HTTP</strong>请求，返回拼接好的 <strong>HTML</strong>字符串给客户端</li>
<li>客户端渲染 <strong>HTML</strong></li>
</ol>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>前后端不分离，不好维护</li>
<li>用户体验不佳，需要重新加载页面</li>
<li>服务端压力大</li>
</ul>
<h2 id="CSR（客户端渲染）"><a href="#CSR（客户端渲染）" class="headerlink" title="CSR（客户端渲染）"></a>CSR（客户端渲染）</h2><p>如：飞书</p>
<p>在现代化的前端项目中，客户端渲染的代表性技术栈是 <strong>Vue</strong>、<strong>React</strong>、<strong>Angular</strong>，我们常常使用它们来构建客户端单页或者多页应用程序。以 <strong>SPA</strong>构建程序为例，在浏览器端首先渲染的是一套空的 <strong>HTML</strong>，通过 <strong>JS</strong>直接进行页面的渲染和路由跳转等操作，所有的数据通过 <strong>Ajax</strong>请求从服务器获取后，在进行客户端的拼装和展示。</p>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ol>
<li>客户端发起 <strong>HTTP</strong>请求</li>
<li>服务端响应 <strong>HTTP</strong>请求，返回一个空的 <strong>HTML</strong>文件</li>
<li>客户端初始化时加载必须的 <strong>JS</strong>文件，请求接口</li>
<li>将生成的 <strong>DOM</strong>插入到 <strong>HTML</strong>中</li>
</ol>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>首屏加载慢</li>
<li>不利于<strong>SEO</strong>，需要等待所有的JS文件完成加载解析</li>
</ul>
<h2 id="同构（现代服务端渲染）"><a href="#同构（现代服务端渲染）" class="headerlink" title="同构（现代服务端渲染）"></a>同构（现代服务端渲染）</h2><p>如：美团</p>
<p><strong>Vue</strong>、<strong>React</strong>的 <strong>SSR</strong>方案实际上就是同构渲染，我们现在讲的服务端渲染概念，是指在前端范畴或者说在 <strong>Vue</strong>、<strong>React</strong>等单页面技术栈范畴内，基于 <strong>Node Server</strong> 运行环境的服务端渲染方案，通过在 <strong>Node.js</strong> 中运行相同应用程序的前端框架（例如 <strong>React</strong>、<strong>Vue</strong>等 ），将其预渲染成 <strong>HTML</strong>，最后在客户端进行注水化处理。简单来讲，就是应用程序的大部分代码在服务器（<strong>Node</strong>服务端）和客户端上运行，这就是所谓的现代服务端渲染：同构。<br>我们以 <strong>Vue</strong>的 <strong>SSR</strong>实现方案为例做分析：</p>
<h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><ol>
<li>客户端发起 <strong>HTTP</strong>请求</li>
<li>服务端渲染把 <strong>Vue</strong>实例转换成了静态的 <strong>HTML</strong>发送给客户端</li>
<li>客户端渲染是需要把事件、响应式特性等 <strong>Vue</strong>的特性都绑回去</li>
</ol>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>服务器压力大</li>
<li>涉及构建设置和部署的更多要求</li>
<li>一些三方库可能需要特殊处理</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>首屏速度快</li>
<li>前后端分离</li>
<li>利于<strong>SEO</strong>，搜索能爬取到页面关键字</li>
<li>有一些现成框架： <strong>Nuxt.js</strong>、<strong>Next.js</strong></li>
</ul>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel列表名称</title>
    <url>/2023/12/14/Excel%E5%88%97%E8%A1%A8%E5%90%8D%E7%A7%B0/</url>
    <content><![CDATA[<h3 id="力扣-168-Excel列表名称"><a href="#力扣-168-Excel列表名称" class="headerlink" title="力扣-168.Excel列表名称"></a>力扣-168.Excel列表名称</h3><p>给你一个整数 <code>columnNumber</code> ，返回它在 Excel 表中相对应的列名称。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">A -&gt; 1<br>B -&gt; 2<br>C -&gt; 3<br>...<br>Z -&gt; 26<br>AA -&gt; 27<br>AB -&gt; 28 <br>...<br></code></pre></td></tr></table></figure>

<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：columnNumber = 1<br>输出：&quot;A&quot;<br></code></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：columnNumber = 28<br>输出：&quot;AB&quot;<br></code></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：columnNumber = 701<br>输出：&quot;ZY&quot;<br></code></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：columnNumber = 2147483647<br>输出：&quot;FXSHRXW&quot;<br></code></pre></td></tr></table></figure>

<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>将给定的十进制数转换为26进制的形式，其中A表示 1，B 表示2，以此类推。<br>从给定的数n 开始，每次取余数和商，余数对应A-Z的ASCII码值<br>将每个余数对应的字符拼接到结果字符串的开头<br>更新n的值为商，重复上述步骤，直到 n变为0<br>最终得到的结果字符串即为 Excel表中相对应的列名称。</p>
<h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var convertToTitle = function(columnNumber) &#123;<br>    let res = &#x27;&#x27;<br>    while(columnNumber)&#123;<br>        columnNumber-- //将1-26映射为0-25<br>        const str = String.fromCharCode(columnNumber%26 + 65) //fromCharCode将unicode转为字符串<br>        res = str + res //str从头插入res <br>        columnNumber = Math.floor(columnNumber / 26) <br>    &#125;<br>    return res<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>时间复杂度分析:<br>n的大小决定了循的次数，时间复杂度与 n的位数相关，为 0(logN)。<br>空间复杂度分析：<br>使用了一个字符串来存储结果，空间复杂度为0(logN)。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>JS进阶学习DAY1</title>
    <url>/2023/07/29/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY1/</url>
    <content><![CDATA[<h1 id="JavaScript-进阶-第1天"><a href="#JavaScript-进阶-第1天" class="headerlink" title="JavaScript 进阶 - 第1天"></a>JavaScript 进阶 - 第1天</h1><blockquote>
<p>​		本文是在学习作用域、变量提升、闭包等语言特征，为加深对 JavaScript 的理解，掌握变量赋值、函数声明的简洁语法，降低代码冗余度做的笔记。</p>
</blockquote>
<ul>
<li>理解作用域对程序执行的影响</li>
<li>能够分析程序执行的作用域范围</li>
<li>理解闭包本质，利用闭包创建隔离作用域</li>
<li>了解什么变量提升及函数提升</li>
<li>掌握箭头函数、解析剩余参数等简洁语法</li>
</ul>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote>
<p>了解作用域对程序执行的影响及作用域链的查找机制，使用闭包函数创建隔离作用域避免全局变量污染。</p>
</blockquote>
<p>作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问，作用域分为全局作用域和局部作用域。</p>
<h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>局部作用域分为函数作用域和块作用域。</p>
<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 声明 counter 函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-comment">// 函数内部声明的变量</span><br>    <span class="hljs-keyword">const</span> s = x + y<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s) <span class="hljs-comment">// 18</span><br>  &#125;<br>  <span class="hljs-comment">// 设用 counter 函数</span><br>  <span class="hljs-title function_">counter</span>(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>)<br>  <span class="hljs-comment">// 访问变量 s</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s)<span class="hljs-comment">// 报错</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>函数内部声明的变量，在函数外部无法被访问</li>
<li>函数的参数也是函数内部的局部变量</li>
<li>不同函数内部声明的变量无法互相访问</li>
<li>函数执行完毕后，函数内部的变量实际被清空了</li>
</ol>
<h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  &#123;<br>    <span class="hljs-comment">// age 只能在该代码块中被访问</span><br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age); <span class="hljs-comment">// 正常</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// 超出了 age 的作用域</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age) <span class="hljs-comment">// 报错</span><br>  <br>  <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span>(flag) &#123;<br>    <span class="hljs-comment">// str 只能在该代码块中被访问</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello world!&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str); <span class="hljs-comment">// 正常</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// 超出了 age 的作用域</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str); <span class="hljs-comment">// 报错</span><br>  <br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> t = <span class="hljs-number">1</span>; t &lt;= <span class="hljs-number">6</span>; t++) &#123;<br>    <span class="hljs-comment">// t 只能在该代码块中被访问</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t); <span class="hljs-comment">// 正常</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// 超出了 t 的作用域</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t); <span class="hljs-comment">// 报错</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>JavaScript 中除了变量外还有常量，常量与变量本质的区别是【常量必须要有值且不允许被重新赋值】，常量值为对象时其属性和方法允许重新赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">&lt;script&gt;<br>  <span class="hljs-comment">// 必须要有值</span><br>  <span class="hljs-type">const</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1.0.0&#x27;</span>;<br><br>  <span class="hljs-comment">// 不能重新赋值</span><br>  <span class="hljs-comment">// version = &#x27;1.0.1&#x27;;</span><br><br>  <span class="hljs-comment">// 常量值为对象类型</span><br>  <span class="hljs-type">const</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> &#123;<br>    name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    age: <span class="hljs-number">18</span><br>  &#125;<br><br>  <span class="hljs-comment">// 不能重新赋值</span><br>  user = &#123;&#125;;<br><br>  <span class="hljs-comment">// 属性和方法允许被修改</span><br>  user.name = <span class="hljs-string">&#x27;小小明&#x27;</span>;<br>  user.gender = <span class="hljs-string">&#x27;男&#x27;</span>;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li>
<li><code>const</code> 声明的常量也会产生块作用域</li>
<li>不同代码块之间的变量无法互相访问</li>
<li>推荐使用 <code>let</code> 或 <code>const</code></li>
</ol>
<p>注：开发中 <code>let</code> 和 <code>const</code> 经常不加区分的使用，如果担心某个值会不小被修改时，则只能使用 <code>const</code> 声明成常量。</p>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 此处是全局</span><br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 此处为局部</span><br>  &#125;<br><br>  <span class="hljs-comment">// 此处为全局</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>全局作用域中声明的变量，任何其它作用域都可以被访问，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 全局变量 name</span><br>    <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;小明&#x27;</span><br>  <br>  	<span class="hljs-comment">// 函数作用域中访问全局</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 此处为局部</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span> + name)<br>    &#125;<br><br>    <span class="hljs-comment">// 全局变量 flag 和 x</span><br>    <span class="hljs-keyword">const</span> flag = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span><br>  <br>  	<span class="hljs-comment">// 块作用域中访问全局</span><br>    <span class="hljs-keyword">if</span>(flag) &#123;<br>      <span class="hljs-keyword">let</span> y = <span class="hljs-number">5</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x + y) <span class="hljs-comment">// x 是全局的</span><br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>为 <code>window</code> 对象动态添加的属性默认也是全局的，不推荐！</li>
<li>函数中未使用任何关键字声明的变量为全局变量，不推荐！！！</li>
<li>尽可能少的声明全局变量，防止全局变量被污染</li>
</ol>
<p>JavaScript 中的作用域是程序被执行时的底层机制，了解这一机制有助于规范代码书写习惯，避免因作用域导致的语法错误。</p>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>在解释什么是作用域链前先来看一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 全局作用域</span><br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br>  <span class="hljs-comment">// 局部作用域</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> c<br>    <span class="hljs-comment">// 局部作用域</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">g</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">let</span> d = <span class="hljs-string">&#x27;yo&#x27;</span><br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>函数内部允许创建新的函数，<code>f</code> 函数内部创建的新函数 <code>g</code>，会产生新的函数作用域，由此可知作用域产生了嵌套的关系。</p>
<p>如下图所示，父子关系的作用域关联在一起形成了链状的结构，作用域链的名字也由此而来。</p>
<p>作用域链本质上是底层的变量查找机制，在函数被执行时，会优先查找当前函数作用域中查找变量，如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 全局作用域</span><br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br><br>  <span class="hljs-comment">// 局部作用域</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> c<br>    <span class="hljs-comment">// let a = 10;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1 或 10</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d) <span class="hljs-comment">// 报错</span><br>    <br>    <span class="hljs-comment">// 局部作用域</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">g</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">let</span> d = <span class="hljs-string">&#x27;yo&#x27;</span><br>      <span class="hljs-comment">// let b = 20;</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">// 2 或 20</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 调用 g 函数</span><br>    <span class="hljs-title function_">g</span>()<br>  &#125;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c) <span class="hljs-comment">// 报错</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d) <span class="hljs-comment">// 报错</span><br>  <br>  <span class="hljs-title function_">f</span>();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>嵌套关系的作用域串联起来形成了作用域链</li>
<li>相同作用域链中按着从小到大的规则查找变量</li>
<li>子作用域能够访问父作用域，父级作用域无法访问子级作用域</li>
</ol>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是一种比较特殊和函数，使用闭包能够访问函数作用域中的变量。从代码形式上看闭包是一个做为返回值的函数，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1. 闭包 : 内层函数 + 外层函数变量</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// function outer() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   const a = 1</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   function f() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//     console.log(a)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   f()</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// outer()</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 2. 闭包的应用： 实现数据的私有。统计函数的调用次数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// let count = 1</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// function fn() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   count++</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(`函数被调用$&#123;count&#125;次`)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 3. 闭包的写法  统计函数的调用次数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        count++</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`函数被调用<span class="hljs-subst">$&#123;count&#125;</span>次`</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> fn</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> re = <span class="hljs-title function_">outer</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const re = function fn() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   count++</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(`函数被调用$&#123;count&#125;次`)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">re</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">re</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = function() &#123; &#125;  函数表达式</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 4. 闭包存在的问题： 可能会造成内存泄漏</span></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<p>1.怎么理解闭包？</p>
<ul>
<li>闭包 &#x3D; 内层函数 + 外层函数的变量</li>
</ul>
<p>2.闭包的作用？</p>
<ul>
<li>封闭数据，实现数据私有，外部也可以访问函数内部的变量</li>
<li>闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来</li>
</ul>
<p>3.闭包可能引起的问题？</p>
<ul>
<li>内存泄漏</li>
</ul>
<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 访问变量 str</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str + <span class="hljs-string">&#x27;world!&#x27;</span>);<br><br>  <span class="hljs-comment">// 声明变量 str</span><br>  <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;hello &#x27;</span>;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>变量在未声明即被访问时会报语法错误</li>
<li>变量在声明之前即被访问，变量的值为 <code>undefined</code></li>
<li><code>let</code> 声明的变量不存在变量提升，推荐使用 <code>let</code></li>
<li>变量提升出现在相同作用域当中</li>
<li>实际开发中推荐先声明再访问变量</li>
</ol>
<p>注：关于变量提升的原理分析会涉及较为复杂的词法分析等知识，而开发中使用 <code>let</code> 可以轻松规避变量的提升，因此在此不做过多的探讨，有兴趣可<a href="https://segmentfault.com/a/1190000013915935">查阅资料</a>。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote>
<p>知道函数参数默认值、动态参数、剩余参数的使用细节，提升函数应用的灵活度，知道箭头函数的语法及与普通函数的差异。</p>
</blockquote>
<h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 调用函数</span><br>  <span class="hljs-title function_">foo</span>()<br>  <span class="hljs-comment">// 声明函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;声明之前即被调用...&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// 不存在提升现象</span><br>  <span class="hljs-title function_">bar</span>()  <span class="hljs-comment">// 错误</span><br>  <span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;函数表达式不存在提升现象...&#x27;</span>)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>函数提升能够使函数的声明调用更灵活</li>
<li>函数表达式不存在提升的现象</li>
<li>函数提升出现在相同作用域当中</li>
</ol>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>函数参数的使用细节，能够提升函数应用的灵活度。</p>
<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 设置参数默认值</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;小明&quot;</span>, age=<span class="hljs-number">18</span></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">`&lt;p&gt;大家好，我叫<span class="hljs-subst">$&#123;name&#125;</span>，我今年<span class="hljs-subst">$&#123;age&#125;</span>岁了。&lt;/p&gt;`</span>);<br>  &#125;<br>  <span class="hljs-comment">// 调用函数</span><br>  <span class="hljs-title function_">sayHi</span>();<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-string">&#x27;小红&#x27;</span>);<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-string">&#x27;小刚&#x27;</span>, <span class="hljs-number">21</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>声明函数时为形参赋值即为参数的默认值</li>
<li>如果参数未自定义默认值时，参数的默认值为 <code>undefined</code></li>
<li>调用函数时没有传入对应实参时，参数的默认值被当做实参传入</li>
</ol>
<h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p><code>arguments</code> 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 求生函数，计算所有参数的和</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// console.log(arguments)</span><br>    <span class="hljs-keyword">let</span> s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      s += <span class="hljs-variable language_">arguments</span>[i]<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s)<br>  &#125;<br>  <span class="hljs-comment">// 调用求和函数</span><br>  <span class="hljs-title function_">sum</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<span class="hljs-comment">// 两个参数</span><br>  <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">// 两个参数</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>arguments</code> 是一个伪数组</li>
<li><code>arguments</code> 的作用是动态获取函数的实参</li>
</ol>
<h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">config</span>(<span class="hljs-params">baseURL, ...other</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(baseURL) <span class="hljs-comment">// 得到 &#x27;http://baidu.com&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(other)  <span class="hljs-comment">// other  得到 [&#x27;get&#x27;, &#x27;json&#x27;]</span><br>  &#125;<br>  <span class="hljs-comment">// 调用函数</span><br>  <span class="hljs-title function_">config</span>(<span class="hljs-string">&#x27;http://baidu.com&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</li>
<li>借助 <code>...</code> 获取的剩余实参，是个真数组</li>
</ol>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数是一种声明函数的简洁语法，它与普通函数并无本质的区别，差异性更多体现在语法格式上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = function () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(123)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1. 箭头函数 基本语法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = () =&gt; &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(123)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// fn()</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = (x) =&gt; &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(x)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// fn(1)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 2. 只有一个形参的时候，可以省略小括号</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = x =&gt; &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(x)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// fn(1)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// // 3. 只有一行代码的时候，我们可以省略大括号</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = x =&gt; console.log(x)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// fn(1)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 4. 只有一行代码的时候，可以省略return</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = x =&gt; x + x</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// console.log(fn(1))</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 5. 箭头函数可以直接返回一个对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = (uname) =&gt; (&#123; uname: uname &#125;)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// console.log(fn(&#x27;刘德华&#x27;))</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>箭头函数属于表达式函数，因此不存在函数提升</li>
<li>箭头函数只有一个参数时可以省略圆括号 <code>()</code></li>
<li>箭头函数函数体只有一行代码时可以省略花括号 <code>&#123;&#125;</code>，并自动做为返回值被返回</li>
</ol>
<h4 id="箭头函数参数"><a href="#箭头函数参数" class="headerlink" title="箭头函数参数"></a>箭头函数参数</h4><p>箭头函数中没有 <code>arguments</code>，只能使用 <code>...</code> 动态获取实参</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1. 利用箭头函数来求和</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getSum</span> = (<span class="hljs-params">...arr</span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        sum += arr[i]</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> sum</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">getSum</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) <span class="hljs-comment">// 9</span></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h4 id="箭头函数-this"><a href="#箭头函数-this" class="headerlink" title="箭头函数 this"></a>箭头函数 this</h4><p>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层沿用this。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>   <span class="hljs-comment">// 以前this的指向：  谁调用的这个函数，this 就指向谁</span><br>   <span class="hljs-comment">// console.log(this)  // window</span><br>   <span class="hljs-comment">// // 普通函数</span><br>   <span class="hljs-comment">// function fn() &#123;</span><br>   <span class="hljs-comment">//   console.log(this)  // window</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// window.fn()</span><br>   <span class="hljs-comment">// // 对象方法里面的this</span><br>   <span class="hljs-comment">// const obj = &#123;</span><br>   <span class="hljs-comment">//   name: &#x27;andy&#x27;,</span><br>   <span class="hljs-comment">//   sayHi: function () &#123;</span><br>   <span class="hljs-comment">//     console.log(this)  // obj</span><br>   <span class="hljs-comment">//   &#125;</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// obj.sayHi()</span><br><br>   <span class="hljs-comment">// 2. 箭头函数的this  是上一层作用域的this 指向</span><br>   <span class="hljs-comment">// const fn = () =&gt; &#123;</span><br>   <span class="hljs-comment">//   console.log(this)  // window</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// fn()</span><br>   <span class="hljs-comment">// 对象方法箭头函数 this</span><br>   <span class="hljs-comment">// const obj = &#123;</span><br>   <span class="hljs-comment">//   uname: &#x27;pink老师&#x27;,</span><br>   <span class="hljs-comment">//   sayHi: () =&gt; &#123;</span><br>   <span class="hljs-comment">//     console.log(this)  // this 指向谁？ window</span><br>   <span class="hljs-comment">//   &#125;</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// obj.sayHi()</span><br><br>   <span class="hljs-keyword">const</span> obj = &#123;<br>     <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;pink老师&#x27;</span>,<br>     <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)  <span class="hljs-comment">// obj</span><br>       <span class="hljs-keyword">let</span> i = <span class="hljs-number">10</span><br>       <span class="hljs-keyword">const</span> <span class="hljs-title function_">count</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)  <span class="hljs-comment">// obj </span><br>       &#125;<br>       <span class="hljs-title function_">count</span>()<br>     &#125;<br>   &#125;<br>   obj.<span class="hljs-title function_">sayHi</span>()<br><br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><blockquote>
<p>知道解构的语法及分类，使用解构简洁语法快速为变量赋值。</p>
</blockquote>
<p>解构赋值是一种快速为变量赋值的简洁语法，本质上仍然是为变量赋值，分为数组解构、对象解构两大类型。</p>
<h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 普通的数组</span><br>  <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>  <span class="hljs-comment">// 批量声明变量 a b c </span><br>  <span class="hljs-comment">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span><br>  <span class="hljs-keyword">let</span> [a, b, c] = arr<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 1</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// 2</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c); <span class="hljs-comment">// 3</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>赋值运算符 <code>=</code> 左侧的 <code>[]</code> 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li>
<li>变量的顺序对应数组单元值的位置依次进行赋值操作</li>
<li>变量的数量大于单元值数量时，多余的变量将被赋值为 <code>undefined</code></li>
<li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li>
<li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li>
</ol>
<p>注：支持多维解构赋值，比较复杂后续有应用需求时再进一步分析</p>
<h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>对象解构是将对象属性和方法快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 普通对象</span><br>  <span class="hljs-keyword">const</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>  &#125;;<br>  <span class="hljs-comment">// 批量声明变量 name age</span><br>  <span class="hljs-comment">// 同时将数组单元值 小明  18 依次赋值给变量 name  age</span><br>  <span class="hljs-keyword">const</span> &#123;name, age&#125; = user<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name) <span class="hljs-comment">// 小明</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age) <span class="hljs-comment">// 18</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>赋值运算符 <code>=</code> 左侧的 <code>&#123;&#125;</code> 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li>
<li>对象属性的值将被赋值给与属性名相同的变量</li>
<li>对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></li>
<li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</li>
</ol>
<p>注：支持多维解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1. 这是后台传递过来的数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> msg = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;获取新闻列表成功&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;data&quot;</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;5G商用自己，三大运用商收入下降&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">58</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;国际媒体头条速览&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">56</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;乌克兰和俄罗斯持续冲突&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">1669</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      ]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 需求1： 请将以上msg对象  采用对象解构的方式 只选出  data 方面后面使用渲染页面</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const &#123; data &#125; = msg</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// console.log(data)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 需求2： 上面msg是后台传递过来的数据，我们需要把data选出当做参数传递给 函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const &#123; data &#125; = msg</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// msg 虽然很多属性，但是我们利用解构只要 data值</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">&#123; data &#125;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// const &#123; data &#125; = arr</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 我们只要 data 数据</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 内部处理</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">render</span>(msg)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 需求3， 为了防止msg里面的data名字混淆，要求渲染函数里面的数据名改为 myData</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">&#123; data: myData &#125;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 要求将 获取过来的 data数据 更名为 myData</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 内部处理</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myData)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">render</span>(msg)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="forEach遍历数组"><a href="#forEach遍历数组" class="headerlink" title="forEach遍历数组"></a>forEach遍历数组</h3><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数</p>
<blockquote>
<p>注意：</p>
<p>1.forEach 主要是遍历数组</p>
<p>2.参数当前数组元素是必须要写的， 索引号可选。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// forEach 就是遍历  加强版的for循环  适合于遍历数组对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> result = arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)  <span class="hljs-comment">// 数组元素 red  green pink</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index) <span class="hljs-comment">// 索引号</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// console.log(result)</span></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h3 id="filter筛选数组"><a href="#filter筛选数组" class="headerlink" title="filter筛选数组"></a>filter筛选数组</h3><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>
<p>主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const newArr = arr.filter(function (item, index) &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   // console.log(item)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   // console.log(index)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   return item &gt;= 20</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 返回的符合条件的新数组</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt;= <span class="hljs-number">20</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr)</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JS数组api大全</title>
    <url>/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p>获取JavaScript数组原型上所有方法，可以在控制台输入<code>console.log(Object.getOwnPropertyNames(Array.prototype))</code></p>
<h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p><code>push</code>方法接收任意数量的参数，会将它们添加到数组末尾，返回数组的最新长度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;cat&#x27;]<br>arr.push(&#x27;monkey&#x27;, &#x27;pig&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640.png" alt="图片"></p>
<h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h2><p><code>unshift()</code>在数组开头添加任意多个值，然后返回新的数组长度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;cat&#x27;]<br>arr.unshift(&#x27;monkey&#x27;, &#x27;pig&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-17000499061791.png" alt="图片"></p>
<h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>可以传入三个参数，分别是开始位置、要删除的元素数量、可选的需要插入的元素，该方法返回要删除的元素的数组，如果删除数量为 0 即返回空数组。</p>
<p><strong>新增</strong></p>
<p>在下标1的地方后面添加一个元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.splice(1,0,&#x27;dog&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-17000499061802.png" alt="图片"></p>
<p><strong>删除</strong></p>
<p>从下标1的地方开始删除两个元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.splice(1,2)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-17000499061803.png" alt="图片"></p>
<p><strong>修改</strong></p>
<p>从下标1的地方开始修改，将两个元素替换成一个元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.splice(1,2,&#x27;dog&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-17000499061804.png" alt="图片"></p>
<h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>let newArr = arr.concat(&#x27;dog&#x27;, &#x27;mouse&#x27;, [&#x27;tiger&#x27;])<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005017801915.png" alt="图片"></p>
<h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>删除数组的最后一项，同时减少数组的length 值，返回被删除的项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.pop()<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005017801916.png" alt="图片"></p>
<h2 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h2><p>用于删除数组的第一项，同时减少数组的length 值，返回被删除的项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.shift()<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005017801917.png" alt="图片"></p>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组。接收两个可选参数，开始的下标位置<code>start</code>和结束位置<code>end</code>。</p>
<p><code>start</code>默认0，使用负数从数组的末尾进行选择；<code>end</code>如果省略，将选择从开始位置到数组末尾的所有元素。使用负数从数组末尾进行选择。</p>
<p><strong>两个参数都没有</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>let newArr = arr.slice()<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005032617624.png" alt="图片"></p>
<p><strong>只有一个参数</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>let newArr = arr.slice(1)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005032617725.png" alt="图片"></p>
<p><strong>两个参数</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;, &#x27;dog&#x27;]<br>let newArr = arr.slice(1,2)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005032617826.png" alt="图片"></p>
<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><p>查找元素，返回找到的第一个目标元素的下标索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.indexOf(&#x27;pig&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005032617827.png" alt="图片"></p>
<p>没有找到元素返回-1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.indexOf(&#x27;dog&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005032617828.png" alt="图片"></p>
<h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h2><p>返回数组中给定元素最后一次出现的索引，如果不存在则返回 -1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;, &#x27;pig&#x27;]<br>arr.lastIndexOf(&#x27;pig&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005032617829.png" alt="图片"></p>
<h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.includes(&#x27;cat&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005037415842.png" alt="图片"></p>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>返回第一个匹配的元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 2&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 3&#125;<br>]<br>arr.find(item =&gt; item.name === &#x27;pig&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005037415843.png" alt="img"></p>
<h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h2><p>返回数组中满足提供的测试函数的第一个元素的下标索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.findIndex(item =&gt; item === &#x27;pig&#x27;)<br>arr.findIndex(item =&gt; item === &#x27;dog&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005037415944.png" alt="图片"></p>
<h2 id="findLast"><a href="#findLast" class="headerlink" title="findLast"></a>findLast</h2><p>反向迭代数组，并返回满足提供的测试函数的第一个元素的值。如果没有找到对应元素，则返回 <code>undefined</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 7&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 5&#125;<br>]<br>arr.findLast(item =&gt; item.age &gt; 6)<br>arr.findLast(item =&gt; item.age &gt; 10)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005037415945.png" alt="图片"></p>
<h2 id="findLastIndex"><a href="#findLastIndex" class="headerlink" title="findLastIndex"></a>findLastIndex</h2><p>反向迭代数组，并返回满足所提供的测试函数的第一个元素的索引。若没有找到对应元素，则返回 -1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 7&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 5&#125;<br>]<br>arr.findLastIndex(item =&gt; item.age &gt; 6)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005037415946.png" alt="图片"></p>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>将数组元素方向反转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.reverse()<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005047704457.png" alt="图片"></p>
<h2 id="toReversed"><a href="#toReversed" class="headerlink" title="toReversed"></a>toReversed</h2><p><code>reverse()</code> 方法对应的复制版本，它返回一个元素顺序相反的新数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.toReversed()<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005047704558.png" alt="图片"></p>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><code>sort()</code>方法接受一个比较函数，用于判断哪个值应该排在前面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 2&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 3&#125;<br>]<br>arr.sort((a,b) =&gt; &#123;<br>    return b.age - a.age<br>&#125;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005047704559.png" alt="图片"></p>
<h2 id="toSorted"><a href="#toSorted" class="headerlink" title="toSorted"></a>toSorted</h2><p><code>sort()</code> 方法的复制方法版本。它返回一个新数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 2&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 3&#125;<br>]<br>arr.toSorted((a,b) =&gt; &#123;<br>    return b.age - a.age<br>&#125;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005058278866.png" alt="图片"></p>
<h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>对数组每一项都运行传入的测试函数，如果至少有1个元素返回 <code>true</code>，则这个方法返回 <code>true</code>，否则<code>false</code>测试不通过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 2&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;<br>]<br>arr.some(item =&gt; item.age &gt; 5)<br>arr.some(item =&gt; item.name === &#x27;dog&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005058278867.png" alt="图片"></p>
<h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>对数组每一项都运行传入的测试函数，如果所有元素都返回<code>true</code>，则这个方法返回<code>true</code>，如果存在一项不满足就返回<code>false</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 2&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;<br>]<br>arr.every(item =&gt; item.age &gt; 1)<br>arr.every(item =&gt; item.age &gt; 3)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005058278968.png" alt="图片"></p>
<h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>接收一个参数，字符串分隔符，返回包含所有项的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.join()<br>arr.join(&#x27;|&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005058278969.png" alt="图片"></p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>对数组的每个元素执行一次给定的函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 2&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;<br>]<br>arr.forEach(item =&gt; &#123;<br>    item.isAnimal = true<br>&#125;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005065534278.png" alt="图片"></p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>过滤方法，创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 2&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;<br>]<br>let newArr = arr.filter(item =&gt; item.age &gt; 5)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005065534279.png" alt="图片"></p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 2&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8&#125;<br>]<br>let newArr = arr.map(item =&gt; &#123;<br>    return &#123;<br>        ...item,<br>        age: `$&#123;item.age&#125;岁`<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005075822684.png" alt="图片"></p>
<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>将数组转换为字符串并返回结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.toString()<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005075822685.png" alt="图片"></p>
<h2 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString"></a>toLocaleString</h2><p>toLocaleString 方法提供一个本地化的字符串表示，可以根据地区设置格式化数组元素，而toString 方法则直接将数组元素转换为简单的字符串表示，没有进行本地化处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let time = new Date()<br>time.toLocaleString()<br>time.toString()<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005075822686.png" alt="图片"></p>
<p>toLocaleString 方法可以指定使用哪种语言格式化规则，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">time.toLocaleString(&#x27;en-GB&#x27;, &#123; timeZone: &#x27;UTC&#x27; &#125;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005075822687.png" alt="图片"></p>
<h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><p>用一个固定值填充一个数组中，从起始索引（默认为 0）到终止索引（默认为 array.length）内的全部元素。它返回修改后的数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.fill(&#x27;cat&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005075822688.png" alt="图片"></p>
<h2 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h2><p>浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</p>
<p>接受两个参数：target 和可选的 start、end。其中：</p>
<ul>
<li>target：指定要复制到的目标索引位置。</li>
<li>start（可选）：指定复制元素的起始索引位置，默认为 0。</li>
<li>end（可选）：指定停止复制元素的索引位置（不包含在复制范围内），默认为数组的长度。</li>
</ul>
<p>例如，将下标索引为0到1的元素，复制到索引为1的元素位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.copyWithin(1,0,1)<br></code></pre></td></tr></table></figure>

<p>下标索引 0 到 1 的元素是<code>monkey</code>，复制到索引为1的元素就是<code>pig</code>的位置上，即把<code>pig</code>替换成<code>monkey</code></p>
<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-170005075822789.png" alt="图片"></p>
<h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2><p><code>flat()</code> 方法创建一个新的数组，并根据指定深度递归地将所有子数组元素拼接到新的数组中。</p>
<p>接受一个可选的参数 depth，用于指定要展开的嵌套层级。默认情况下，depth 的值为 1，表示只展开一层嵌套数组。如果需要完全展开所有嵌套层级，可以将 depth 设置为一个较大的正整数或使用 Infinity。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, [&#x27;cat&#x27;, &#x27;dog&#x27;, [&#x27;tiger&#x27;, &#x27;mouse&#x27;]]]<br>arr.flat()<br>arr.flat(2)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-1700050802182102.png" alt="图片"></p>
<h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>结合了 map 和 flat 两个操作，用于对数组中的每个元素执行映射操作，并将结果展平为一个新数组。</p>
<p>flatMap 方法对数组中的每个元素应用一个回调函数，并且将回调函数的返回值展平到新数组中。与 map 方法不同的是，flatMap 方法会自动将返回的数组展平，而不是将其作为嵌套数组插入到新数组中。</p>
<p>flatMap 方法的回调函数可以返回一个数组或者一个元素。返回的数组会被展平到新数组中，而返回的单个元素会作为一个独立的项插入到新数组中。</p>
<p>例如，将数组中每个数字元素的平方值添加到这个元素之后，<code>[1,2,3,4]</code>这个数组修改成<code>[1,1,2,4,3,9,4,16]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [1,2,3,4]<br>arr.flatMap(num =&gt; [num, num * num])<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-1700050802182103.png" alt="图片"></p>
<p>再例如，把对象数组中<code>hobbies</code>的所有值提取到一个数组中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>    &#123;name: &#x27;monkey&#x27;, age: 4, hobbies: [&#x27;climb&#x27;, &#x27;grab&#x27;]&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 7, hobbies: [&#x27;sleep&#x27;, &#x27;eat&#x27;]&#125;,<br>    &#123;name: &#x27;cat&#x27;, age: 8, hobbies: [&#x27;jump&#x27;, &#x27;sleep&#x27;]&#125;,<br>    &#123;name: &#x27;pig&#x27;, age: 5, hobbies: [&#x27;sleep&#x27;, &#x27;eat&#x27;]&#125;<br>]<br>arr.flatMap(item =&gt; item.hobbies)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-1700050802183104.png" alt="图片"></p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>reduce() 方法对数组中的每个元素按序执行一个提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p>
<p>第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被用作初始值，迭代器将从第二个元素开始执行（即从索引为 1 而不是 0 的位置开始）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [1, 2, 3, 4]<br>arr.reduce((accumulator, currentValue) =&gt; accumulator + currentValue, 0)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-1700050802183105.png" alt="图片"></p>
<h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><p>对累加器（accumulator）和数组的每个值（按从右到左的顺序）应用一个函数，并使其成为单个值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [<br>  [0, 1],<br>  [2, 3],<br>  [4, 5],<br>]<br>arr.reduceRight((accumulator, currentValue) =&gt; accumulator.concat(currentValue))<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-1700050802183106.png" alt="图片"></p>
<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>会返回一个新数组，其指定索引处的值会被新值替换。接收两个参数，<code>index</code>要修改的数组索引（默认0开始），<code>value</code>要分配给指定索引的任何值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [&#x27;monkey&#x27;, &#x27;pig&#x27;, &#x27;cat&#x27;]<br>arr.with(1, &#x27;dog&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/15/JS%E6%95%B0%E7%BB%84api%E5%A4%A7%E5%85%A8/640-1700050802183107.png" alt="图片"></p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS进阶学习DAY2</title>
    <url>/2023/07/30/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY2/</url>
    <content><![CDATA[<h1 id="JavaScript-进阶-第2天"><a href="#JavaScript-进阶-第2天" class="headerlink" title="JavaScript 进阶 - 第2天"></a>JavaScript 进阶 - 第2天</h1><blockquote>
<p>​	本文是在了解面向对象编程的基础概念及构造函数的作用，体会 JavaScript 一切皆对象的语言特征，掌握常见的对象属性和方法的使用做的笔记。</p>
</blockquote>
<ul>
<li>了解面向对象编程中的一般概念</li>
<li>能够基于构造函数创建对象</li>
<li>理解 JavaScript 中一切皆对象的语言特征</li>
<li>理解引用对象类型值存储的的特征</li>
<li>掌握包装类型对象常见方法的使用</li>
</ul>
<h2 id="深入对象"><a href="#深入对象" class="headerlink" title="深入对象"></a>深入对象</h2><blockquote>
<p>了解面向对象的基础概念，能够利用构造函数创建对象。</p>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数是专门用于创建对象的函数，如果一个函数使用 <code>new</code> 关键字调用，那么这个函数就是构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 定义函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;通过 new 也能调用函数...&#x27;</span>);<br>  &#125;<br>  <span class="hljs-comment">// 调用函数</span><br>  <span class="hljs-keyword">new</span> foo;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>使用 <code>new</code> 关键字调用函数的行为被称为实例化</li>
<li>实例化构造函数时没有参数时可以省略 <code>()</code></li>
<li>构造函数的返回值即为新创建的对象</li>
<li>构造函数内部的 <code>return</code> 返回的值无效！</li>
</ol>
<p>注：实践中为了从视觉上区分构造函数和普通函数，习惯将构造函数的首字母大写。</p>
<h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 构造函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 构造函数内部的 this 就是实例对象</span><br>    <span class="hljs-comment">// 实例对象中动态添加属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;小明&#x27;</span><br>    <span class="hljs-comment">// 实例对象动态添加方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;大家好~&#x27;</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 实例化，p1 是实例对象</span><br>  <span class="hljs-comment">// p1 实际就是 构造函数内部的 this</span><br>  <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">name</span>) <span class="hljs-comment">// 访问实例属性</span><br>  p1.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// 调用实例方法</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>构造函数内部 <code>this</code> 实际上就是实例对象，为其动态添加的属性和方法即为实例成员</li>
<li>为构造函数传入参数，动态创建结构相同但值不同的对象</li>
</ol>
<p>注：构造函数创建的实例对象彼此独立互不影响。</p>
<h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>在 JavaScript 中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法，构造函数的属性和方法被称为静态成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 构造函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-comment">// 省略实例成员</span><br>  &#125;<br>  <span class="hljs-comment">// 静态属性</span><br>  <span class="hljs-title class_">Person</span>.<span class="hljs-property">eyes</span> = <span class="hljs-number">2</span><br>  <span class="hljs-title class_">Person</span>.<span class="hljs-property">arms</span> = <span class="hljs-number">2</span><br>  <span class="hljs-comment">// 静态方法</span><br>  <span class="hljs-title class_">Person</span>.<span class="hljs-property">walk</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;^_^人都会走路...&#x27;</span>)<br>    <span class="hljs-comment">// this 指向 Person</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">eyes</span>)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>静态成员指的是添加到构造函数本身的属性和方法</li>
<li>一般公共特征的属性或方法静态成员设置为静态成员</li>
<li>静态成员方法中的 <code>this</code> 指向构造函数本身</li>
</ol>
<h2 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h2><blockquote>
<p>掌握各引用类型和包装类型对象属性和方法的使用。</p>
</blockquote>
<p>在 JavaScript 中<strong>最主要</strong>的数据类型有 6 种，分别是字符串、数值、布尔、undefined、null 和 对象，常见的对象类型数据包括数组和普通对象。其中字符串、数值、布尔、undefined、null 也被称为简单类型或基础类型，对象也被称为引用类型。</p>
<p>在 JavaScript 内置了一些构造函数，绝大部的数据处理都是基于这些构造函数实现的，JavaScript 基础阶段学习的 <code>Date</code> 就是内置的构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 实例化</span><br>	<span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  <br>  <span class="hljs-comment">// date 即为实例对象</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>甚至字符串、数值、布尔、数组、普通对象也都有专门的构造函数，用于创建对应类型的数据。</p>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p><code>Object</code> 是内置的构造函数，用于创建普通对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 通过构造函数创建普通对象</span><br>  <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">15</span>&#125;)<br><br>  <span class="hljs-comment">// 这种方式声明的变量称为【字面量】</span><br>  <span class="hljs-keyword">let</span> student = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;杜子腾&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>&#125;<br>  <br>  <span class="hljs-comment">// 对象语法简写</span><br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;小红&#x27;</span>;<br>  <span class="hljs-keyword">let</span> people = &#123;<br>    <span class="hljs-comment">// 相当于 name: name</span><br>    name,<br>    <span class="hljs-comment">// 相当于 walk: function () &#123;&#125;</span><br>    walk () &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;人都要走路...&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(student.<span class="hljs-property">constructor</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">constructor</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(student <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>。</p>
<p>总结：</p>
<ol>
<li>推荐使用字面量方式声明对象，而不是 <code>Object</code> 构造函数</li>
<li><code>Object.assign</code> 静态方法创建新的对象</li>
<li><code>Object.keys</code> 静态方法获取对象中所有属性</li>
<li><code>Object.values</code> 表态方法获取对象中所有属性值</li>
</ol>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p><code>Array</code> 是内置的构造函数，用于创建数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 构造函数创建数组</span><br>  <span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>);<br><br>  <span class="hljs-comment">// 字面量方式创建数组</span><br>  <span class="hljs-keyword">let</span> list = [<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>, <span class="hljs-string">&#x27;javascript&#x27;</span>]<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>数组赋值后，无论修改哪个变量另一个对象的数据值也会相当发生改变。</p>
<p>总结：</p>
<ol>
<li><p>推荐使用字面量方式声明数组，而不是 <code>Array</code> 构造函数</p>
</li>
<li><p>实例方法 <code>forEach</code> 用于遍历数组，替代 <code>for</code> 循环 (重点)</p>
</li>
<li><p>实例方法 <code>filter</code> 过滤数组单元值，生成新数组(重点)</p>
</li>
<li><p>实例方法 <code>map</code> 迭代原数组，生成新数组(重点)</p>
</li>
<li><p>实例方法 <code>join</code> 数组元素拼接为字符串，返回字符串(重点)</p>
</li>
<li><p>实例方法 <code>find</code> 查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined(重点)</p>
</li>
<li><p>实例方法<code>every</code> 检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回 true，否则返回 false(重点)</p>
</li>
<li><p>实例方法<code>some</code> 检测数组中的元素是否满足指定条件 <strong>如果数组中有</strong>元素满足条件返回 true，否则返回 false</p>
</li>
<li><p>实例方法 <code>concat</code> 合并两个数组，返回生成新数组</p>
</li>
<li><p>实例方法 <code>sort</code> 对原数组单元值排序</p>
</li>
<li><p>实例方法 <code>splice</code> 删除或替换原数组单元</p>
</li>
<li><p>实例方法 <code>reverse</code> 反转数组</p>
</li>
<li><p>实例方法 <code>findIndex</code> 查找元素的索引值</p>
</li>
</ol>
<h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><p>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，如下代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 字符串类型</span><br>  <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello world!&#x27;</span><br> 	<span class="hljs-comment">// 统计字符的长度（字符数量）</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>)<br>  <br>  <span class="hljs-comment">// 数值类型</span><br>  <span class="hljs-keyword">const</span> price = <span class="hljs-number">12.345</span><br>  <span class="hljs-comment">// 保留两位小数</span><br>  price.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 12.34</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型。</p>
<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p><code>String</code> 是内置的构造函数，用于创建字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 使用构造函数创建字符串</span><br>  <span class="hljs-keyword">let</span> str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;hello world!&#x27;</span>);<br><br>  <span class="hljs-comment">// 字面量创建字符串</span><br>  <span class="hljs-keyword">let</span> str2 = <span class="hljs-string">&#x27;你好，世界！&#x27;</span>;<br><br>  <span class="hljs-comment">// 检测是否属于同一个构造函数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">constructor</span> === str2.<span class="hljs-property">constructor</span>); <span class="hljs-comment">// true</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>); <span class="hljs-comment">// false</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>实例属性 <code>length</code> 用来获取字符串的度长(重点)</li>
<li>实例方法 <code>split(&#39;分隔符&#39;)</code> 用来将字符串拆分成数组(重点)</li>
<li>实例方法 <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code> 用于字符串截取(重点)</li>
<li>实例方法 <code>startsWith(检测字符串[, 检测位置索引号])</code> 检测是否以某字符开头(重点)</li>
<li>实例方法 <code>includes(搜索的字符串[, 检测位置索引号])</code> 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false(重点)</li>
<li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li>
<li>实例方法 <code>toLowerCase</code> 用于将就转换成小写</li>
<li>实例方法 <code>indexOf</code> 检测是否包含某字符</li>
<li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li>
<li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li>
<li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li>
</ol>
<p>注：String 也可以当做普通函数使用，这时它的作用是强制转换成字符串数据类型。</p>
<h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p><code>Number</code> 是内置的构造函数，用于创建数值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 使用构造函数创建数值</span><br>  <span class="hljs-keyword">let</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;10&#x27;</span>)<br>  <span class="hljs-keyword">let</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">5</span>)<br><br>  <span class="hljs-comment">// 字面量创建数值</span><br>  <span class="hljs-keyword">let</span> z = <span class="hljs-number">20</span><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>推荐使用字面量方式声明数值，而不是 <code>Number</code> 构造函数</li>
<li>实例方法 <code>toFixed</code> 用于设置保留小数位的长度</li>
</ol>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JS进阶学习DAY3</title>
    <url>/2023/07/31/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY3/</url>
    <content><![CDATA[<h1 id="JavaScript-进阶-第3天"><a href="#JavaScript-进阶-第3天" class="headerlink" title="JavaScript 进阶 - 第3天"></a>JavaScript 进阶 - 第3天</h1><blockquote>
<p>​	本文是在了解构造函数原型对象的语法特征，掌握 JavaScript 中面向对象编程的实现方式，基于面向对象编程思想实现 DOM 操作封装做的笔记。</p>
</blockquote>
<ul>
<li>了解面向对象编程的一般特征</li>
<li>掌握基于构造函数原型对象的逻辑封装</li>
<li>掌握基于原型对象实现的继承</li>
<li>理解什么原型链及其作用</li>
<li>能够处理程序异常提升程序执行的健壮性</li>
</ul>
<h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><blockquote>
<p>学习 JavaScript 中基于原型的面向对象编程序的语法实现，理解面向对象编程的特征。</p>
</blockquote>
<h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次</p>
<p>调用就可以了。</p>
<p>举个栗子：蛋炒饭</p>
<p><img src="/2023/07/31/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY3/1676792906898.png" alt="67679290689"></p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</p>
<p><img src="/2023/07/31/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY3/1676792930329.png" alt="67679293032"></p>
<p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</p>
<p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p>
<p>面向对象的特性：</p>
<ul>
<li>封装性</li>
<li>继承性</li>
<li>多态性</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>对比以下通过面向对象的构造函数实现的封装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>    this.name = &#x27;佚名&#x27;<br>    // 设置名字<br>    this.setName = function (name) &#123;<br>      this.name = name<br>    &#125;<br>    // 读取名字<br>    this.getName = () =&gt; &#123;<br>      console.log(this.name)<br>    &#125;<br>  &#125;<br><br>  // 实例对像，获得了构造函数中封装的所有逻辑<br>  let p1 = new Person()<br>  p1.setName(&#x27;小明&#x27;)<br>  console.log(p1.name)<br><br>  // 实例对象<br>  let p2 = new Person()<br>  console.log(p2.name)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p>
<p>同样的将变量和函数组合到了一起并能通过 this 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之</p>
<p>间是彼此不影响的</p>
<blockquote>
<p>总结：</p>
<ol>
<li>构造函数体现了面向对象的封装特性</li>
<li>构造函数实例创建的对象彼此独立、互不影响</li>
</ol>
</blockquote>
<p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p>
<p>前面我们学过的构造函数方法很好用，但是 存在<code>浪费内存</code>的问题</p>
<h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>构造函数通过原型分配的函数是所有对象所 共享的。</p>
<ul>
<li>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象</li>
<li>这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存</li>
<li>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</li>
<li>构造函数和原型对象中的this 都指向 实例化的对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>    <br>  &#125;<br><br>  // 每个函数都有 prototype 属性<br>  console.log(Person.prototype)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>了解了 JavaScript 中构造函数与原型对象的关系后，再来看原型对象具体的作用，如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>    // 此处未定义任何方法<br>  &#125;<br><br>  // 为构造函数的原型对象添加方法<br>  Person.prototype.sayHi = function () &#123;<br>    console.log(&#x27;Hi~&#x27;);<br>  &#125;<br>	<br>  // 实例化<br>  let p1 = new Person();<br>  p1.sayHi(); // 输出结果为 Hi~<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>构造函数 <code>Person</code> 中未定义任何方法，这时实例对象调用了原型对象中的方法 <code>sayHi</code>，接下来改动一下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>    // 此处定义同名方法 sayHi<br>    this.sayHi = function () &#123;<br>      console.log(&#x27;嗨!&#x27;);<br>    &#125;<br>  &#125;<br><br>  // 为构造函数的原型对象添加方法<br>  Person.prototype.sayHi = function () &#123;<br>    console.log(&#x27;Hi~&#x27;);<br>  &#125;<br><br>  let p1 = new Person();<br>  p1.sayHi(); // 输出结果为 嗨!<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>构造函数 <code>Person</code> 中定义与原型对象中相同名称的方法，这时实例对象调用则是构造函中的方法 <code>sayHi</code>。</p>
<p>通过以上两个简单示例不难发现 JavaScript 中对象的工作机制：<strong>当访问对象的属性或方法时，先在当前实例对象是查找，然后再去原型对象查找，并且原型对象被所有实例共享。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>	function Person() &#123;<br>    // 此处定义同名方法 sayHi<br>    this.sayHi = function () &#123;<br>      console.log(&#x27;嗨!&#x27; + this.name)<br>    &#125;<br>  &#125;<br><br>  // 为构造函数的原型对象添加方法<br>  Person.prototype.sayHi = function () &#123;<br>    console.log(&#x27;Hi~&#x27; + this.name)<br>  &#125;<br>  // 在构造函数的原型对象上添加属性<br>  Person.prototype.name = &#x27;小明&#x27;<br><br>  let p1 = new Person()<br>  p1.sayHi(); // 输出结果为 嗨!<br>  <br>  let p2 = new Person()<br>  p2.sayHi()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：<strong>结合构造函数原型的特征，实际开发重往往会将封装的功能函数添加到原型对象中。</strong></p>
<h3 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h3><p>在哪里？ 每个原型对象里面都有个constructor 属性（constructor 构造函数）</p>
<p>作用：该属性指向该原型对象的构造函数， 简单理解，就是指向我的爸爸，我是有爸爸的孩子</p>
<p><strong>使用场景：</strong></p>
<p>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值.</p>
<p>但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了</p>
<p>此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</p>
<h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><p>对象都会有一个属性 <strong>proto</strong> 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype</p>
<p>原型对象的属性和方法，就是因为对象有 <strong>proto</strong> 原型的存在。</p>
<p>注意：</p>
<ul>
<li><strong>proto</strong> 是JS非标准属性</li>
<li>[[prototype]]和__proto__意义相同</li>
<li>用来表明当前实例对象指向哪个原型对象prototype</li>
<li>__proto__对象原型里面也有一个 constructor属性，指向创建该实例对象的构造函数</li>
</ul>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承</p>
<p>的特性。</p>
<p>龙生龙、凤生凤、老鼠的儿子会打洞描述的正是继承的含义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;script&gt;<br>    // 继续抽取   公共的部分放到原型上<br>    // const Person1 = &#123;<br>    //   eyes: 2,<br>    //   head: 1<br>    // &#125;<br>    // const Person2 = &#123;<br>    //   eyes: 2,<br>    //   head: 1<br>    // &#125;<br>    // 构造函数  new 出来的对象 结构一样，但是对象不一样<br>    function Person() &#123;<br>      this.eyes = 2<br>      this.head = 1<br>    &#125;<br>    // console.log(new Person)<br>    // 女人  构造函数   继承  想要 继承 Person<br>    function Woman() &#123;<br><br>    &#125;<br>    // Woman 通过原型来继承 Person<br>    // 父构造函数（父类）   子构造函数（子类）<br>    // 子类的原型 =  new 父类  <br>    Woman.prototype = new Person()   // &#123;eyes: 2, head: 1&#125; <br>    // 指回原来的构造函数<br>    Woman.prototype.constructor = Woman<br><br>    // 给女人添加一个方法  生孩子<br>    Woman.prototype.baby = function () &#123;<br>      console.log(&#x27;宝贝&#x27;)<br>    &#125;<br>    const red = new Woman()<br>    console.log(red)<br>    // console.log(Woman.prototype)<br>    // 男人 构造函数  继承  想要 继承 Person<br>    function Man() &#123;<br><br>    &#125;<br>    // 通过 原型继承 Person<br>    Man.prototype = new Person()<br>    Man.prototype.constructor = Man<br>    const pink = new Man()<br>    console.log(pink)<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对</p>
<p>象的链状结构关系称为原型链</p>
<p><img src="/2023/07/31/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY3/1676793388695.png" alt="67679338869"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;script&gt;<br>    // function Objetc() &#123;&#125;<br>    console.log(Object.prototype)<br>    console.log(Object.prototype.__proto__)<br><br>    function Person() &#123;<br><br>    &#125;<br>    const ldh = new Person()<br>    // console.log(ldh.__proto__ === Person.prototype)<br>    // console.log(Person.prototype.__proto__ === Object.prototype)<br>    console.log(ldh instanceof Person)<br>    console.log(ldh instanceof Object)<br>    console.log(ldh instanceof Array)<br>    console.log([1, 2, 3] instanceof Array)<br>    console.log(Array instanceof Object)<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<p>① 当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</p>
<p>② 如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）</p>
<p>③ 如果还没有就查找原型对象的原型（Object的原型对象）</p>
<p>④ 依此类推一直找到 Object 为止（null）</p>
<p>⑤ __proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</p>
<p>⑥ 可以使用 instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JS进阶学习DAY4</title>
    <url>/2023/08/01/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY4/</url>
    <content><![CDATA[<h1 id="JavaScript-进阶-第4天"><a href="#JavaScript-进阶-第4天" class="headerlink" title="JavaScript 进阶 - 第4天"></a>JavaScript 进阶 - 第4天</h1><h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>首先浅拷贝和深拷贝只针对引用类型</p>
<p>浅拷贝：拷贝的是地址</p>
<p>常见方法：</p>
<ol>
<li>拷贝对象：Object.assgin() &#x2F; 展开运算符 {…obj} 拷贝对象</li>
<li>拷贝数组：Array.prototype.concat() 或者 […arr]</li>
</ol>
<blockquote>
<p>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址 (简单理解： 如果是单层对象，没问题，如果有多层就有问题)</p>
</blockquote>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>首先浅拷贝和深拷贝只针对引用类型</p>
<p>深拷贝：拷贝的是对象，不是地址</p>
<p>常见方法：</p>
<ol>
<li>通过递归实现深拷贝</li>
<li>lodash&#x2F;cloneDeep</li>
<li>通过JSON.stringify()实现</li>
</ol>
<h4 id="递归实现深拷贝"><a href="#递归实现深拷贝" class="headerlink" title="递归实现深拷贝"></a>递归实现深拷贝</h4><p>函数递归：</p>
<p>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数</p>
<ul>
<li>简单理解:函数内部自己调用自己, 这个函数就是递归函数</li>
<li>递归函数的作用和循环效果类似</li>
<li>由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件 return</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;script&gt;<br>    const obj = &#123;<br>      uname: &#x27;pink&#x27;,<br>      age: 18,<br>      hobby: [&#x27;乒乓球&#x27;, &#x27;足球&#x27;],<br>      family: &#123;<br>        baby: &#x27;小pink&#x27;<br>      &#125;<br>    &#125;<br>    const o = &#123;&#125;<br>    // 拷贝函数<br>    function deepCopy(newObj, oldObj) &#123;<br>      debugger<br>      for (let k in oldObj) &#123;<br>        // 处理数组的问题  一定先写数组 在写 对象 不能颠倒<br>        if (oldObj[k] instanceof Array) &#123;<br>          newObj[k] = []<br>          //  newObj[k] 接收 []  hobby<br>          //  oldObj[k]   [&#x27;乒乓球&#x27;, &#x27;足球&#x27;]<br>          deepCopy(newObj[k], oldObj[k])<br>        &#125; else if (oldObj[k] instanceof Object) &#123;<br>          newObj[k] = &#123;&#125;<br>          deepCopy(newObj[k], oldObj[k])<br>        &#125;<br>        else &#123;<br>          //  k  属性名 uname age    oldObj[k]  属性值  18<br>          // newObj[k]  === o.uname  给新对象添加属性<br>          newObj[k] = oldObj[k]<br>        &#125;<br>      &#125;<br>    &#125;<br>    deepCopy(o, obj) // 函数调用  两个参数 o 新对象  obj 旧对象<br>    console.log(o)<br>    o.age = 20<br>    o.hobby[0] = &#x27;篮球&#x27;<br>    o.family.baby = &#x27;老pink&#x27;<br>    console.log(obj)<br>    console.log([1, 23] instanceof Object)<br>    // 复习<br>    // const obj = &#123;<br>    //   uname: &#x27;pink&#x27;,<br>    //   age: 18,<br>    //   hobby: [&#x27;乒乓球&#x27;, &#x27;足球&#x27;]<br>    // &#125;<br>    // function deepCopy(&#123; &#125;, oldObj) &#123;<br>    //   // k 属性名  oldObj[k] 属性值<br>    //   for (let k in oldObj) &#123;<br>    //     // 处理数组的问题   k 变量<br>    //     newObj[k] = oldObj[k]<br>    //     // o.uname = &#x27;pink&#x27;<br>    //     // newObj.k  = &#x27;pink&#x27;<br>    //   &#125;<br>    // &#125;<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h4 id="js库lodash里面cloneDeep内部实现了深拷贝"><a href="#js库lodash里面cloneDeep内部实现了深拷贝" class="headerlink" title="js库lodash里面cloneDeep内部实现了深拷贝"></a>js库lodash里面cloneDeep内部实现了深拷贝</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;!-- 先引用 --&gt;<br>  &lt;script src=&quot;./lodash.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    const obj = &#123;<br>      uname: &#x27;pink&#x27;,<br>      age: 18,<br>      hobby: [&#x27;乒乓球&#x27;, &#x27;足球&#x27;],<br>      family: &#123;<br>        baby: &#x27;小pink&#x27;<br>      &#125;<br>    &#125;<br>    const o = _.cloneDeep(obj)<br>    console.log(o)<br>    o.family.baby = &#x27;老pink&#x27;<br>    console.log(obj)<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h4 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;script&gt;<br>    const obj = &#123;<br>      uname: &#x27;pink&#x27;,<br>      age: 18,<br>      hobby: [&#x27;乒乓球&#x27;, &#x27;足球&#x27;],<br>      family: &#123;<br>        baby: &#x27;小pink&#x27;<br>      &#125;<br>    &#125;<br>    // 把对象转换为 JSON 字符串<br>    // console.log(JSON.stringify(obj))<br>    const o = JSON.parse(JSON.stringify(obj))<br>    console.log(o)<br>    o.family.baby = &#x27;123&#x27;<br>    console.log(obj)<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><blockquote>
<p>了解 JavaScript 中程序异常处理的方法，提升代码运行的健壮性。</p>
</blockquote>
<h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><p>异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行</p>
<p>总结：</p>
<ol>
<li>throw 抛出异常信息，程序也会终止执行</li>
<li>throw 后面跟的是错误提示信息</li>
<li>Error 对象配合 throw 使用，能够设置更详细的错误信息</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function counter(x, y) &#123;<br><br>    if(!x || !y) &#123;<br>      // throw &#x27;参数不能为空!&#x27;;<br>      throw new Error(&#x27;参数不能为空!&#x27;)<br>    &#125;<br><br>    return x + y<br>  &#125;<br><br>  counter()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>throw</code> 抛出异常信息，程序也会终止执行</li>
<li><code>throw</code> 后面跟的是错误提示信息</li>
<li><code>Error</code> 对象配合 <code>throw</code> 使用，能够设置更详细的错误信息</li>
</ol>
<h3 id="try-…-catch"><a href="#try-…-catch" class="headerlink" title="try … catch"></a>try … catch</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>   function foo() &#123;<br>      try &#123;<br>        // 查找 DOM 节点<br>        const p = document.querySelector(&#x27;.p&#x27;)<br>        p.style.color = &#x27;red&#x27;<br>      &#125; catch (error) &#123;<br>        // try 代码段中执行有错误时，会执行 catch 代码段<br>        // 查看错误信息<br>        console.log(error.message)<br>        // 终止代码继续执行<br>        return<br><br>      &#125;<br>      finally &#123;<br>          alert(&#x27;执行&#x27;)<br>      &#125;<br>      console.log(&#x27;如果出现错误，我的语句不会执行&#x27;)<br>    &#125;<br>    foo()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>try...catch</code> 用于捕获错误信息</li>
<li>将预估可能发生错误的代码写在 <code>try</code> 代码段中</li>
<li>如果 <code>try</code> 代码段中出现错误后，会执行 <code>catch</code> 代码段，并截获到错误信息</li>
</ol>
<h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h3><p>相当于断点调试</p>
<h2 id="处理this"><a href="#处理this" class="headerlink" title="处理this"></a>处理this</h2><blockquote>
<p>了解函数中 this 在不同场景下的默认值，知道动态指定函数 this 值的方法。</p>
</blockquote>
<p><code>this</code> 是 JavaScript 最具“魅惑”的知识点，不同的应用场合 <code>this</code> 的取值可能会有意想不到的结果，在此我们对以往学习过的关于【 <code>this</code> 默认的取值】情况进行归纳和总结。</p>
<h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p><strong>普通函数</strong>的调用方式决定了 <code>this</code> 的值，即【谁调用 <code>this</code> 的值指向谁】，如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // 普通函数<br>  function sayHi() &#123;<br>    console.log(this)  <br>  &#125;<br>  // 函数表达式<br>  const sayHello = function () &#123;<br>    console.log(this)<br>  &#125;<br>  // 函数的调用方式决定了 this 的值<br>  sayHi() // window<br>  window.sayHi()<br>	<br><br>// 普通对象<br>  const user = &#123;<br>    name: &#x27;小明&#x27;,<br>    walk: function () &#123;<br>      console.log(this)<br>    &#125;<br>  &#125;<br>  // 动态为 user 添加方法<br>  user.sayHi = sayHi<br>  uesr.sayHello = sayHello<br>  // 函数调用方式，决定了 this 的值<br>  user.sayHi()<br>  user.sayHello()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>注： 普通函数没有明确调用者时 <code>this</code> 值为 <code>window</code>，严格模式下没有调用者时 <code>this</code> 的值为 <code>undefined</code>。</p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><strong>箭头函数</strong>中的 <code>this</code> 与普通函数完全不同，也不受调用方式的影响，事实上箭头函数中并不存在 <code>this</code> ！箭头函数中访问的 <code>this</code> 不过是箭头函数所在作用域的 <code>this</code> 变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>    <br>  console.log(this) // 此处为 window<br>  // 箭头函数<br>  const sayHi = function() &#123;<br>    console.log(this) // 该箭头函数中的 this 为函数声明环境中 this 一致<br>  &#125;<br>  // 普通对象<br>  const user = &#123;<br>    name: &#x27;小明&#x27;,<br>    // 该箭头函数中的 this 为函数声明环境中 this 一致<br>    walk: () =&gt; &#123;<br>      console.log(this)<br>    &#125;,<br>    <br>    sleep: function () &#123;<br>      let str = &#x27;hello&#x27;<br>      console.log(this)<br>      let fn = () =&gt; &#123;<br>        console.log(str)<br>        console.log(this) // 该箭头函数中的 this 与 sleep 中的 this 一致<br>      &#125;<br>      // 调用箭头函数<br>      fn();<br>    &#125;<br>  &#125;<br><br>  // 动态添加方法<br>  user.sayHi = sayHi<br>  <br>  // 函数调用<br>  user.sayHi()<br>  user.sleep()<br>  user.walk()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>在开发中【使用箭头函数前需要考虑函数中 <code>this</code> 的值】，<strong>事件回调函数</strong>使用箭头函数时，<code>this</code> 为全局的 <code>window</code>，因此DOM事件回调函数不推荐使用箭头函数，如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // DOM 节点<br>  const btn = document.querySelector(&#x27;.btn&#x27;)<br>  // 箭头函数 此时 this 指向了 window<br>  btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123;<br>    console.log(this)<br>  &#125;)<br>  // 普通函数 此时 this 指向了 DOM 对象<br>  btn.addEventListener(&#x27;click&#x27;, function () &#123;<br>    console.log(this)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>同样由于箭头函数 <code>this</code> 的原因，<strong>基于原型的面向对象也不推荐采用箭头函数</strong>，如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>  &#125;<br>  // 原型对像上添加了箭头函数<br>  Person.prototype.walk = () =&gt; &#123;<br>    console.log(&#x27;人都要走路...&#x27;)<br>    console.log(this); // window<br>  &#125;<br>  const p1 = new Person()<br>  p1.walk()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h3><p>以上归纳了普通函数和箭头函数中关于 <code>this</code> 默认值的情形，不仅如此 JavaScript 中还允许指定函数中 <code>this</code> 的指向，有 3 个方法可以动态指定普通函数中 <code>this</code> 的指向：</p>
<h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>使用 <code>call</code> 方法调用函数，同时指定函数中 <code>this</code> 的值，使用方法如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // 普通函数<br>  function sayHi() &#123;<br>    console.log(this);<br>  &#125;<br><br>  let user = &#123;<br>    name: &#x27;小明&#x27;,<br>    age: 18<br>  &#125;<br><br>  let student = &#123;<br>    name: &#x27;小红&#x27;,<br>    age: 16<br>  &#125;<br><br>  // 调用函数并指定 this 的值<br>  sayHi.call(user); // this 值为 user<br>  sayHi.call(student); // this 值为 student<br><br>  // 求和函数<br>  function counter(x, y) &#123;<br>    return x + y;<br>  &#125;<br><br>  // 调用 counter 函数，并传入参数<br>  let result = counter.call(null, 5, 10);<br>  console.log(result);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>call</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li>
<li>使用 <code>call</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li>
<li><code>call</code> 方法的其余参数会依次自动传入函数做为函数的参数</li>
</ol>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p>使用 <code>call</code> 方法<strong>调用函数</strong>，同时指定函数中 <code>this</code> 的值，使用方法如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // 普通函数<br>  function sayHi() &#123;<br>    console.log(this)<br>  &#125;<br><br>  let user = &#123;<br>    name: &#x27;小明&#x27;,<br>    age: 18<br>  &#125;<br><br>  let student = &#123;<br>    name: &#x27;小红&#x27;,<br>    age: 16<br>  &#125;<br><br>  // 调用函数并指定 this 的值<br>  sayHi.apply(user) // this 值为 user<br>  sayHi.apply(student) // this 值为 student<br><br>  // 求和函数<br>  function counter(x, y) &#123;<br>    return x + y<br>  &#125;<br>  // 调用 counter 函数，并传入参数<br>  let result = counter.apply(null, [5, 10])<br>  console.log(result)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>apply</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li>
<li>使用 <code>apply</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li>
<li><code>apply</code> 方法第2个参数为数组，数组的单元值依次自动传入函数做为函数的参数</li>
</ol>
<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p><code>bind</code> 方法并<strong>不会调用函数</strong>，而是创建一个指定了 <code>this</code> 值的新函数，使用方法如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // 普通函数<br>  function sayHi() &#123;<br>    console.log(this)<br>  &#125;<br>  let user = &#123;<br>    name: &#x27;小明&#x27;,<br>    age: 18<br>  &#125;<br>  // 调用 bind 指定 this 的值<br>  let sayHello = sayHi.bind(user);<br>  // 调用使用 bind 创建的新函数<br>  sayHello()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>注：<code>bind</code> 方法创建新的函数，与原函数的唯一的变化是改变了 <code>this</code> 的值。</p>
<h2 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h2><ol>
<li>防抖（debounce） 所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</li>
<li>节流（throttle） 所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数</li>
</ol>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP与UDP的区别</title>
    <url>/2023/10/02/TCP%E4%B8%8EUDP%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP（Transmission Control Protocol）是计算机网络中最常用的传输层协议之一，它提供了可靠的、面向连接的数据传输服务。TCP负责将应用层的数据分割成合适的数据包，并确保这些数据包按照正确的顺序到达目标主机。下面详细介绍TCP的特点、工作机制和关键概念：</p>
<p><strong>特点和优势：</strong></p>
<ol>
<li><strong>可靠性：</strong> TCP通过序列号、确认应答和重传机制确保数据的可靠传输，即使在网络拥塞或丢包的情况下也能恢复丢失的数据。</li>
<li><strong>面向连接：</strong> TCP建立了一个虚拟的、全双工的连接，确保通信双方能够互相通信，并且在数据传输结束后关闭连接。</li>
<li><strong>流量控制：</strong> TCP使用滑动窗口机制来控制发送和接收数据的速率，以避免数据包在网络中的拥塞。</li>
<li><strong>拥塞控制：</strong> TCP能够检测网络的拥塞程度，并相应地减少发送速率，从而避免网络拥塞。</li>
<li><strong>顺序保证：</strong> TCP确保数据包按照正确的顺序到达目标主机，即使数据包在传输过程中发生乱序也会被重新排序。</li>
</ol>
<p><strong>TCP工作机制：</strong></p>
<ol>
<li><strong>三次握手：</strong> 在建立TCP连接时，客户端发送一个带有SYN（同步）标志的数据包给服务器，服务器收到后回复一个带有SYN和ACK（确认）标志的包，最后客户端再回复一个ACK包，这样连接就建立起来了。</li>
<li><strong>数据传输：</strong> 数据在TCP连接上被分割成适当的数据包，每个数据包都有一个序列号。接收端通过确认应答和序列号来追踪数据包的顺序和丢失情况。</li>
<li><strong>流量和拥塞控制：</strong> TCP使用滑动窗口机制来控制发送和接收数据的速率，避免了发送方速度过快导致接收方缓冲区溢出。此外，TCP还使用拥塞控制算法来避免网络拥塞。</li>
<li><strong>四次挥手：</strong> 在关闭TCP连接时，首先一方发送一个带有FIN标志的数据包，另一方回复一个ACK包，然后发送方再发送一个带有FIN标志的包，最后接收方回复一个ACK包，这样连接就被终止了。</li>
</ol>
<p><strong>TCP关键概念：</strong></p>
<ol>
<li><strong>序列号和确认号：</strong> 每个TCP数据包都有一个序列号，用于指示数据包在数据流中的位置。确认号用于确认已经接收到的数据。</li>
<li><strong>滑动窗口：</strong> 滑动窗口是发送方和接收方之间用来控制数据流速率的窗口大小。</li>
<li><strong>超时和重传：</strong> 如果发送方没有收到确认应答，就会认为数据包丢失，触发重传机制。</li>
<li><strong>MSS（Maximum Segment Size）：</strong> MSS表示TCP数据包的最大大小，它取决于网络的最大传输单元（MTU）。</li>
</ol>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP（User Datagram Protocol）是另一种常用的传输层协议，与TCP相比，它更加简单，但不提供TCP的可靠性和连接性。UDP通常用于那些对实时性要求较高、但不需要可靠传输的应用场景。以下是关于UDP的详细介绍：</p>
<p><strong>特点和优势：</strong></p>
<ol>
<li><strong>无连接性：</strong> UDP是一种无连接的协议，发送端发送数据包后，不需要等待接收端的确认应答。这使得UDP更加轻量级，但也意味着数据包可能会在传输过程中丢失、重复或乱序。</li>
<li><strong>快速：</strong> 由于UDP不需要建立和维护连接，因此它通常比TCP更快。这使得它适用于实时应用，如音视频传输和在线游戏。</li>
<li><strong>低延迟：</strong> 由于UDP没有TCP的拥塞控制和流量控制机制，它的延迟较低。但这也可能导致网络拥塞时性能下降。</li>
<li><strong>广播和多播：</strong> UDP支持广播和多播传输，这意味着一个数据包可以同时发送给多个目标主机，适用于一对多通信。</li>
</ol>
<p><strong>UDP工作机制：</strong></p>
<ol>
<li><strong>数据封装：</strong> 应用层的数据被分割成UDP数据包，每个数据包包含目标端口号和源端口号信息。</li>
<li><strong>数据传输：</strong> 数据包通过网络传输，但不保证数据包的顺序、传输可靠性，也不会提供重传机制。</li>
<li><strong>数据接收：</strong> 接收方根据端口号接收数据包，并从中提取数据。</li>
</ol>
<p><strong>适用场景：</strong></p>
<p>UDP适用于以下场景：</p>
<ul>
<li><strong>实时应用：</strong> 由于UDP的低延迟特性，它在实时应用中表现出色，如在线游戏、视频聊天和实时音频传输。</li>
<li><strong>广播和多播：</strong> UDP支持广播和多播传输，适用于向多个主机同时发送数据。</li>
<li><strong>短消息传递：</strong> 当应用程序只需要发送简短的控制消息或数据包时，UDP可以提供高效的解决方案。</li>
<li><strong>简单数据传输：</strong> 如果应用程序可以容忍丢失的数据，且要求尽可能低的开销，UDP可以是一个合适的选择。</li>
</ul>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>TCP（Transmission Control Protocol）和UDP（User Datagram Protocol）是两种不同的传输层协议，用于在计算机网络中传输数据。它们在特点、用途和工作方式上有很大的区别。以下是TCP和UDP之间的主要区别：</p>
<p><strong>1. 连接性与可靠性：</strong></p>
<ul>
<li>TCP是面向连接的协议，通过三次握手建立连接，确保数据传输的可靠性，提供错误检测、流量控制、拥塞控制和重传机制，适用于需要确保数据不丢失、不重复、有序传输的场景。</li>
<li>UDP是无连接的协议，不建立连接，不提供可靠性保证，不保证数据的顺序和传输，适用于实时性要求较高、允许丢失的数据传输，如音视频传输、实时游戏等。</li>
</ul>
<p><strong>2. 传输速度和效率：</strong></p>
<ul>
<li>由于TCP提供可靠性保证，它会引入一些额外的开销，导致传输速度较慢，适用于不要求速度但要求数据完整性的场景。</li>
<li>UDP没有TCP的复杂机制，传输速度较快，适用于实时性要求较高、可以容忍少量数据丢失的场景。</li>
</ul>
<p><strong>3. 数据包顺序：</strong></p>
<ul>
<li>TCP会确保数据包按照正确的顺序传输，如果有数据包丢失，会重新发送，从而保证数据的有序性。</li>
<li>UDP不保证数据包的顺序，数据包可能会乱序传输，需要应用层处理数据的顺序问题。</li>
</ul>
<p><strong>4. 拥塞控制：</strong></p>
<ul>
<li>TCP具有拥塞控制机制，可以在网络拥塞时减少数据传输速率，从而避免网络崩溃。</li>
<li>UDP没有拥塞控制，数据包可能会在拥塞时引发网络问题。</li>
</ul>
<p><strong>5. 适用场景：</strong></p>
<ul>
<li>TCP适用于需要确保数据可靠性的场景，如网页浏览、文件传输、电子邮件等。</li>
<li>UDP适用于实时性要求较高、可以容忍少量数据丢失的场景，如实时游戏、音视频传输、VoIP等。</li>
</ul>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>Ts泛型的使用</title>
    <url>/2023/10/14/Ts%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型是可以在<strong>保证类型安全</strong>的前提下，让函数等与多种类型一起工作，从而实现复用，常用于：函数、接口、class中。日常我们创建的函数，传入什么数据就返回什么数据本身，即参数与返回值的类型相同，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">function add(value: number): number&#123;<br>return value<br>&#125;<br></code></pre></td></tr></table></figure>

<p>而为了能够让函数接收任何类型，我们以前可以将参数类型修改为any。但这样就失去了TS的类型保护，类型不安全，泛型在保证类型安全的同时（不丢失类型信息），可以让函数与多种不同的类型一起工作，灵活可复用。</p>
<h3 id="泛型函数使用"><a href="#泛型函数使用" class="headerlink" title="泛型函数使用"></a>泛型函数使用</h3><p><strong>创建泛型函数</strong>：我们在创建函数的同时在函数名称后面添加 &lt;&gt; (尖括号)，尖括号中添加类型变量，如下：</p>
<p>当然创建泛型函数的类型变量可以是任意合法变量名称，不仅仅是下面例子中的type。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 类型变量 type 是一种特殊类型的变量，它只处理类型不处理值。<br>// 该类型变量相当于一个类型容器，能够捕获用户提供的类型(具体类型由用户调用函数时指定)<br>function add&lt;type&gt;(value: type): type&#123;<br>return value<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>调用泛型函数</strong>：</p>
<p>在调用函数的同时在函数后面声明自己要传入参数的类型，用 &lt;&gt; 进行包裹。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 创建泛型函数<br>function add&lt;type&gt;(value: type): type&#123;<br>return value<br>&#125;<br>// 调用泛型函数<br>const num = add&lt;number&gt;(10) // 以 number 类型调用函数<br>const str = add&lt;string&gt;(&#x27;s&#x27;) // 以 string 类型调用函数<br>const ret = add&lt;boolean&gt;(true) // 以 boolean 类型调用函数<br></code></pre></td></tr></table></figure>

<p>当然在调用泛型函数时，可以省略&lt;类型&gt;来<strong>简化泛型函数的调用</strong>。因为TS内部会采用一种叫做<strong>类型参数推断的机制</strong>，来根据传入的参数自动推断出类型变量的类型。使用这种简化的方式调用泛型函数，使代码更短更便于阅读。</p>
<p><strong>注意</strong>：当编译器无法推断类型或者推断的类型不准确时，就需要显式地传入类型参数。</p>
<h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>默认情况下，泛型函数的类型变量<strong>可以代表多个类型</strong>，这就导致<strong>无法访问任何属性</strong>。比如当我们需要获取字符串长度时使用泛型就会报错，因为泛型代表任意类型无法保证一定存在某个属性，此时就需要为泛型 <strong>添加约束</strong> 来<strong>缩窄类型取值范围</strong>。</p>
<p>添加泛型约束收缩类型主要有以下两种方式：</p>
<p><strong>指定更具体的类型</strong>：可以根据自身需要将泛型函数的类型修改来获取属性，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 创建泛型函数<br>function add&lt;type&gt;(value: type[]): type&#123;<br>console.log(value.length)<br>return value<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>添加约束</strong>：可以创建描述约束的接口来提供自己的属性，通过 extends 关键字为类型变量添加约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">interface MyLength &#123;<br>length:number<br>&#125;// 创建泛型函数<br>function add&lt;type extends MyLength&gt;(value: type): type&#123;<br>console.log(value.length)<br>return value<br>&#125;<br>add([1,2])<br>add(&#x27;123&#x27;)<br>add(&#123;name:&#x27;张三&#x27;,length:12,age:13&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="多泛型使用"><a href="#多泛型使用" class="headerlink" title="多泛型使用"></a>多泛型使用</h3><p>泛型的类型变量可以有多个，并且类型变量之间还可以约束(比如：第二个类型变量受第一个类型变量约束)。案例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 创建泛型函数<br>// keyof关键字接收一个对象类型，生成其键名称（或字符串或者数字）的联合类型<br>function add&lt;type,key extends keyof type&gt;(obj: type,value: key) &#123;<br>return obj[value]<br>&#125;<br>add(18,&quot;toString&quot;)<br>add(&#123;name:&#x27;张三&#x27;,age:18&#125;,&quot;name&quot;)<br></code></pre></td></tr></table></figure>

<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>在<strong>接口的名称后面添加 &lt;类型变量&gt;</strong> ，那么这个接口就变成了泛型接口。接口也可以搭配泛型来使用，以增加其灵活性，增强其复用性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">interface person&lt;type&gt; &#123;<br>id: (value:type) =&gt; type<br>ids: ()=&gt; type[]<br>&#125;<br>// 使用泛型接口时一定要显式指定具体类型，否则报错<br>let p: person&lt;number&gt; =&#123;<br>id(value)&#123;<br>return value<br>&#125;,<br>ids() &#123;<br>return [1,2,3]<br>&#125;,<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>class也可以配合泛型来使用。</p>
<p><strong>创建泛型类</strong>：</p>
<p>类似于泛型接口，在class名称后面添加&lt;类型变量&gt;，这个类就变成了泛型类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">class Animals&lt;type&gt; &#123;<br>defaultValue: type<br>say: (x: number,y :number) =&gt; type<br>constructor(value: type)&#123;<br>this.defaultValue = value<br>&#125;<br>&#125;<br>// 当我们提供 constructor 并且里面已经提供类型了，这个时候我们new实例的时候，类型可以省略。// const num = new Animals&lt;number&gt;(10)<br>const num = new Animals(10)<br></code></pre></td></tr></table></figure>

<h3 id="泛型工具类型"><a href="#泛型工具类型" class="headerlink" title="泛型工具类型"></a>泛型工具类型</h3><p>TS内置了一些常用的工具类型，来简化TS中的一些常见操作。它们都是基于泛型实现的，并且都是内置的，可以直接在代码中使用。这些工具类很多，主要学习以下几个：</p>
<p>**Partial<type>**：用来构造一个类型，将type的所有属性设置为可选。</type></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">interface People &#123;<br>name: string<br>age: number<br>hobby: number[]<br>&#125;<br>// 使的接口属性变为可选属性<br>type commenPeople = Partial&lt;People&gt;<br>// 调用接口，属性一定必须<br>let p1: People = &#123;<br>name:&#x27;张三&#x27;,<br>age:18,<br>hobby:[1,2]<br>&#125;<br>// 使用 Partial 使的接口属性变为可选<br>let p2: commenPeople = &#123;<br>name:&#x27;&#x27;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>**Readonly<type>**：用来构造一个类型，将type的所有属性都设置为 readonly (只读)。</type></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">interface People &#123;<br>name: string<br>age: number<br>hobby: number[]<br>&#125;<br>// 使的接口属性变为可选属性<br>type ReadonlyPeople = Readonly&lt;People&gt;<br>// 调用接口，属性一定必须<br>let p1: ReadonlyPeople = &#123;<br>name:&#x27;张三&#x27;,<br>age:18,<br>hobby:[1,2]<br>&#125;<br>// 无法分配到 &quot;name&quot; ，因为它是只读属性。<br>// p1.name = &#x27;李四&#x27;<br></code></pre></td></tr></table></figure>

<p><strong>Pick&lt;type,keys&gt;<strong>：从type中选择一组属性来构造新类型。Pick工具类型有两个类型变量：第一个表示选择谁的属性；第二个表示选择哪几个属性。</strong>注意</strong>：第二个类型变量传入的属性只能是第一个类型变量中存在的属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">interface People &#123;<br>name: string<br>age: number<br>hobby: number[]&#125;<br>// 使的接口属性变为可选择属性<br>type RickPeople = Pick&lt;People,&#x27;name&#x27;|&#x27;hobby&#x27;&gt;<br>// 调用接口，属性一定必须<br>let p1: RickPeople = &#123;name:&#x27;张三&#x27;,<br>// 对象文字可以只指定已知属性，并且“age”不在类型“RickPeople”中。<br>// age:18,<br>hobby:[1,2]<br>&#125;<br></code></pre></td></tr></table></figure>

<p>**Record&lt;keys,type&gt;**：构造一个对象类型，属性键位keys，属性值为type。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">type RecordObj = Record&lt;&#x27;a&#x27;|&#x27;b&#x27;|&#x27;c&#x27;,string[]&gt;<br>let obj: RecordObj = &#123;<br>a:[&#x27;1&#x27;],<br>b:[&#x27;1&#x27;],<br>c:[&#x27;1&#x27;]<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ts</category>
      </categories>
      <tags>
        <tag>前端知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3+tsx开发语法详解</title>
    <url>/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>很多组件库都使用了<code>TSX</code>的方式开发，主要因为其灵活性比较高，<code>TSX</code>和<code>SFC</code>开发的优缺点就不介绍了，这里主要说一下将<code>SFC</code>项目改造为<code>TSX</code>的过程。</p>
<h3 id="安装JSX库"><a href="#安装JSX库" class="headerlink" title="安装JSX库"></a>安装JSX库</h3><p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/faedab64034f78f0b0cba4c5cf94e45fb2191c77.png" alt="img"></p>
<p>安装完之后在vite.config.ts进行插件使用，代码如下：</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/95eef01f3a292df52285b6930494b26a35a87326.png" alt="img"></p>
<p>然后就可以愉快的使用<code>TSX</code>来开发<code>Vue</code>组件了，下面主要说一下<code>SFC</code>和<code>TSX</code>的部分区别。</p>
<h3 id="基本语法对照-SFC"><a href="#基本语法对照-SFC" class="headerlink" title="基本语法对照 SFC"></a>基本语法对照 SFC</h3><h3 id="defineComponent-和-setup"><a href="#defineComponent-和-setup" class="headerlink" title="defineComponent 和 setup"></a>defineComponent 和 setup</h3><p>SFC方式结构固定：template、script、style</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/0823dd54564e92583b09a07125273f52cdbf4ea4.jpeg" alt="img"></p>
<p>TSX方式就完全是一个ts文件的写法，没有模板template和样式style</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/9825bc315c6034a88dd8926e77b6a75e08237653.jpeg" alt="img"></p>
<p>setup中函数的返回值有多种方式，可以直接返回html，这个适合结构简单的页面，如果返回比较多，可以使用如下方式：</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/241f95cad1c8a7865d780621d8ac273771cf50fb.jpeg" alt="img"></p>
<p>如果是多节点，可以使用空符号包裹</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/8435e5dde71190efb239bb2772be731cfffa60bc.jpeg" alt="img"></p>
<p>在以上的方式中我们把除了布局以外的逻辑都写在&#x2F;&#x2F;Todo部分，但是有时候我们需要做一些按条件渲染的逻辑，那么也可以在return里加处理逻辑，例如：</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/18d8bc3eb13533fa905a792d7876131540345b71.png" alt="img"></p>
<p>这种方式类似v-if，但是和v-if还是有点区别，v-if可以作用在更小的范围，而这种方式只适合整个组件的条件渲染，这个可能不好理解，在下面v-if的使用中我们会看到区别。</p>
<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>使用条件判断语句来实现v-if的功能，一般是三目运算符</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/359b033b5bb5c9ea1a88924d639c580a3bf3b351.png" alt="img"></p>
<p>在这里你可以看到<code>v-if</code>的使用和我们上面的条件返回不一样，区别就是整体渲染没有大的变化，只是其中部分地方要按条件显示。</p>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>绑定变量，也就是简写的:冒号，修改方式就是将冒号去掉，把双引号改为大括号</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/a71ea8d3fd1f41343015591d93ba7bc0d0c85ee7.png" alt="img"></p>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>采用map循环的方式，返回一个数组</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/dbb44aed2e738bd49628c0b3162e69dc267ff953.png" alt="img"></p>
<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>自定义指令和普通指令<code>v-model</code>一样</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/3ac79f3df8dcd1000330a86dc52ea91ab8122f7a.png" alt="img"></p>
<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>插槽有两种实现方式，一种是用<code>v-slots</code>绑定对象，一种是直接在元素中使用对象。</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/63d9f2d3572c11df99d3de2bd5828cdaf603c2ec.png" alt="img"></p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/c995d143ad4bd113c66209cae50a4a0549fb05cf.png" alt="img"></p>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>父组件向子组件传值</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/6159252dd42a2834a8d017f7ee1027e014cebf0c.png" alt="img"></p>
<p>需要注意的是，prop传递过来的值如果没有默认值，需要判断是否为空，可以使用计算属性或者条件渲染处理。</p>
<h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><p>子组件向父组件传值</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/3ac79f3df8dcd100b93cd628c52ea91ab8122f42.png" alt="img"></p>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>事件监听就是<code>v-on</code>或者<code>@</code>，在<code>TSX</code>中事件以<code>on</code>开头，即使我们的自定义事件没有<code>on</code>，也要在监听的时候加上，一般都采用的是小驼峰的方式。</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/7aec54e736d12f2e9c1d2cc9f7673b68843568ab.png" alt="img"></p>
<p>自定义事件只需要在事件名前面加上on即可，参数传递与上面一致</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/f31fbe096b63f62464aa82053be105f21b4ca375.png" alt="img"></p>
<p>在<code>TSX</code>中处理事件不能使用事件修饰符，因此需要在事件函数中自行处理，例如冒泡、阻止默认行为等。</p>
<h3 id="属性-事件继承"><a href="#属性-事件继承" class="headerlink" title="属性&#x2F;事件继承"></a>属性&#x2F;事件继承</h3><p>对于这个我也不知道怎么描述，当我们给一个组件传递属性和事件时，一般子组件在<code>props</code>中接收属性值，<code>emits</code>中接收事件，但是我们也可以传一些额外的属性和事件，即不在<code>props</code>和<code>emits</code>中的属性和事件，虽然这是不推荐的做法，但是有时候当我们封装第三方库的时候，这种用法就非常的方便。具体看如下代码：</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/d1a20cf431adcbef4e77c469120ac0d7a2cc9f4a.png" alt="img"></p>
<p><code>SFC</code>中，在<code>template</code>中我们可以通过<code>$attrs</code>获取到额外的属性和方法，<code>script</code>中可以通过<code>getCurrentInstance</code>方法获取组件对象，然后通过<code>.attrs</code>拿到属性和方法。</p>
<p><code>TSX</code>中，直接通过<code>attrs</code>获取属性和方法，通过<code>&#123;...attrs&#125;</code>把属性和方法传递给子元素。</p>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p><code>v-show</code>和<code>v-model</code>与<code>SFC</code>中使用一样，这里不做示例</p>
<h3 id="组件引用"><a href="#组件引用" class="headerlink" title="组件引用"></a>组件引用</h3><p>通过<code>ref</code>获取组件<code>dom</code>信息</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/9358d109b3de9c82c091223dd6246e0018d84338.png" alt="img"></p>
<h3 id="对外暴露属性和方法"><a href="#对外暴露属性和方法" class="headerlink" title="对外暴露属性和方法"></a>对外暴露属性和方法</h3><p>在父组件中直接调用子组件的属性和方法</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/7aec54e736d12f2e0836b5e2fa673b68843568b5.png" alt="img"></p>
<h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><p>样式的改造一度是我切换<code>TSX</code>的最大痛点，因为在<code>SFC</code>中最麻烦的是修改第三方库的样式，一般要用到<code>:deep</code>，而且有时候还不一定成功，非常麻烦，改为<code>TSX</code>后我一直不知道怎么解决这种问题，后来搞定以后再回过头来看，发现是<code>vue</code>写久了养成了固定思维。我们在<code>vue</code>文件中写的样式都包含在<code>scoped</code>下面，如果不加<code>scoped</code>就可能会造成全局样式污染。那为什么会造成全局样式污染？又为什么加了<code>scoped</code>就不会呢？实际上我们只要知道<code>CSS</code>基础，明白<code>CSS</code>中的样式优先级即可。<code>vue</code>生成的项目最终还是会回归到<code>html</code>、<code>css</code>、<code>js</code>来，因此我们从这里来理解就方便多了。</p>
<ul>
<li>为什么会造成全局样式污染？</li>
</ul>
<p>这个不是<code>vue</code>的专利，而是<code>css</code>本身的优先级问题，就是如果我们定义了相同的<code>css</code>类，并以相同的方式来使用它，那么根据先后加载顺序，就会导致后加载的覆盖掉先加载的样式，造成先加载的样式无效，这就是所谓的样式污染。</p>
<ul>
<li>为什么加了<code>scoped</code>就不会造成样式污染呢？</li>
</ul>
<p>我们看一个简单的例子：</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/562c11dfa9ec8a13b6bed33c41a67f85a2ecc0f3.png" alt="img"></p>
<p>看一下html和css源码</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/a044ad345982b2b78ae47d4a870825e577099b71.png" alt="img"></p>
<p>可以看到，<code>vue</code>组件在渲染的时候，会给元素增加一个属性<code>data-v-xxxx</code>，然后在生成样式的时候也会在样式上加上<code>[data-v-xxxxx]</code>，这是<code>css</code>属性选择器的用法，这样根据<code>css</code>选择器的优先级，这个属性就具有唯一性。</p>
<p>但是在<code>TSX</code>中没有了<code>scoped</code>怎么办？很简单，回归原始的<code>css</code>即可。在原始<code>css</code>中需要我们自己来保证<code>css</code>选择的唯一性，具体做法就是给组件内使用的css类都加上唯一前缀，例如组件名称为<code>Child</code>，那么所有的<code>css</code>类都加上<code>child-xxx</code>，因为我们肯定要保证组件名称的唯一性，所以这样下来对应的样式也就是唯一的。这就要求我们给所有需要修改样式的元素都加上类或者自定义属性，以便于我们可以通过唯一的<code>css</code>选择器选中它。</p>
<p>示例如下：</p>
<p>创建一个<code>css</code>文件：<code>child.css</code></p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/b219ebc4b74543a90fb201cbabb26488b80114b8.png" alt="img"></p>
<p>在tsx文件中引用</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/fc1f4134970a304e1b0d58d76c6d498cc9175c24.png" alt="img"></p>
<p>除了上面这种保证样式名称唯一的方式以外，vue其实一直为我们提供了另外一种方式-css module，具体来讲就是把css作为模块引入到js中，然后会生成一个唯一的名称，在以前用webpack的时候还需要装额外的包，现在vite已经帮我们集成了，只需要在vite.config.ts中加一下配置即可。</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/a8014c086e061d950aa47912cc51e4db63d9ca6e.png" alt="img"></p>
<p>这里规定<code>css</code>类名的命名规则为小驼峰，即<code>child-item</code>类在<code>js</code>中会变成<code>childItem</code>变量。但是要实现<code>css module</code>的功能，对<code>css</code>文件命名由要求，必须在后缀名前面是<code>module</code>，例如<code>xxx.module.css</code>、<code>xxx.module.less</code>、<code>xxx.module.scss</code>。</p>
<p>示例如下：</p>
<p>创建一个<code>css</code>文件：<code>child.module.css</code></p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/b03533fa828ba61e0e3e9a13f7917900314e596e.png" alt="img"></p>
<p>在tsx文件中引用</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/4bed2e738bd4b31cdbfb59ba5773c9759f2ff819.png" alt="img"></p>
<p>打开浏览器看一下源码</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/6d81800a19d8bc3ee49d9c9d392e4814a9d34504.png" alt="img"></p>
<p>可以看到元素上绑定的<code>css</code>和全局的<code>css</code>都出现了变化，这种方式我们就不需要去关注编写的<code>css</code>是否是唯一的，<code>vite</code>会帮我们自行处理，只是在使用的时候有一些区别。</p>
<p>除了常规的<code>css</code>使用，我们还有动态<code>class</code>的使用。</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/aec379310a55b3196ef56684f40c6c2ccefc1767.png" alt="img"></p>
<p>我们把需要的<code>class</code>处理成一个数组给它即可。</p>
<p>除了动态<code>class</code>还有动态<code>style</code>的使用。</p>
<p><img src="/2024/01/31/Vue3-tsx%E5%BC%80%E5%8F%91%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/0824ab18972bd407486658c6c32c705b0eb3099c.png" alt="img"></p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue之nextTick原理与作用</title>
    <url>/2023/10/01/Vue%E4%B9%8BnextTick%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Vue之nextTick原理与作用"><a href="#Vue之nextTick原理与作用" class="headerlink" title="Vue之nextTick原理与作用"></a>Vue之nextTick原理与作用</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在 Vue.js 中，<code>$nextTick</code> 方法的底层原理涉及 Vue 的更新队列以及浏览器的异步任务队列（微任务和宏任务）。它的主要目标是在下次 DOM 更新循环结束后执行回调函数，确保能够访问到更新后的 DOM。</p>
<p>下面是 <code>$nextTick</code> 方法的大致执行过程：</p>
<ol>
<li>当调用 <code>this.$nextTick(callback)</code> 时，Vue 会将 <code>callback</code> 函数添加到一个称为“更新队列”（Update Queue）的数组中。</li>
<li>Vue 会检查是否已经有一个异步任务正在进行中。如果没有，它会创建一个微任务，该微任务将在当前代码执行完成后执行。</li>
<li>当前代码执行完成并进入微任务队列时，Vue 将开始处理更新队列中的回调函数。</li>
<li>在处理更新队列时，Vue 会执行所有在该更新循环中触发的数据变更操作，并将这些变更应用到虚拟 DOM。</li>
<li>完成虚拟 DOM 的更新后，Vue 会触发一个“flush”阶段，此时更新队列中的回调函数会被依次执行。</li>
<li>回调函数在执行时，DOM 已经更新完成，可以在回调函数中获取到更新后的 DOM。</li>
</ol>
<p>通过这样的异步处理方式，Vue 在下次 DOM 更新循环结束后执行 <code>$nextTick</code> 的回调函数，确保在回调函数内部能够获取到最新的 DOM 数据。</p>
<p>需要注意的是，Vue 中的更新队列和异步任务队列的处理可能会因运行环境而异。在现代浏览器中，Vue 通常会使用微任务（如 <code>Promise</code> 或 <code>MutationObserver</code>）来处理更新队列中的回调函数。在一些较旧的浏览器中，Vue 可能会使用宏任务（如 <code>setTimeout</code>）来模拟实现 <code>$nextTick</code>。这种方式确保在各种环境下都能正确地处理异步更新和回调函数的执行顺序。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用 <code>$nextTick</code> 的常见场景是在更新数据后，立即获取更新后的 DOM 元素的状态，例如计算 DOM 元素的尺寸或位置。另一个常见用例是在修改数据后，执行某些依赖于更新后的数据的操作，确保在 DOM 更新完成后执行这些操作。</p>
<p>以下是使用 <code>$nextTick</code> 的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;计数：&#123;&#123; count &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;增加计数&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      count: 0,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    increment() &#123;<br>      this.count++;<br>      // 在下次 DOM 更新循环结束后执行回调函数<br>      this.$nextTick(() =&gt; &#123;<br>        // DOM 已更新，可以执行额外操作<br>        this.logElementSize();<br>      &#125;);<br>    &#125;,<br>    logElementSize() &#123;<br>      // 获取元素尺寸<br>      const element = this.$el.querySelector(&#x27;p&#x27;);<br>      const &#123; width, height &#125; = element.getBoundingClientRect();<br>      console.log(&#x27;元素宽度：&#x27;, width, &#x27;元素高度：&#x27;, height);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>在上面的示例定义了一个简单的 Vue 组件，包含一个计数变量 <code>count</code> 和一个按钮，点击按钮会增加计数。在 <code>increment</code> 方法中，通过 <code>this.$nextTick</code> 在下次 DOM 更新循环结束后执行 <code>logElementSize</code> 方法来获取更新后的 DOM 元素的尺寸。这样做的好处是确保在更新 DOM 后再去执行操作，以便能够正确获取到最新的 DOM 数据。在某些情况下，如果不使用 <code>$nextTick</code>，可能会在数据更新后立即执行操作，但此时 DOM 尚未更新，因此无法正确获取到最新的 DOM 数据。</p>
<h1 id="vue3与vue2中的nextTick用法区别"><a href="#vue3与vue2中的nextTick用法区别" class="headerlink" title="vue3与vue2中的nextTick用法区别"></a>vue3与vue2中的nextTick用法区别</h1><p>在 Vue 2 和 Vue 3 中，<code>$nextTick</code> 方法都用于在下次 DOM 更新循环结束后执行回调函数。它们的作用是让我们在修改数据后，等待 Vue 完成数据更新和 DOM 重新渲染后再执行一些操作。</p>
<p>尽管功能相似，Vue 3 中的 <code>$nextTick</code> 和 Vue 2 中的 <code>$nextTick</code> 有一些不同之处：</p>
<p>Vue 2 中的 <code>$nextTick</code>：</p>
<ol>
<li><code>$nextTick</code> 是在 Vue 2 的全局实例上调用的，例如：<code>this.$nextTick(callback)</code>。</li>
<li>在同一时间内，多次调用 <code>$nextTick</code>，Vue 2 会将回调函数加入到一个队列中，确保在下次 DOM 更新循环结束后一次性执行所有回调函数。</li>
<li>Vue 2 中的 <code>$nextTick</code> 返回的是一个 Promise 对象，可以使用 <code>.then()</code> 来处理回调，也可以使用传入的回调函数。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// Vue 2 中的 $nextTick<br>this.$nextTick(() =&gt; &#123;  <br>// 在 DOM 更新后执行的回调函数<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>Vue 3 中的 <code>$nextTick</code>：</p>
<ol>
<li><p><code>$nextTick</code> 不再作为 Vue 实例的方法，而是作为一个独立的函数导入，例如：<code>import &#123; nextTick &#125; from &#39;vue&#39;;</code>。</p>
</li>
<li><p>Vue 3 中的 <code>$nextTick</code> 返回的是一个 Promise 对象，不再接受回调函数作为参数。要执行回调，可以使用 <code>.then()</code> 处理 Promise，或者使用异步函数和 <code>await</code> 来等待 Promise 的完成。</p>
</li>
<li><p>在同一时间内，多次调用 <code>nextTick</code>，Vue 3 会将回调函数加入到一个微任务队列中，确保在下次 DOM 更新循环结束后一次性执行所有回调函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// Vue 3 中的 nextTick<br>import &#123; nextTick &#125; from &#x27;vue&#x27;;<br><br>nextTick().then(() =&gt; &#123;<br>  // 在 DOM 更新后执行的回调函数<br>&#125;);<br><br>// 或使用异步函数和 await<br>async function someFunction() &#123;<br>  // ...修改数据<br>  await nextTick();<br>  // 在 DOM 更新后执行的回调函数<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<p>总结： Vue 3 中的 <code>$nextTick</code> 与 Vue 2 中的 <code>$nextTick</code> 在功能上基本一致，都用于在下次 DOM 更新循环结束后执行回调函数。然而，Vue 3 中的 <code>$nextTick</code> 被作为一个独立的函数导入，并返回一个 Promise 对象，而不再作为 Vue 实例的方法。这样的改变使得代码更加清晰，并且能够更好地与现代 JavaScript 中的 Promise 和异步函数结合使用。</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>css中常见单位</title>
    <url>/2023/12/10/css%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%8D%95%E4%BD%8D/</url>
    <content><![CDATA[<p>在前端开发中，经常会使用不同的单位来指定元素的大小和位置。这些单位包括em、px、rem、vh和vw，它们各自有不同的特点和用途</p>
<ol>
<li><p>px (像素)<br>像素是最基本的单位，代表屏幕上的一个点.在不同屏幕分辨率下，1px 可能对应不同的物理尺存<br>固定单位，不受父元素的影响<br>常用于定义精确的尺寸，如边框、文字大小等。</p>
</li>
<li><p>em :<br>em单位相对于父元素的字体大小来计算<br>如果应用在文字上，em等于元素的字体大小。如果应用在其他元素上，1em等于父元素的字体大小。<br>用于创建相对于文字大小的布局</p>
</li>
<li><p>rem(根元素的字体大小)</p>
</li>
</ol>
<p>​		rem单位始终相对于根元素 (通常是<htm1>标签)的字体大小</htm1></p>
<p>​		这使得它在整个页面中保持一致，不会受到嵌套元素的字体大小的影响</p>
<p>​		常用于响应式设计，以便在不同屏幕尺寸下保持一致的比例。</p>
<p>​	4. vh(视窗高度的百分比)</p>
<p>​		vh单位是相对于视窗(浏览器窗口)的高度的百分比。</p>
<p>​		1vh等于视窗高度的1%。</p>
<p>​		常用于创建相对于视窗高度的元素，如全屏背景</p>
<p>​	4. vw(视窗宽度的百分比)</p>
<p>​		vw单位是相对于视窗的宽度的百分比。</p>
<p>​		1vw等于视窗宽度的1%</p>
<p>​		常用于创建相对于视窗宽度的元素，如响应式布局。</p>
<p>​	总结：</p>
<p>​		px是绝对单位，其他单位是相对单位</p>
<p>​		em和rem用于字体大小和相对布局</p>
<p>​		vh和vw用于相对于视窗的尺寸使用不同的单位取决于设计需求和响应式设计目标</p>
<p>​		通常，混合使用这些单位可以实现复杂的布局和样式。</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css八股文1</title>
    <url>/2023/09/21/css%E5%85%AB%E8%82%A1%E6%96%871/</url>
    <content><![CDATA[<h1 id="2023前端面试题整理二-CSS篇"><a href="#2023前端面试题整理二-CSS篇" class="headerlink" title="2023前端面试题整理二(CSS篇)"></a>2023前端面试题整理二(CSS篇)</h1><h3 id="1、让元素水平垂直居中显示"><a href="#1、让元素水平垂直居中显示" class="headerlink" title="1、让元素水平垂直居中显示"></a>1、让元素水平垂直居中显示</h3><p>方法一、设置父元素position:relative;子元素position:absolute;top和left设置为50%的情况下，使用translate在水平和垂直方向，反方向移动50%；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.parent&#123;<br>   position:relative;<br>&#125;<br>.child&#123;<br>   position:absolute;<br>   left:50%;<br>   top:50%;<br>   transform:translateX(-50%) translateY(-50%);<br>&#125;<br></code></pre></td></tr></table></figure>



<p>方法二、在子元素宽高知道的情况下，使用calc设置子元素的top和left；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.parent&#123;<br>  position:relative;<br>&#125;<br>.child&#123;<br>  width:20px;<br>  height:20px;<br>  position: absolute;<br>  top: calc(50% - 10px);<br>  left: calc(50% - 10px);<br>&#125;<br></code></pre></td></tr></table></figure>



<p>方法三、使用display:flex布局，设置justify-content和align-items值为center 使子元素在行和列方向居中排列。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.parent&#123;<br>  display: flex;<br>  align-items: center;<br>  justify-content: center;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="2、css盒模型是什么"><a href="#2、css盒模型是什么" class="headerlink" title="2、css盒模型是什么"></a>2、css盒模型是什么</h3><p>对一个文档进行布局时，浏览器的渲染引擎会根据标准的CSS 基础框盒模型，将所有元素表示为一个个矩形的盒子（box）。每个盒子有四个边界：内容边界 Content Edge、内边距边界 Padding Edge、边框边界 Border Edge、外边框边界 Margin Edge。</p>
<p>CSS 盒子模型的默认定义box-sizing:content-box;</p>
<p>此时元素尺寸计算公式为：</p>
<p>width &#x3D; 内容的宽度</p>
<p>height &#x3D; 内容的高度</p>
<p>宽度和高度的计算值都不包含内容的边框（border）和内边距（padding）。</p>
<p><img src="/2023/09/21/css%E5%85%AB%E8%82%A1%E6%96%871/640-16952657500191.png" alt="图片"></p>
<p>当 box-sizing:border-box;</p>
<p> width 和 height 属性包括内容，内边距和边框，但不包括外边距。</p>
<p>此时元素尺寸计算公式：</p>
<p>width &#x3D; border + padding + 内容的宽度</p>
<p>height &#x3D; border + padding + 内容的高度</p>
<p><img src="/2023/09/21/css%E5%85%AB%E8%82%A1%E6%96%871/640-16950066094391-16952657500202.png" alt="图片"></p>
<h3 id="3、display-none与visibility-hidden、opacity-0-的区别是什么？"><a href="#3、display-none与visibility-hidden、opacity-0-的区别是什么？" class="headerlink" title="3、display:none与visibility:hidden、opacity:0 的区别是什么？"></a>3、display:none与visibility:hidden、opacity:0 的区别是什么？</h3><p>display:none 会将元素从可访问性树中移除，元素在网页中不占位置。修改display会触发回流和重绘，性能消耗较大；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">回流(reflow) 引起Dom树结构变化，改变页面布局。<br>重绘(repaint) 不引起Dom树变化及页面布局变化，<br>只重新渲染页面样式。<br>回流与重绘两者之间的联系在于: 触发回流一定会<br>触发重绘, 而触发重绘却不一定会触发回流。<br></code></pre></td></tr></table></figure>

<p><img src="/2023/09/21/css%E5%85%AB%E8%82%A1%E6%96%871/640-16950066094402-16952657500213.png" alt="图片"></p>
<p>visibility:hidden 时只会触发重绘，隐藏元素，但是其他元素的布局不改变，相当于此元素变成透明，在网页中占位置。</p>
<p>注意：若将其子元素设为 visibility: visible，则该子元素依然可见。</p>
<p><img src="/2023/09/21/css%E5%85%AB%E8%82%A1%E6%96%871/640-16950066094403-16952657500214.png" alt="图片"></p>
<p>opacity:0 时只会触发重绘，opacity属性指定了一个元素的不透明度，当opacity属性的值应用于某个元素上时，是把这个元素（包括它的子元素）当成一个整体看待，即使子元素的opacity不为0 ，也是不可见的。</p>
<p><img src="/2023/09/21/css%E5%85%AB%E8%82%A1%E6%96%871/640-16950066094404-16952657500216.png" alt="图片"></p>
<p>注意：设置transition动画效果时对visibility:hidden无效，而对opacity:0有效。</p>
<h3 id="4、CSS优先级"><a href="#4、CSS优先级" class="headerlink" title="4、CSS优先级"></a>4、CSS优先级</h3><p>内联样式 &gt; ID 选择器 &gt; 类选择器 &#x3D; 属性选择器 &#x3D; 伪类选择器 &gt; 标签选择器 &#x3D; 伪元素选择器</p>
<p>注意：当在一个样式声明中使用一个 !important 规则时，此声明将覆盖任何其他声明，应该尽量避免使用。</p>
<h3 id="5、伪元素和伪类"><a href="#5、伪元素和伪类" class="headerlink" title="5、伪元素和伪类"></a>5、伪元素和伪类</h3><p>伪类是添加到选择器的关键字，指定要选择的元素的特殊状态。</p>
<p>例如 :hover :active :visited :checked :first-child :disabled 等。</p>
<p>伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。</p>
<p>注意：按照规范，伪元素使用双冒号（::）而不是单个冒号（:），以便区分伪类和伪元素。</p>
<p>例如 ::before  ::after  ::first-letter  ::placholder 等。</p>
<h3 id="6、文本溢出时如何使用省略号显示？"><a href="#6、文本溢出时如何使用省略号显示？" class="headerlink" title="6、文本溢出时如何使用省略号显示？"></a>6、文本溢出时如何使用省略号显示？</h3><p>单行文本溢出时使用省略号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.ellipsis &#123;<br>  overflow: hidden;<br>  white-space: nowrap;<br>  text-overflow: ellipsis;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>多行文本溢出时显示省略号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.ellipsis &#123;<br>  display: -webkit-box;<br>   -webkit-box-orient: vertical;<br>   -webkit-line-clamp: 3;<br>   overflow: hidden;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="7、清除浮动有哪些常用方法"><a href="#7、清除浮动有哪些常用方法" class="headerlink" title="7、清除浮动有哪些常用方法"></a>7、清除浮动有哪些常用方法</h3><p><img src="/2023/09/21/css%E5%85%AB%E8%82%A1%E6%96%871/640-16950066094405-16952657500215.png" alt="图片"></p>
<p>方法一、当子元素浮动时，给父元素添加overflow:hidden; </p>
<p>方法二、最后一个子元素后面新增div；</p>
<div style="clear:both;"></div>

<p>方法三、给父元素添加伪元素；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.parent::after&#123;<br>  clear: both;<br>  content:&quot;&quot;;<br>  display: block;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="8、画一条高度为0-5px的线"><a href="#8、画一条高度为0-5px的线" class="headerlink" title="8、画一条高度为0.5px的线"></a>8、画一条高度为0.5px的线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.line &#123;<br>  width:100%;<br>  height: 1px;<br>  background: #000;<br>  transform: scaleY(0.5);<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css实现三角形</title>
    <url>/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
    <content><![CDATA[<h3 id="css实现三角形的方法："><a href="#css实现三角形的方法：" class="headerlink" title="css实现三角形的方法："></a>css实现三角形的方法：</h3><p>1、利用高宽为零的容器和透明的border;</p>
<p>2、利用线性渐变linear-gradient;</p>
<p>3、利用transform:rotate配合overflow:hidden</p>
<h3 id="使用-border-属性"><a href="#使用-border-属性" class="headerlink" title="使用 border 属性"></a>使用 <strong>border</strong> 属性</h3><p>给定一个宽度和高度都为 0 的元素，其 border 的任何值都会直接相交，我们可以利用这个交点来创建三角形。也就是说，border属性是三角形组成的，下面给每一边都提供不同的边框颜色：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.triangle &#123;<br>    width: 0;<br>    height: 0;<br>    border: 100px solid;<br>    border-color: orangered skyblue gold yellowgreen;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>将元素的长宽都设置为0，效果是这样的：</p>
<p><img src="/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/640.png" alt="图片"></p>
<p>可以看到，我们已经基本上实现了4个三角形形状。所以可以根据border这个特性来绘制三角形。</p>
<p>如果想要一个指向下面的三角形，可以让 border 的上边可见，其他边都设置为透明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.triangle &#123;<br>    width: 0;<br>    height: 0;<br>    border-top: 50px solid skyblue;<br>    border-right: 50px solid transparent;<br>    border-left: 50px solid transparent;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/640-16990711861551.png" alt="图片"></p>
<p>如果想要一个指向右面的三角形，可以让 border 的左边可见，其他边都设置为透明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.triangle &#123;<br>    width: 0;<br>    height: 0;<br>    border-left: 50px solid skyblue;<br>    border-top: 50px solid transparent;<br>    border-bottom: 50px solid transparent;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/640-16990711861562.png" alt="图片"></p>
<p>上面的代码也可以这样写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.triangle &#123;<br> border-style: solid;<br>  border-color: transparent;<br>  border-width: 50px 0 50px 50px;<br>  border-left-color: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>我们还可以通过调整不同方向边框的值来实现不同方向和大小的三角形：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.triangle &#123;<br>    width: 0;<br>    height: 0;<br>    border-top: 100px solid skyblue;<br>    border-right: 100px solid transparent;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/640-16990711861563.png" alt="图片"></p>
<p>当然，实现一个等边三角形也是可以的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">.triangle &#123;<br>  width: 0;<br>  height: 0;<br>  border-left: 69px solid transparent;  <br>  border-right: 69px solid transparent;  <br>  border-bottom: 120px solid skyblue; <br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/640-16990711861564.png" alt="图片"></p>
<h3 id="使用-linear-gradient-绘制三角形"><a href="#使用-linear-gradient-绘制三角形" class="headerlink" title="使用 linear-gradient 绘制三角形"></a><strong>使用 linear-gradient 绘制三角形</strong></h3><p>首先我们实现一个45°的渐变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">div&#123;<br>        width: 100px;<br>        height: 100px;<br>        background: linear-gradient(45deg,deeppink,yellowgreen);<br>    &#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/image-20231104122158394.png" alt="image-20231104122158394"></p>
<p>让它的颜色从渐变色变为两种固定的颜色：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">div&#123;<br>        width: 100px;<br>        height: 100px;<br>        background: linear-gradient(45deg,deeppink,deeppink 50%,<br>        yellowgreen 50%,yellowgreen 100%);<br>    &#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/image-20231104121836356.png" alt="image-20231104121836356"></p>
<p>再让其中一个颜色透明即可:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">div&#123;<br>        width: 100px;<br>        height: 100px;<br>        background: linear-gradient(45deg,deeppink,deeppink 50%,<br>        transprant 50%,transprant 100%);<br>    &#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/image-20231104122002767.png" alt="image-20231104122002767"></p>
<h3 id="利用transform-rotate配合overflow-hidden"><a href="#利用transform-rotate配合overflow-hidden" class="headerlink" title="利用transform:rotate配合overflow:hidden"></a>利用transform:rotate配合overflow:hidden</h3><p>这是在项目开发中使用到的一个方法：三角形定位在盒子右上方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;div class=&quot;box&quot;&gt;<br>            &lt;div class=&quot;triangle&quot;&gt;<br>                &lt;i&gt;&lt;/i&gt;<br>                &lt;em&gt;cjx&lt;/em&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br>&lt;style&gt;<br>    <br>        .triangle&#123;<br>            background: skyblue;<br>            width: 18.4rem;<br>            height: 5.33rem;<br>            margin-bottom: 0.56rem;<br>            display: flex;<br>            position: relative;<br>            align-items: center;<br>            border-radius: 0.27rem;<br>            overflow: hidden;<br>        &#125;<br>        i&#123;<br>            position: absolute;<br>            border-bottom: 2rem solid #C9C9C9;<br>            border-radius: 0rem 0rem 0rem 0rem; <br>            border-left: 2rem solid transparent;<br>            border-right: 2rem solid transparent;<br>            -webkit-transform: rotate(45deg);<br>            padding-left: 0px;<br>            right:-1.4rem;<br>            top:-0.4rem;<br>        &#125;<br>        em&#123;<br>            font-size: 0.56rem;<br>            font-weight: 400;<br>            color: #FFFFFF;<br>            position: absolute;<br>            top: 0.5rem;<br>            right: 0rem;<br>            -webkit-transform: rotate(45deg);<br>            padding-left: 0rem;<br>            font-style: normal;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/11/04/css%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2/image-20231104133802573.png" alt="image-20231104133802573"></p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>git分支命名规范</title>
    <url>/2024/01/23/git%E5%88%86%E6%94%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="Git分支管理及命名规范"><a href="#Git分支管理及命名规范" class="headerlink" title="Git分支管理及命名规范"></a>Git分支管理及命名规范</h1><h2 id="一、分支分类"><a href="#一、分支分类" class="headerlink" title="一、分支分类"></a>一、分支分类</h2><ul>
<li><h4 id="Git主分支（保留分支）：master、develop"><a href="#Git主分支（保留分支）：master、develop" class="headerlink" title="Git主分支（保留分支）：master、develop"></a>Git主分支（保留分支）：master、develop</h4></li>
</ul>
<p>主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。</p>
<ul>
<li><h4 id="Git辅助分支（临时分支）：feature、release、fixbug"><a href="#Git辅助分支（临时分支）：feature、release、fixbug" class="headerlink" title="Git辅助分支（临时分支）：feature、release、fixbug"></a>Git辅助分支（临时分支）：feature、release、fixbug</h4></li>
</ul>
<p>除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>
<blockquote>
<ul>
<li>功能（feature）分支</li>
<li>预发布（release）分支</li>
<li>修补bug（fixbug）分支</li>
</ul>
</blockquote>
<p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>
<p><img src="/2024/01/23/git%E5%88%86%E6%94%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/c5943fafc8b34d57bc226eb11b172c9ctplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="Git"></p>
<h2 id="二、分支简介"><a href="#二、分支简介" class="headerlink" title="二、分支简介"></a>二、分支简介</h2><h3 id="1、主分支-Master"><a href="#1、主分支-Master" class="headerlink" title="1、主分支 Master"></a>1、主分支 Master</h3><p>代码库有且仅有一个主分支，所有提供给用户使用的正式版本，都在这个主分支上发布。 Git默认主分支Master，它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ec547c9e2204d53b9cadabf6a031547~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="Git"></p>
<h3 id="2、开发分支-Develop"><a href="#2、开发分支-Develop" class="headerlink" title="2、开发分支 Develop"></a>2、开发分支 Develop</h3><p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e4d7e0778754f25a060148eb346dad8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="Git"></p>
<ul>
<li><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4></li>
</ul>
<p>Git创建Develop分支的命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">css<br>复制代码git checkout -<span class="hljs-selector-tag">b</span> develop master<br></code></pre></td></tr></table></figure>

<ul>
<li><h4 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h4></li>
</ul>
<p>将Develop分支发布到Master分支的命令：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">scss复制代码<span class="hljs-comment">// 切换到 Master 分支</span><br>git checkout master<br><br><span class="hljs-comment">// 对 Develop 分支进行合并</span><br>git merge <span class="hljs-attr">--no-ff</span> develop<br></code></pre></td></tr></table></figure>

<blockquote>
<p>–no-ff参数是什么意思？默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将Master分支指向Develop分支。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ecef6451cf444e7ac49565c153bf80b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="Git"></p>
<p>使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，建议采用这种做法。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9272e08a360648f5a6ab207e2172c818~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="Git"></p>
</blockquote>
<h3 id="3、功能分支-feature"><a href="#3、功能分支-feature" class="headerlink" title="3、功能分支 feature"></a>3、功能分支 feature</h3><p>功能分支，是为了开发某种特定功能，从Develop分支上面分出来，<strong>开发完成后，再并入Develop</strong>。 功能分支的名字，可以采用feature-*的形式命名。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7b58e36f664455a9d0599d664910f5f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="Git"></p>
<ul>
<li><h4 id="创建分支-1"><a href="#创建分支-1" class="headerlink" title="创建分支"></a>创建分支</h4></li>
</ul>
<p>创建一个功能分支的命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">css<br>复制代码git checkout -<span class="hljs-selector-tag">b</span> feature-xxx develop<br></code></pre></td></tr></table></figure>

<ul>
<li><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4></li>
</ul>
<p>开发完成后，将功能分支合并到develop分支的命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span>复制代码git checkout develop<br><br>git <span class="hljs-keyword">merge</span> <span class="hljs-comment">--no-ff feature-xxx</span><br></code></pre></td></tr></table></figure>

<ul>
<li><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4></li>
</ul>
<p>删除feature分支的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">复制代码git branch -d feature-xxx<br></code></pre></td></tr></table></figure>

<h3 id="4、预发布分支-release"><a href="#4、预发布分支-release" class="headerlink" title="4、预发布分支 release"></a>4、预发布分支 release</h3><p>预发布分支，是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。</p>
<p>预发布分支是从Develop分支上面分出来的，<strong>预发布结束以后，必须合并进Develop和Master分支</strong>。它的命名，可以采用release-*的形式。</p>
<ul>
<li><h4 id="创建分支-2"><a href="#创建分支-2" class="headerlink" title="创建分支"></a>创建分支</h4></li>
</ul>
<p>创建一个预发布分支的命令：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">arduino<br>复制代码git checkout -b release<span class="hljs-number">-2.5</span> develop<br></code></pre></td></tr></table></figure>

<ul>
<li><h4 id="合并分支-1"><a href="#合并分支-1" class="headerlink" title="合并分支"></a>合并分支</h4></li>
</ul>
<p>确认没有问题后，合并到master分支的命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">css复制代码git checkout master<br><br>git merge <span class="hljs-attr">--no-ff</span> release-<span class="hljs-number">2.5</span><br><br># 对合并生成的新节点，做一个标签<br>git tag -<span class="hljs-selector-tag">a</span> <span class="hljs-number">2.5</span><br></code></pre></td></tr></table></figure>

<p>再合并到develop分支的命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span>复制代码git checkout develop<br><br>git <span class="hljs-keyword">merge</span> <span class="hljs-comment">--no-ff release-2.5</span><br></code></pre></td></tr></table></figure>

<ul>
<li><h4 id="删除分支-1"><a href="#删除分支-1" class="headerlink" title="删除分支"></a>删除分支</h4></li>
</ul>
<p>最后，删除预发布分支的命令：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">arduino<br>复制代码git branch -d release<span class="hljs-number">-2.5</span><br></code></pre></td></tr></table></figure>

<h3 id="5、修补bug分支-fixbug"><a href="#5、修补bug分支-fixbug" class="headerlink" title="5、修补bug分支 fixbug"></a>5、修补bug分支 fixbug</h3><p>修补bug分支，软件正式发布以后，难免会出现bug，这时就需要创建一个分支，进行bug修补。</p>
<p>修补bug分支是从Master分支上面分出来的。<strong>修补结束以后，再合并进Master和Develop分支</strong>。它的命名，可以采用fixbug-*的形式。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43a9827da5e747ea926300bfd79f0bb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="Git"></p>
<ul>
<li><h4 id="创建分支-3"><a href="#创建分支-3" class="headerlink" title="创建分支"></a>创建分支</h4></li>
</ul>
<p>创建一个修补bug分支的命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">css<br>复制代码git checkout -<span class="hljs-selector-tag">b</span> fixbug-<span class="hljs-number">0.1</span> master<br></code></pre></td></tr></table></figure>

<ul>
<li><h4 id="合并分支-2"><a href="#合并分支-2" class="headerlink" title="合并分支"></a>合并分支</h4></li>
</ul>
<p>修补结束后，合并到master分支的命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">css复制代码git checkout master<br><br>git merge <span class="hljs-attr">--no-ff</span> fixbug-<span class="hljs-number">0.1</span><br><br>git tag -<span class="hljs-selector-tag">a</span> <span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure>

<p>再合并到develop分支的命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span>复制代码git checkout develop<br><br>git <span class="hljs-keyword">merge</span> <span class="hljs-comment">--no-ff fixbug-0.1</span><br></code></pre></td></tr></table></figure>

<ul>
<li><h4 id="删除分支-2"><a href="#删除分支-2" class="headerlink" title="删除分支"></a>删除分支</h4></li>
</ul>
<p>最后，删除修补bug分支的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">复制代码git branch -d fixbug-0.1<br></code></pre></td></tr></table></figure>

<h2 id="三、总结归纳"><a href="#三、总结归纳" class="headerlink" title="三、总结归纳"></a>三、总结归纳</h2><p>最后回顾开头的大图，掌握两大主分支、三个辅助分支的生命周期，起于哪个分支始于哪个分支。</p>
<p><img src="/2024/01/23/git%E5%88%86%E6%94%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/c5943fafc8b34d57bc226eb11b172c9ctplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="Git"></p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
  </entry>
  <entry>
    <title>git命令大全</title>
    <url>/2023/11/29/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="git命令大全"><a href="#git命令大全" class="headerlink" title="git命令大全"></a>git命令大全</h1><h2 id="创建仓库命令"><a href="#创建仓库命令" class="headerlink" title="创建仓库命令"></a>创建仓库命令</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git init</code></td>
<td align="left">初始化仓库，在当前目录新建一个Git代码库，基本上是创建一个具有<code>objects</code>，<code>refs/head</code>，<code>refs/tags</code>和模板文件的<code>.git</code>目录。</td>
</tr>
<tr>
<td align="left"><code>git clone</code>[url]</td>
<td align="left">拷贝一份<strong>远程仓库</strong>，也就是下载一个项目和它的整个代码历史。</td>
</tr>
</tbody></table>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git config --list</code></td>
<td align="left">显示当前的<strong>Git配置</strong></td>
</tr>
<tr>
<td align="left">git config -e [–global]</td>
<td align="left">编辑Git配置文件。</td>
</tr>
<tr>
<td align="left">git config [–global] user.name “[name]” git config [–global] user.email “[email address]”</td>
<td align="left">设置提交代码时的<strong>用户信息</strong></td>
</tr>
</tbody></table>
<h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加 &#x2F; 删除文件"></a>增加 &#x2F; 删除文件</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git add [file1] [file2] ...</code></td>
<td align="left">添加<strong>指定文件</strong>到暂存区</td>
</tr>
<tr>
<td align="left">git add [dir]</td>
<td align="left">添加<strong>指定目录</strong>到暂存区，包括子目录</td>
</tr>
<tr>
<td align="left">git add .</td>
<td align="left">添加当前目录的<strong>所有文件</strong>到暂存区</td>
</tr>
<tr>
<td align="left">git add -p</td>
<td align="left">添加每个变化前，都会要求确认 对于同一个文件的多处变化，可以实现<strong>分次提交</strong></td>
</tr>
<tr>
<td align="left">git rm [file1] [file2] …</td>
<td align="left"><strong>删除</strong>工作区文件，并且将这次删除放入暂存区</td>
</tr>
<tr>
<td align="left">git rm –cached [file]</td>
<td align="left">停止追踪指定文件，但该文件会保留在工作区</td>
</tr>
<tr>
<td align="left">git mv [file-original] [file-renamed]</td>
<td align="left"><strong>改名</strong>文件，并且将这个改名放入暂存区</td>
</tr>
</tbody></table>
<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git commit -m [message]</code></td>
<td align="left">提交暂存区到仓库区</td>
</tr>
<tr>
<td align="left">git commit [file1] [file2] … -m [message]</td>
<td align="left">提交暂存区的<strong>指定文件</strong>到仓库区</td>
</tr>
<tr>
<td align="left">git commit -a</td>
<td align="left">提交工作区<strong>自上次commit之后</strong>的变化，直接到仓库区</td>
</tr>
<tr>
<td align="left">git commit -v</td>
<td align="left">提交时显示<strong>所有diff信息</strong></td>
</tr>
<tr>
<td align="left">git commit –amend -m [message]</td>
<td align="left">使用一次新的commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次commit的提交信息</td>
</tr>
<tr>
<td align="left">git commit –amend [file1] [file2] …</td>
<td align="left"><strong>重做上一次commit</strong>，并包括指定文件的新变化</td>
</tr>
</tbody></table>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">git branch</td>
<td align="left">列出所有<strong>本地分支</strong></td>
</tr>
<tr>
<td align="left">git branch -r</td>
<td align="left">列出所有<strong>远程分支</strong></td>
</tr>
<tr>
<td align="left">git branch -a</td>
<td align="left">列出所有本地分支和<strong>远程分支</strong></td>
</tr>
<tr>
<td align="left">git branch [branch-name]</td>
<td align="left">新建一个分支，但依然停留在当前分支</td>
</tr>
<tr>
<td align="left">git checkout -b [branch]</td>
<td align="left">新建一个分支，并切换到该分支</td>
</tr>
<tr>
<td align="left">git branch [branch] [commit]</td>
<td align="left">新建一个分支，指向指定commit</td>
</tr>
<tr>
<td align="left">git branch –track [branch] [remote-branch]</td>
<td align="left">新建一个分支，与指定的远程分支建立追踪关系</td>
</tr>
<tr>
<td align="left">git checkout [branch-name]</td>
<td align="left">切换到指定分支，并更新工作区</td>
</tr>
<tr>
<td align="left">git checkout -</td>
<td align="left"><strong>切换</strong>到上一个分支</td>
</tr>
<tr>
<td align="left">git branch –set-upstream [branch] [remote-branch]</td>
<td align="left">建立追踪关系，在现有分支与指定的远程分支之间</td>
</tr>
<tr>
<td align="left">git merge [branch]</td>
<td align="left"><strong>合并</strong>指定分支到当前分支</td>
</tr>
<tr>
<td align="left">git cherry-pick [commit]</td>
<td align="left">选择一个commit，合并进当前分支</td>
</tr>
<tr>
<td align="left">git branch -d [branch-name]</td>
<td align="left"><strong>删除分支</strong></td>
</tr>
<tr>
<td align="left">git push origin –delete [branch-name] 或 git branch -dr [remote&#x2F;branch]</td>
<td align="left"><strong>删除远程分支</strong></td>
</tr>
</tbody></table>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">git tag</td>
<td align="left">列出所有tag</td>
</tr>
<tr>
<td align="left">git tag [tag]</td>
<td align="left">新建一个tag在当前commit</td>
</tr>
<tr>
<td align="left">git tag [tag] [commit]</td>
<td align="left">新建一个tag在指定commit</td>
</tr>
<tr>
<td align="left">git tag -d [tag]</td>
<td align="left">删除<strong>本地tag</strong></td>
</tr>
<tr>
<td align="left">git push origin :refs&#x2F;tags&#x2F;[tagName]</td>
<td align="left">删除<strong>远程tag</strong></td>
</tr>
<tr>
<td align="left">git show [tag]</td>
<td align="left">查看tag信息</td>
</tr>
<tr>
<td align="left">git push [remote] [tag]</td>
<td align="left">提交<strong>指定tag</strong></td>
</tr>
<tr>
<td align="left">git push [remote] –tags</td>
<td align="left">提交<strong>所有tag</strong></td>
</tr>
<tr>
<td align="left">git checkout -b [branch] [tag]</td>
<td align="left">新建一个分支，指向某个tag</td>
</tr>
</tbody></table>
<h2 id="查看信息和历史"><a href="#查看信息和历史" class="headerlink" title="查看信息和历史"></a>查看信息和历史</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">git status</td>
<td align="left">显示有变更的文件</td>
</tr>
<tr>
<td align="left">git log</td>
<td align="left">显示当前分支的版本历史</td>
</tr>
<tr>
<td align="left">git log –stat</td>
<td align="left">显示commit历史，以及每次commit发生变更的文件</td>
</tr>
<tr>
<td align="left">git log -S [keyword]</td>
<td align="left">搜索提交历史，根据关键词</td>
</tr>
<tr>
<td align="left">git log [tag] HEAD –pretty&#x3D;format:%s</td>
<td align="left">显示某个commit之后的所有变动，每个commit占据一行</td>
</tr>
<tr>
<td align="left">git log [tag] HEAD –grep feature</td>
<td align="left">显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</td>
</tr>
<tr>
<td align="left">git log –follow [file] 或 git whatchanged [file]</td>
<td align="left">显示某个文件的版本历史，包括文件改名</td>
</tr>
<tr>
<td align="left">git log -p [file]</td>
<td align="left">显示指定文件相关的每一次diff</td>
</tr>
<tr>
<td align="left">git log -5 –pretty –oneline</td>
<td align="left">显示过去5次提交</td>
</tr>
<tr>
<td align="left">git shortlog -sn</td>
<td align="left">显示所有提交过的用户，按提交次数排序</td>
</tr>
<tr>
<td align="left">git blame [file]</td>
<td align="left">显示指定文件是什么人在什么时间修改过</td>
</tr>
<tr>
<td align="left">git diff</td>
<td align="left">显示<strong>暂存区和工作区</strong>的差异</td>
</tr>
<tr>
<td align="left">git diff –cached [file]</td>
<td align="left">显示<strong>暂存区和上一个commit</strong>的差异</td>
</tr>
<tr>
<td align="left">git diff HEAD</td>
<td align="left">显示<strong>工作区与当前分支最新commit之间</strong>的差异</td>
</tr>
<tr>
<td align="left">git diff [first-branch]…[second-branch]</td>
<td align="left">显示<strong>两次提交之间</strong>的差异</td>
</tr>
<tr>
<td align="left">git diff –shortstat “@{0 day ago}”</td>
<td align="left"><strong>显示今天你写了多少行代码</strong></td>
</tr>
<tr>
<td align="left">git show [commit]</td>
<td align="left">显示某次提交的元数据和内容变化</td>
</tr>
<tr>
<td align="left">git show –name-only [commit]</td>
<td align="left">显示某次提交发生变化的文件</td>
</tr>
<tr>
<td align="left">git show [commit]:[filename]</td>
<td align="left">显示某次提交时，某个文件的内容</td>
</tr>
<tr>
<td align="left">git reflog</td>
<td align="left">显示当前分支的最近几次提交</td>
</tr>
</tbody></table>
<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">git fetch [remote]</td>
<td align="left">下载远程仓库的所有变动（<strong>远程新增或删除分支都能显示</strong>）</td>
</tr>
<tr>
<td align="left">git remote -v</td>
<td align="left">显示<strong>所有远程仓库</strong></td>
</tr>
<tr>
<td align="left">git config [–global] user.name “[name]” git config [–global] user.email “[email address]”</td>
<td align="left">设置提交代码时的用户信息</td>
</tr>
<tr>
<td align="left">git remote show [remote]</td>
<td align="left">显示某个远程仓库的信息</td>
</tr>
<tr>
<td align="left">git remote add [shortname] [url]</td>
<td align="left">增加一个新的远程仓库，并命名</td>
</tr>
<tr>
<td align="left">git pull [remote] [branch]</td>
<td align="left">取回远程仓库的变化，并与本地分支合并</td>
</tr>
<tr>
<td align="left">git push [remote] [branch]</td>
<td align="left">上传本地指定分支到远程仓库</td>
</tr>
<tr>
<td align="left">git push [remote] –force</td>
<td align="left">强行推送当前分支到远程仓库，即使有冲突</td>
</tr>
<tr>
<td align="left">git push [remote] –all</td>
<td align="left">推送所有分支到远程仓库</td>
</tr>
</tbody></table>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git checkout [file]</code></td>
<td align="left">恢复暂存区的指定文件到工作区</td>
</tr>
<tr>
<td align="left">git checkout [commit] [file]</td>
<td align="left">恢复某个commit的指定文件到暂存区和工作区</td>
</tr>
<tr>
<td align="left">git checkout .</td>
<td align="left">恢复暂存区的所有文件到工作区</td>
</tr>
<tr>
<td align="left">git reset [file]</td>
<td align="left">重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</td>
</tr>
<tr>
<td align="left">git reset –hard</td>
<td align="left">重置暂存区与工作区，与上一次commit保持一致</td>
</tr>
<tr>
<td align="left">git reset [commit]</td>
<td align="left">重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</td>
</tr>
<tr>
<td align="left">git reset –hard [commit]</td>
<td align="left">重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</td>
</tr>
<tr>
<td align="left">git reset –keep [commit]</td>
<td align="left">重置当前HEAD为指定commit，但保持暂存区和工作区不变</td>
</tr>
<tr>
<td align="left">git revert [commit]</td>
<td align="left">新建一个commit，用来撤销指定commit 后者的所有变化都将被前者抵消，并且应用到当前分支</td>
</tr>
<tr>
<td align="left">git stash</td>
<td align="left">暂时将未提交的变化移除，稍后再移入</td>
</tr>
<tr>
<td align="left">git stash pop</td>
<td align="left">暂时将未提交的变化移除，稍后再移入</td>
</tr>
</tbody></table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">git archive</td>
<td align="left">生成一个可供发布的压缩包</td>
</tr>
<tr>
<td align="left">git repack</td>
<td align="left">打包未归档文件</td>
</tr>
<tr>
<td align="left">git count-objects</td>
<td align="left">计算解包的对象数量</td>
</tr>
<tr>
<td align="left">git help 或 git –help</td>
<td align="left"><strong>Git帮助</strong>，查看git相关命令，如果想看某个特定命令的具体细节，可使用git [命令] –help,如 <strong>git commit –help</strong> 表示查看提交相关命令的帮助</td>
</tr>
</tbody></table>
<h1 id="Git操作流程"><a href="#Git操作流程" class="headerlink" title="Git操作流程"></a>Git操作流程</h1><p>git的操作往往都不是一个命令能解决的，就比如下图所示，单单<strong>代码提交和同步代码</strong>，就涉及到6个命令的组合。</p>
<p>看完了git命令大全，这节列举了实际操作中的不同场景，为大家一一解答如何组合不同git命令，进行git的操作流程。</p>
<ul>
<li>代码提交和同步代码</li>
</ul>
<p><img src="/2023/11/29/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/640.png" alt="图片"></p>
<ul>
<li>代码撤销和撤销同步</li>
</ul>
<p><img src="/2023/11/29/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/640-17012713058681.png" alt="图片"></p>
<h2 id="1、代码提交和同步代码"><a href="#1、代码提交和同步代码" class="headerlink" title="1、代码提交和同步代码"></a>1、代码提交和同步代码</h2><ul>
<li>第零步: 工作区与仓库保持一致</li>
<li>第一步: 文件增删改，变为已修改状态</li>
<li>第二步: git add ，变为已暂存状态</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git status<br>$ git add --all # 当前项目下的所有更改<br>$ git add .  # 当前目录下的所有更改<br>$ git add xx/xx.py xx/xx2.py  # 添加某几个文件<br></code></pre></td></tr></table></figure>

<ul>
<li>第三步: git commit，变为已提交状态</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git commit -m&quot;&lt;这里写commit的描述&gt;&quot;<br></code></pre></td></tr></table></figure>

<ul>
<li>第四步: git push，变为已推送状态</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git push -u origin master # 第一次需要关联上<br>$ git push # 之后再推送就不用指明应该推送的远程分支了<br>$ git branch # 可以查看本地仓库的分支<br>$ git branch -a # 可以查看本地仓库和本地远程仓库(远程仓库的本地镜像)的所有分支<br></code></pre></td></tr></table></figure>

<blockquote>
<p>在某个分支下，我最常用的操作如下</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git status<br>$ git add -a<br>$ git status<br>$ git commit -m &#x27;xxx&#x27;<br>$ git pull --rebase<br>$ git push origin xxbranch` <br></code></pre></td></tr></table></figure>

<h2 id="2、代码撤销和撤销同步"><a href="#2、代码撤销和撤销同步" class="headerlink" title="2、代码撤销和撤销同步"></a>2、代码撤销和撤销同步</h2><h4 id="一、已修改，但未暂存"><a href="#一、已修改，但未暂存" class="headerlink" title="一、已修改，但未暂存"></a>一、已修改，但未暂存</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git diff # 列出所有的修改<br>$ git diff xx/xx.py xx/xx2.py # 列出某(几)个文件的修改<br><br>$ git checkout # 撤销项目下所有的修改<br>$ git checkout . # 撤销当前文件夹下所有的修改<br>$ git checkout xx/xx.py xx/xx2.py # 撤销某几个文件的修改<br>$ git clean -f # untracked状态，撤销新增的文件<br>$ git clean -df # untracked状态，撤销新增的文件和文件夹<br><br># Untracked files:<br>#  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)<br>#<br># xxx.py<br></code></pre></td></tr></table></figure>

<h4 id="二、已暂存，未提交"><a href="#二、已暂存，未提交" class="headerlink" title="二、已暂存，未提交"></a>二、已暂存，未提交</h4><blockquote>
<p>这个时候已经执行过git add，但未执行git commit，但是用git diff已经看不到任何修改。因为git diff检查的是工作区与暂存区之间的差异。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git diff --cached # 这个命令显示暂存区和本地仓库的差异<br><br>$ git reset # 暂存区的修改恢复到工作区<br>$ git reset --soft # 与git reset等价，回到已修改状态，修改的内容仍然在工作区中<br>$ git reset --hard # 回到未修改状态，清空暂存区和工作区<br></code></pre></td></tr></table></figure>

<blockquote>
<p>git reset –hard 操作等价于 git reset 和 git checkout 2步操作</p>
</blockquote>
<h4 id="三、已提交，未推送"><a href="#三、已提交，未推送" class="headerlink" title="三、已提交，未推送"></a>三、已提交，未推送</h4><blockquote>
<p>执行完commit之后，会在仓库中生成一个版本号(hash值)，标志这次提交。之后任何时候，都可以借助这个hash值回退到这次提交。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git diff &lt;branch-name1&gt; &lt;branch-name2&gt; # 比较2个分支之间的差异<br>$ git diff master origin/master # 查看本地仓库与本地远程仓库的差异<br><br>$ git reset --hard origin/master # 回退与本地远程仓库一致<br>$ git reset --hard HEAD^ # 回退到本地仓库上一个版本<br>$ git reset --hard &lt;hash code&gt; # 回退到任意版本<br>$ git reset --soft/git reset # 回退且回到已修改状态，修改仍保留在工作区中。 <br></code></pre></td></tr></table></figure>

<h4 id="四、已推送到远程"><a href="#四、已推送到远程" class="headerlink" title="四、已推送到远程"></a>四、已推送到远程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git push -f orgin master # 强制覆盖远程分支<br>$ git push -f # 如果之前已经用 -u 关联过，则可省略分支名<br></code></pre></td></tr></table></figure>

<blockquote>
<p>慎用，一般情况下，本地分支比远程要新，所以可以直接推送到远程，但有时推送到远程后发现有问题，进行了版本回退，旧版本或者分叉版本推送到远程，需要添加 -f参数，表示强制覆盖。</p>
</blockquote>
<h2 id="🏷️3、其它常见操作"><a href="#🏷️3、其它常见操作" class="headerlink" title="🏷️3、其它常见操作"></a>🏷️3、其它常见操作</h2><h3 id="一、关联远程仓库"><a href="#一、关联远程仓库" class="headerlink" title="一、关联远程仓库"></a>一、关联远程仓库</h3><ul>
<li>如果还没有Git仓库，你需要</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git init<br></code></pre></td></tr></table></figure>

<ul>
<li>如果你想关联远程仓库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git remote add &lt;name&gt; &lt;git-repo-url&gt;<br># 例如 git remote add origin https://github.com/xxxxxx # 是远程仓库的名称，通常为 origin <br></code></pre></td></tr></table></figure>

<ul>
<li>如果你想关联多个远程仓库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git remote add &lt;name&gt; &lt;another-git-repo-url&gt;<br># 例如 git remote add coding https://coding.net/xxxxxx <br></code></pre></td></tr></table></figure>

<ul>
<li>忘了关联了哪些仓库或者地址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git remote -v<br># origin https://github.com/gzdaijie/koa-react-server-render-blog.git (fetch)<br># origin https://github.com/gzdaijie/koa-react-server-render-blog.git (push) <br></code></pre></td></tr></table></figure>

<ul>
<li>如果远程有仓库，你需要clone到本地</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git clone &lt;git-repo-url&gt;<br># 关联的远程仓库将被命名为origin，这是默认的。<br></code></pre></td></tr></table></figure>

<ul>
<li>如果你想把别人仓库的地址改为自己的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git remote set-url origin &lt;your-git-url&gt;<br></code></pre></td></tr></table></figure>

<h3 id="二、-切换分支"><a href="#二、-切换分支" class="headerlink" title="二、 切换分支"></a>二、 切换分支</h3><blockquote>
<p>新建仓库后，默认生成了master分支</p>
</blockquote>
<ul>
<li>如果你想新建分支并切换</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git checkout -b &lt;new-branch-name&gt;<br># 例如 git checkout -b dev<br># 如果仅新建，不切换，则去掉参数 -b<br></code></pre></td></tr></table></figure>

<ul>
<li>看看当前有哪些分支</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git branch<br># * dev<br>#   master # 标*号的代表当前所在的分支<br></code></pre></td></tr></table></figure>

<ul>
<li>看看当前本地&amp;远程有哪些分支</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git branch -a<br># * dev<br>#   master<br>#   remotes/origin/master<br></code></pre></td></tr></table></figure>

<ul>
<li>切换到现有的分支</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git checkout master<br></code></pre></td></tr></table></figure>

<ul>
<li>你想把dev分支合并到master分支</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git merge &lt;branch-name&gt;<br># 例如 git merge dev<br></code></pre></td></tr></table></figure>

<ul>
<li>你想把本地master分支推送到远程去</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git push origin master<br># 你可以使用git push -u origin master将本地分支与远程分支关联，之后仅需要使用git push即可。<br></code></pre></td></tr></table></figure>

<ul>
<li>远程分支被别人更新了，你需要更新代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git pull origin &lt;branch-name&gt;<br># 之前如果push时使用过-u，那么就可以省略为git pull<br></code></pre></td></tr></table></figure>

<ul>
<li>本地有修改，能不能先git pull</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git stash # 工作区修改暂存<br>$ git pull  # 更新分支<br>$ git stash pop # 暂存修改恢复到工作区  <br></code></pre></td></tr></table></figure>

<h3 id="三、-撤销操作"><a href="#三、-撤销操作" class="headerlink" title="三、 撤销操作"></a>三、 撤销操作</h3><ul>
<li>恢复暂存区文件到工作区</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git checkout &lt;file-name&gt; <br></code></pre></td></tr></table></figure>

<ul>
<li>恢复暂存区的所有文件到工作区</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git checkout .<br></code></pre></td></tr></table></figure>

<ul>
<li>重置暂存区的某文件，与上一次commit保持一致，但工作区不变</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git reset &lt;file-name&gt;<br></code></pre></td></tr></table></figure>

<ul>
<li>重置暂存区与工作区，与上一次commit保持一致</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git reset --hard &lt;file-name&gt;<br># 如果是回退版本(commit)，那么file，变成commit的hash码就好了。 <br></code></pre></td></tr></table></figure>

<ul>
<li>去掉某个commit</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git revert &lt;commit-hash&gt;<br># 实质是新建了一个与原来完全相反的commit，抵消了原来commit的效果 <br></code></pre></td></tr></table></figure>

<ul>
<li>reset回退错误恢复</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git reflog #查看最近操作记录<br>$ git reset --hard HEAD&#123;5&#125; #恢复到前五笔操作<br>$ git pull origin backend-log #再次拉取代码<br></code></pre></td></tr></table></figure>

<h3 id="四、版本回退与前进"><a href="#四、版本回退与前进" class="headerlink" title="四、版本回退与前进"></a>四、版本回退与前进</h3><ul>
<li>查看历史版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git log<br></code></pre></td></tr></table></figure>

<ul>
<li>你可能觉得这样的log不好看，试试这个</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git log --graph --decorate --abbrev-commit --all<br></code></pre></td></tr></table></figure>

<ul>
<li>检出到任意版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git checkout a5d88ea<br># hash码很长，通常6-7位就够了<br></code></pre></td></tr></table></figure>

<ul>
<li>远程仓库的版本很新，但是你还是想用老版本覆盖</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git push origin master --force<br># 或者 git push -f origin master<br></code></pre></td></tr></table></figure>

<ul>
<li>觉得commit太多了? 多个commit合并为1个</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git rebase -i HEAD~4<br># 这个命令，将最近4个commit合并为1个，HEAD代表当前版本。将进入VIM界面，你可以修改提交信息。推送到远程分支的commit，不建议这样做，多人合作时，通常不建议修改历史。 <br></code></pre></td></tr></table></figure>

<ul>
<li>想回退到某一个版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git reset --hard &lt;hash&gt;<br># 例如 git reset --hard a3hd73r<br># --hard代表丢弃工作区的修改，让工作区与版本代码一模一样，与之对应，--soft参数代表保留工作区的修改。<br></code></pre></td></tr></table></figure>

<ul>
<li>想回退到上一个版本，有没有简便方法?</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git reset --hard HEAD^ <br></code></pre></td></tr></table></figure>

<ul>
<li>回退到上上个版本呢?</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git reset --hard HEAD^^<br># HEAD^^可以换作具体版本hash值。<br></code></pre></td></tr></table></figure>

<ul>
<li>回退错了，能不能前进呀</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git reflog<br># 这个命令保留了最近执行的操作及所处的版本，每条命令前的hash值，则是对应版本的hash值。使用上述的git checkout 或者 git reset命令 则可以检出或回退到对应版本。<br></code></pre></td></tr></table></figure>

<ul>
<li>刚才commit信息写错了，可以修改吗</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git commit --amend<br></code></pre></td></tr></table></figure>

<ul>
<li>看看当前状态吧</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git status <br></code></pre></td></tr></table></figure>

<h3 id="五、配置属于你的Git"><a href="#五、配置属于你的Git" class="headerlink" title="五、配置属于你的Git"></a>五、配置属于你的Git</h3><ul>
<li>看看当前的配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git config --list <br></code></pre></td></tr></table></figure>

<ul>
<li>估计你需要配置你的名字</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git config --global user.name &quot;&lt;name&gt;<br>#  --global为可选参数，该参数表示配置全局信息` <br></code></pre></td></tr></table></figure>

<ul>
<li>希望别人看到你的commit可以联系到你</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git config --global user.email &quot;&lt;email address&gt;&quot; <br></code></pre></td></tr></table></figure>

<ul>
<li>有些命令很长，能不能简化一下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ git config --global alias.logg &quot;log --graph --decorate --abbrev-commit --all&quot;<br># 之后就可以开心地使用 git log了<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
  </entry>
  <entry>
    <title>http协议及其特点,状态码</title>
    <url>/2023/10/05/http%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%E5%8F%8A%E5%85%B6%E7%89%B9%E7%82%B9-%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<h1 id="什么是http协议？有什么特点？有哪些状态码？"><a href="#什么是http协议？有什么特点？有哪些状态码？" class="headerlink" title="什么是http协议？有什么特点？有哪些状态码？"></a>什么是http协议？有什么特点？有哪些状态码？</h1><h1 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a><strong>什么是HTTP协议</strong></h1><p>HTTP（Hypertext Transfer Protocol）是一种用于传输超文本的应用层协议，用于在客户端和服务器之间进行通信。HTTP 协议定义了 Web 客户端和服务器之间互相通信的格式和规则，是互联网信息交换的基础</p>
<ul>
<li>HTTP是基于请求-响应模型的协议，客户端发送HTTP请求到服务器，服务器处理请求并返回相应的HTTP响应。</li>
<li>HTTP使用URL（Uniform Resource Locator）来标识要获取的资源的位置。客户端通过URL指定要请求的资源，例如网页、图像、视频等。</li>
<li>HTTP协议通常使用TCP&#x2F;IP作为传输协议，通过端口号80进行通信。</li>
<li>HTTP协议是无状态的，服务器不会保存之前请求的任何状态信息。为了维护会话状态，可以使用Cookie和Session等机制。</li>
<li>HTTP 使用统一资源标识符(Uniform Resource Identifier)来定位要访问的资源。 最常见的 URI 即 URL,比如 <a href="https://www.example.com/index.html%E3%80%82">https://www.example.com/index.html。</a></li>
</ul>
<h1 id="HTTP协议的特点"><a href="#HTTP协议的特点" class="headerlink" title="HTTP协议的特点"></a>HTTP协议的特点</h1><ul>
<li>简单：HTTP的请求和响应都是由文本构成，易于阅读和理解。它使用简单的命令集来完成通信。</li>
<li>可扩展：HTTP的头部允许添加自定义的字段，可以根据需求扩展协议。</li>
<li>无连接：每个HTTP请求都是独立的，服务器在处理完请求后会断开与客户端的连接。这种无连接的特性可以减轻服务器的负载，但也会增加连接的建立和关闭的开销。</li>
<li>无状态：服务器不会保存之前请求的状态信息，每个请求都是相互独立的。这意味着每个请求都需要包含所有必要的信息，例如身份验证凭据等。</li>
<li>支持缓存：HTTP支持客户端和服务器之间的缓存机制，可以减少数据传输量和提高性能。</li>
</ul>
<h1 id="HTTP协议常用方法"><a href="#HTTP协议常用方法" class="headerlink" title="HTTP协议常用方法"></a>HTTP协议常用方法</h1><ol>
<li>GET</li>
</ol>
<ul>
<li>用于获取资源</li>
<li>只请求资源,不修改资源</li>
<li>可以缓存</li>
<li>幂等操作</li>
<li>有长度限制</li>
<li>参数通过查询字符串传递</li>
</ul>
<ol>
<li>POST</li>
</ol>
<ul>
<li>用于创建资源</li>
<li>可以创建新的资源,也可以修改资源</li>
<li>不安全,不可缓存</li>
<li>不幂等</li>
<li>没有长度限制</li>
<li>参数通过请求体传递</li>
</ul>
<ol>
<li>PUT</li>
</ol>
<ul>
<li>用于替换资源</li>
<li>整个替换资源,或创建指定URI的资源</li>
<li>不安全,可缓存</li>
<li>幂等操作</li>
<li>没有长度限制</li>
<li>参数通过请求体传递</li>
</ul>
<ol>
<li>PATCH</li>
</ol>
<ul>
<li>用于部分更新资源</li>
<li>只更新资源的一部分</li>
<li>不安全,不可缓存</li>
<li>不幂等</li>
<li>没有长度限制</li>
<li>参数通过请求体传递</li>
</ul>
<ol>
<li>DELETE</li>
</ol>
<ul>
<li>用于删除资源</li>
<li>删除指定的资源</li>
<li>不安全,不可缓存</li>
<li>幂等操作</li>
<li>没有请求体</li>
</ul>
<ol>
<li>HEAD</li>
</ol>
<ul>
<li>与GET方法相同,但只返回报文头</li>
<li>获取报文首部以确定资源状态及元数据</li>
<li>对性能和资源消耗最小</li>
</ul>
<ol>
<li>OPTIONS</li>
</ol>
<ul>
<li>用于查询支持的方法</li>
<li>可以查询服务器对特定资源支持的HTTP方法</li>
<li>幂等操作</li>
</ul>
<h1 id="HTTP常见错误码："><a href="#HTTP常见错误码：" class="headerlink" title="HTTP常见错误码："></a>HTTP常见错误码：</h1><p>当客户端与服务器进行HTTP通信时，可能会遇到各种错误码。以下是HTTP错误码的更多详细列举，按照不同的错误类别划分：</p>
<p>1XX 信息性状态码（Informational）</p>
<ul>
<li>100 Continue：请求已成功收到，客户端应继续发送请求的其余部分。</li>
<li>101 Switching Protocols：服务器已理解客户端的协议升级请求，并将其切换到新协议。</li>
</ul>
<p>2XX 成功状态码（Success）</p>
<ul>
<li>200 OK：请求成功，服务器成功处理了请求。</li>
<li>201 Created：请求成功，服务器成功创建了新的资源。</li>
<li>202 Accepted：请求已接受，但尚未处理完成。</li>
<li>204 No Content：请求成功，但响应报文中没有实体的主体部分。</li>
</ul>
<p>3XX 重定向状态码（Redirection）</p>
<ul>
<li>300 Multiple Choices：请求的资源有多个位置可供选择。</li>
<li>301 Moved Permanently：请求的资源已永久移动到新位置。</li>
<li>302 Found：请求的资源暂时移动到其他位置。</li>
<li>304 Not Modified：客户端缓存的资源未修改，可以使用缓存的版本。</li>
</ul>
<p>4XX 客户端错误状态码（Client Errors）</p>
<ul>
<li>400 Bad Request：服务器无法理解客户端发送的请求。</li>
<li>401 Unauthorized：请求需要身份验证，但客户端未提供有效的身份验证信息。</li>
<li>403 Forbidden：服务器拒绝了请求，客户端没有访问所请求资源的权限。</li>
<li>404 Not Found：请求的资源不存在于服务器上。</li>
<li>405 Method Not Allowed：请求方法不被允许。</li>
</ul>
<p>5XX 服务器错误状态码（Server Errors）</p>
<ul>
<li>500 Internal Server Error：服务器在处理请求时遇到了错误。</li>
<li>501 Not Implemented：服务器不支持客户端请求的功能或方法。</li>
<li>502 Bad Gateway：作为代理或网关的服务器从上游服务器接收到无效的响应。</li>
<li>503 Service Unavailable：服务器暂时无法处理请求，通常由于过载或维护。</li>
<li>504 Gateway Timeout：作为代理或网关的服务器在等待上游服务器的响应时超时。</li>
</ul>
<h2 id="301和302的区别"><a href="#301和302的区别" class="headerlink" title="301和302的区别"></a>301和302的区别</h2><p>301和302是HTTP协议中的重定向状态码，用于指示请求的资源已经被移动到新的位置。它们之间的区别如下：</p>
<ol>
<li><p>301 Moved Permanently（永久重定向）：</p>
</li>
<li><ul>
<li>当服务器返回301状态码时，它表示请求的资源已经永久移动到了一个新的位置。</li>
<li>客户端在收到301响应后，应该更新其链接指向新的URL，并将以后的请求发送到新的URL。</li>
<li>搜索引擎会更新它们的索引，将旧的URL替换为新的URL。</li>
<li>使用301重定向时，浏览器会自动将用户重定向到新的URL，用户可能会察觉到网页地址的变化。</li>
</ul>
</li>
<li><p>302 Found（临时重定向）：</p>
</li>
<li><ul>
<li>当服务器返回302状态码时，它表示请求的资源暂时移动到了一个新的位置。</li>
<li>客户端在收到302响应后，应该继续使用原始的URL发送请求。</li>
<li>搜索引擎会继续将索引指向原始的URL，而不是新的URL。</li>
<li>使用302重定向时，浏览器会自动将用户重定向到新的URL，用户可能不会察觉到网页地址的变化。</li>
</ul>
</li>
</ol>
<p>总结：</p>
<ul>
<li>301表示永久重定向，要求客户端更新书签和链接，搜索引擎将索引指向新的URL。</li>
<li>302表示临时重定向，客户端应该继续使用原始URL发送请求，搜索引擎继续索引原始URL。</li>
<li>在实际使用中，301常用于网站结构调整或更改域名等情况，而302常用于临时重定向，例如网站维护或临时转移资源。</li>
<li>若不确定应该使用301还是302时，可以考虑使用302，因为它不会对搜索引擎的索引产生永久性影响。</li>
</ul>
<h2 id="401与403的区别"><a href="#401与403的区别" class="headerlink" title="401与403的区别"></a>401与403的区别</h2><p>401 Unauthorized（未授权）和403 Forbidden（禁止访问）是HTTP协议中的客户端错误状态码，用于指示客户端请求的资源的访问权限问题。它们之间的区别如下：</p>
<ol>
<li><p>401 Unauthorized（未授权）：</p>
</li>
<li><ul>
<li>当服务器返回401状态码时，表示客户端请求需要进行身份验证才能访问资源。</li>
<li>这个状态码要求客户端提供有效的身份验证凭据（例如用户名和密码）以便服务器验证其身份。</li>
<li>通常，在收到401响应后，客户端会弹出身份验证对话框，要求用户提供凭据以重新发送请求。</li>
</ul>
</li>
<li><p>403 Forbidden（禁止访问）：</p>
</li>
<li><ul>
<li>客户端提供的身份验证凭据无效或缺失。</li>
<li>客户端的身份验证凭据有效，但没有足够的权限来访问特定资源。</li>
<li>服务器设置了访问控制列表（ACL）或其他访问限制规则，拒绝客户端访问资源。</li>
<li>当服务器返回403状态码时，表示客户端被服务器禁止访问请求的资源。</li>
<li>这个状态码表明客户端没有足够的权限或认证来访问资源。</li>
<li>403状态码可以在以下情况下出现：</li>
</ul>
</li>
</ol>
<p>总结：</p>
<ul>
<li>401表示未授权，要求客户端进行身份验证，用于需要身份验证的资源。</li>
<li>403表示禁止访问，客户端被服务器拒绝访问请求的资源，通常是由于缺乏权限、身份验证问题或服务器的访问限制。</li>
</ul>
<p>在实际应用中，服务器可以根据具体的需求和场景来返回适当的状态码，以便客户端能够理解并采取相应的操作。401状态码通常用于需要身份验证的资源，而403状态码用于明确拒绝访问的情况。</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>js中堆和栈的概念和区别</title>
    <url>/2024/01/20/js%E4%B8%AD%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="一、-栈-stack-和-堆-heap"><a href="#一、-栈-stack-和-堆-heap" class="headerlink" title="一、 栈(stack)和 堆(heap)"></a>一、 栈(stack)和 堆(heap)</h3><p><strong>栈(stack)：</strong>是栈内存的简称，栈是<strong>自动分配</strong>相对<strong>固定大小</strong>的内存空间，并由系<strong>统自动释放，</strong>栈<strong>数据结构</strong>遵循<strong>FILO</strong>（first in last out）<strong>先进后出</strong>的原则，较为经典的就是乒乓球盒结构，先放进去的乒乓球只能最后取出来；</p>
<p><img src="/2024/01/20/js%E4%B8%AD%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/1739946914d2b233tplv-t2oaga2asx-jj-mark3024000q75.png" alt="img"></p>
<p><strong>堆(heap)：</strong>是堆内存的简称，堆是<strong>动态分配</strong>内存，<strong>内存大小不固定</strong>，也<strong>不会自动释放，</strong>堆<strong>数据结构</strong>是一种无序的树状结构，同时它还满足key-value键值对的存储方式；我们只用知道key名，就能通过key查找到对应的value。比较经典的就是书架存书的例子，我们知道书名，就可以找到对应的书籍；</p>
<p><img src="/2024/01/20/js%E4%B8%AD%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/173995964a8ebad8tplv-t2oaga2asx-jj-mark3024000q75.png" alt="img"></p>
<p><strong>**栈的特点**：**开口向上、速度快,容量小</strong>；**<strong>堆的特点</strong>：速度稍慢、容量比较大；</p>
<p><img src="/2024/01/20/js%E4%B8%AD%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/17375f8624e6c831tplv-t2oaga2asx-jj-mark3024000q75.png" alt="img"></p>
<h3 id="二、-基本类型和引用类型"><a href="#二、-基本类型和引用类型" class="headerlink" title="二、  基本类型和引用类型"></a>二、  基本类型和引用类型</h3><p><img src="/2024/01/20/js%E4%B8%AD%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/17379552d18f1b91tplv-t2oaga2asx-jj-mark3024000q75.png" alt="img"></p>
<p><strong>基本数据类型</strong>：<strong>Undefined,String,Boolean,Null,Number，</strong>都是直接按值存放在栈内存中，占用的内存空间的大小是确定的，并由系统自动分配和自动释放。这样带来的好处就是，内存可以及时得到回收，相对于堆来说，更加容易管理内存空间。</p>
<p><strong>引用数据类型</strong>：指那些可能由多个值构成的对象，如<strong>对象(Object)、数组(Array)、函数(Function)</strong> ，它们是通过拷贝和new出来的，这样的数据存储于堆中。</p>
<h3 id="三、-传值和传址的区别"><a href="#三、-传值和传址的区别" class="headerlink" title="三、 传值和传址的区别"></a>三、 传值和传址的区别</h3><p><strong>基本类型</strong>：采用的是<strong>值传递</strong>。</p>
<p><strong>引用类型</strong>：则是<strong>地址传递</strong>。</p>
<p>引用类型的数据的地址指针是存储于栈中的，将存放在栈内存中的地址赋值给接收的变量。当我们想要访问引用类型的值的时候，需要先从栈中获得对象的地址指针，然后，在通过地址指针找到堆中的所需要的数据（保存在堆内存中,包含引用类型的变量实际上保存的不是变量本身，而是指向该对象的指针）。</p>
<h3 id="四、-内存分配垃圾回收"><a href="#四、-内存分配垃圾回收" class="headerlink" title="四、 内存分配垃圾回收"></a>四、 内存分配垃圾回收</h3><p><strong>1.内存分配：</strong></p>
<p><strong>（1）栈内存：</strong>线性有序存储，容量小，系统分配效率高。</p>
<p><strong>（2）堆内存：</strong>首先要在堆内存新分配存储区域，之后又要把指针存储到栈内存中，效率相对就要低一些了。 </p>
<p><strong>2.垃圾回收</strong>：</p>
<p><strong>（1）栈内存：</strong>变量基本上用完就回收了，相比于堆来说存取速度会快，并且栈内存中的数据是可以共享的。</p>
<p><strong>（2）****堆内存</strong>：堆内存中的对象不会随方法的结束而销毁，就算方法结束了，这个对象也可能会被其他引用变量所引用(参数传递)。创建对象是为了反复利用（因为对象的创建成本通常较大），这个对象将被保存到运行时数据区（也就是堆内存）。只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在核实的时候回收它。</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的this指向</title>
    <url>/2023/11/10/js%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<h2 id="JavaScript中的this"><a href="#JavaScript中的this" class="headerlink" title="JavaScript中的this"></a>JavaScript中的this</h2><p>this是JavaScript中一个特殊关键字，用于指代当前执行上下文中的对象。它的难以理解之处就是值不是固定的，是再函数被调用时根据调用场景动态确定的，主要根据函数的调用方式来决定this指向的对象。<code>this</code> 的值在函数被调用时动态确定，以下是几种常见的情况：</p>
<ol>
<li><p><strong>全局上下文中：</strong>当在全局作用域中调用函数时，<code>this</code> 指向全局对象。在浏览器环境中，这个全局对象是 <code>window</code> 对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">console.log(this); // 在浏览器中，输出为 Window 对象<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>函数作为对象的方法：</strong>当函数作为对象的方法被调用时，<code>this</code> 指向调用该方法的对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const obj = &#123;  <br>property: &#x27;value&#x27;,  <br>printProperty: function() &#123;    <br>console.log(this.property);  <br>&#125;&#125;;<br>obj.printProperty(); // 输出 &#x27;value&#x27;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>构造函数中：</strong>在使用 <code>new</code> 关键字创建实例时，构造函数内部的 <code>this</code> 指向即将创建的新实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">function Person(name) &#123;  <br>this.name = name;<br>&#125;<br>const person = new Person(&#x27;Alice&#x27;);<br>console.log(person.name); // 输出 &#x27;Alice&#x27;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>显式绑定：</strong>使用call、apply、bind方法可以显式指定this的绑定对象。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">function greet(message) &#123;  <br>console.log(`$&#123;message&#125;, $&#123;this.name&#125;!`);<br>&#125;<br>const person = &#123; name: &#x27;Bob&#x27; &#125;;<br>greet.call(person, &#x27;Hello&#x27;); // 输出 &#x27;Hello, Bob!&#x27;<br></code></pre></td></tr></table></figure>

<ol>
<li><strong>箭头函数：</strong>箭头函数不绑定this,它会捕获外层作用域的this值作为自己的this。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const obj = &#123;  <br>method: function() &#123;    <br>const arrowFunc = () =&gt; &#123;      <br>console.log(this === obj);<br>&#125;;    <br>arrowFunc();  &#125;<br>&#125;;<br>obj.method(); // 输出 true<br></code></pre></td></tr></table></figure>

<ol>
<li><strong>class中的this：</strong>类中的this默认指向类的实例对象。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">class Rectangle &#123;  <br>constructor(width, height) &#123;    <br>this.width = width;<br>this.height = height;<br>&#125;<br>&#125;<br>const rect = new Rectangle(10, 20);<br>console.log(rect.width); // 输出 10<br></code></pre></td></tr></table></figure>

<ol>
<li><strong>事件绑定</strong>事件绑定中的this是指向触发事件的dom元素。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const button = document.getElementById(&#x27;myButton&#x27;);<br>button.addEventListener(&#x27;click&#x27;, function() &#123; <br>console.log(this === button);<br>&#125;);// 在按钮点击时输出 true<br></code></pre></td></tr></table></figure>

<h2 id="如何改变this指向"><a href="#如何改变this指向" class="headerlink" title="如何改变this指向"></a>如何改变this指向</h2><p>改变 <code>this</code> 指向是在 JavaScript 中常见的需求，特别是当你想要在不同的上下文中调用函数时。以下是几种常见的方法来改变 <code>this</code> 指向：</p>
<ol>
<li><p><strong>使用 <code>call</code> 方法：</strong><code>call</code> 方法允许你显式地指定函数内部的 <code>this</code> 值，并且传递参数列表。第一个参数是要绑定的 <code>this</code> 值，后面的参数是函数的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">function greet(message) &#123;  console.log(`$&#123;message&#125;, $&#123;this.name&#125;!`);&#125;<br>const person = &#123; name: &#x27;Alice&#x27; &#125;;<br>greet.call(person, &#x27;Hello&#x27;); // 输出 &#x27;Hello, Alice!&#x27; 这里把this绑定给person对象<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 <code>apply</code> 方法：</strong><code>apply</code> 方法与 <code>call</code> 类似，但它接受一个数组或类数组对象作为参数，其中的元素将作为函数参数传递。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">function greet(message) &#123;  <br>console.log(`$&#123;message&#125;, $&#123;this.name&#125;!`);&#125;<br>const person = &#123; name: &#x27;Bob&#x27; &#125;;<br>greet.apply(person, [&#x27;Hi&#x27;]); // 输出 &#x27;Hi, Bob!&#x27;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 <code>bind</code> 方法：</strong><code>bind</code> 方法创建一个新函数，将 <code>this</code> 值永久地绑定，并可以预先设置部分参数。原函数不会受到影响。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">function greet(message) &#123;  <br>console.log(`$&#123;message&#125;, $&#123;this.name&#125;!`);&#125;<br>const person = &#123; name: &#x27;Charlie&#x27; &#125;;<br>const greetPerson = greet.bind(person);<br>greetPerson(&#x27;Hey&#x27;); // 输出 &#x27;Hey, Charlie!&#x27;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>使用箭头函数：</strong>箭头函数不会绑定独立的 <code>this</code> 值，而是捕获其外部函数的 <code>this</code> 值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const obj = &#123;  <br>method: function() &#123;    <br>const arrowFunc = () =&gt; &#123;      <br>console.log(this === obj);    <br>&#125;; <br>arrowFunc();  <br>&#125;<br>&#125;;<br>obj.method(); // 输出 true<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="call和apply区别"><a href="#call和apply区别" class="headerlink" title="call和apply区别"></a>call和apply区别</h2><ol>
<li><p><strong><code>bind</code> 方法：</strong></p>
</li>
<li><ul>
<li><code>bind</code> 方法创建一个新函数，将原函数的 <code>this</code> 值永久绑定到指定的对象，并可以在调用时传递参数。</li>
<li>它不会立即执行原函数，而是返回一个新的函数，需要手动调用新函数以执行原函数。</li>
<li><code>bind</code> 方法不会改变原函数的上下文，而是返回一个新函数。</li>
</ul>
</li>
<li><p><strong><code>call</code> 方法：</strong></p>
</li>
<li><ul>
<li><code>call</code> 方法立即调用函数，并指定函数内部的 <code>this</code> 值，同时可以传递参数列表。</li>
<li>它的第一个参数是要绑定的 <code>this</code> 值，后续的参数会作为函数的参数传递。</li>
</ul>
</li>
<li><p><strong><code>apply</code> 方法：</strong></p>
</li>
<li><ul>
<li><code>apply</code> 方法也立即调用函数，并指定函数内部的 <code>this</code> 值，但参数传递方式不同。</li>
<li>它的第一个参数是要绑定的 <code>this</code> 值，第二个参数是一个数组（或类数组对象），其中的元素会作为函数的参数传递。</li>
</ul>
</li>
</ol>
<h2 id="实现call、apply、bind"><a href="#实现call、apply、bind" class="headerlink" title="实现call、apply、bind"></a>实现call、apply、bind</h2><p>这里实现简化版的，核心思路是:</p>
<ol>
<li>将函数设为传入对象的一个属性</li>
<li>执行该函数</li>
<li>删除该函数（临时函数调用完成删除，防止内存泄漏，以免context 对象造成污染）</li>
<li>返回结果或传入的this</li>
</ol>
<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">js<br>Function.prototype.myCall = function(context, ...args) &#123;  <br>context = context || window;<br>const fn = Symbol();<br>  context[fn] = this;<br>  const result = context[fn](...args);  <br>  delete context[fn];<br>  return result;<br>  &#125;<br></code></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">js<br>Function.prototype.myApply = function(context, args) &#123;  <br>context = context || window;  const fn = Symbol();<br>  context[fn] = this;<br>  let result;  <br>  if(args) &#123;   <br>  result = context[fn](...args);  <br>  &#125; else &#123;    <br>  result = context[fn]();  &#125;<br>  delete context[fn];  <br>  return result;<br>  &#125;<br></code></pre></td></tr></table></figure>

<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">js<br>Function.prototype.myBind = function(context, ...outerArgs) &#123;  <br>context = context || window;  <br>const _this = this;<br>return function(...innerArgs) &#123;   <br>context[fn] = _this;    <br>const result = context[fn](...outerArgs, ...innerArgs);    <br>delete context[fn];    <br>return result;  <br>&#125;&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js实现数组去重方法总结</title>
    <url>/2023/11/17/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><strong>方法一：</strong></h3><p>双层循环，外层循环元素，内层循环时比较值</p>
<p>如果有相同的值则跳过，不相同则push进数组</p>
<p><img src="/2023/11/17/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/image-20231117235328398.png" alt="image-20231117235328398"></p>
<h3 id="方法二：利用splice直接在原数组进行操作"><a href="#方法二：利用splice直接在原数组进行操作" class="headerlink" title="方法二：利用splice直接在原数组进行操作"></a><strong>方法二：利用splice直接在原数组进行操作</strong></h3><p>双层循环，外层循环元素，内层循环时比较值</p>
<p>值相同时，则删去这个值</p>
<p>注意点:删除元素之后，需要将数组的长度也减1.</p>
<p><img src="/2023/11/17/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/image-20231117235405825.png" alt="image-20231117235405825"></p>
<p>优点：简单易懂</p>
<p>缺点：占用内存高，速度慢</p>
<h3 id="方法三：利用对象的属性不能相同的特点进行去重"><a href="#方法三：利用对象的属性不能相同的特点进行去重" class="headerlink" title="方法三：利用对象的属性不能相同的特点进行去重"></a><strong>方法三：利用对象的属性不能相同的特点进行去重</strong></h3><p><img src="/2023/11/17/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/image-20231117235438278.png" alt="image-20231117235438278"></p>
<h3 id="方法四：数组递归去重"><a href="#方法四：数组递归去重" class="headerlink" title="方法四：数组递归去重"></a><strong>方法四：数组递归去重</strong></h3><p>运用递归的思想</p>
<p>先排序，然后从最后开始比较，遇到相同，则删除</p>
<p><img src="/2023/11/17/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/image-20231117235505242.png" alt="image-20231117235505242"></p>
<h3 id="方法五：利用indexOf以及forEach"><a href="#方法五：利用indexOf以及forEach" class="headerlink" title="方法五：利用indexOf以及forEach"></a><strong>方法五：利用indexOf以及forEach</strong></h3><p><img src="/2023/11/17/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/image-20231117235537194.png" alt="image-20231117235537194"></p>
<h3 id="方法六：利用ES6的set"><a href="#方法六：利用ES6的set" class="headerlink" title="方法六：利用ES6的set"></a><strong>方法六：利用ES6的set</strong></h3><p>Set数据结构，它类似于数组，其成员的值都是唯一的。</p>
<p>利用Array.from将Set结构转换成数组</p>
<p><img src="/2023/11/17/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/image-20231117235602926.png" alt="image-20231117235602926"></p>
<p>拓展运算符(…)内部使用for…of循环</p>
<p><img src="/2023/11/17/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/image-20231117235622743.png" alt="image-20231117235622743"></p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js的Object.keys方法</title>
    <url>/2023/10/22/js%E7%9A%84Object-keys%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h5 id="今天看到项目中有使用到Object-keys方法，又去查阅MDN文档学习了一下。"><a href="#今天看到项目中有使用到Object-keys方法，又去查阅MDN文档学习了一下。" class="headerlink" title="今天看到项目中有使用到Object.keys方法，又去查阅MDN文档学习了一下。"></a>今天看到项目中有使用到Object.keys方法，又去查阅MDN文档学习了一下。</h5><h3 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Object.keys(obj)<br><br>参数：要返回其枚举自身属性的对象<br><br>返回值：一个表示给定对象的所有可枚举属性的字符串数组<br></code></pre></td></tr></table></figure>

<h3 id="二、处理对象，返回可枚举的属性数组"><a href="#二、处理对象，返回可枚举的属性数组" class="headerlink" title="二、处理对象，返回可枚举的属性数组"></a>二、处理对象，返回可<a href="https://so.csdn.net/so/search?q=%E6%9E%9A%E4%B8%BE&spm=1001.2101.3001.7020">枚举</a>的属性数组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let person = &#123;name:&quot;张三&quot;,age:25,address:&quot;深圳&quot;,getName:function()&#123;&#125;&#125;<br><br>Object.keys(person) // [&quot;name&quot;, &quot;age&quot;, &quot;address&quot;,&quot;getName&quot;]<br></code></pre></td></tr></table></figure>

<p><img src="/2023/10/22/js%E7%9A%84Object-keys%E6%96%B9%E6%B3%95/971b10a06fa0476caa5fc54c8667a0a6.png" alt="在这里插入图片描述"></p>
<h3 id="三、处理数组，返回索引值数组"><a href="#三、处理数组，返回索引值数组" class="headerlink" title="三、处理数组，返回索引值数组"></a>三、处理数组，返回索引值数组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let arr = [1,2,3,4,5,6]<br><br>Object.keys(arr) // [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]<br></code></pre></td></tr></table></figure>

<p><img src="/2023/10/22/js%E7%9A%84Object-keys%E6%96%B9%E6%B3%95/d006dc3d4d5d4195948b02881745794b.png" alt="在这里插入图片描述"></p>
<h3 id="四、处理字符串，返回索引值数组"><a href="#四、处理字符串，返回索引值数组" class="headerlink" title="四、处理字符串，返回索引值数组"></a>四、处理<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>，返回索引值数组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let str = &quot;saasd字符串&quot;<br><br>Object.keys(str) // [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;]<br></code></pre></td></tr></table></figure>

<p><img src="/2023/10/22/js%E7%9A%84Object-keys%E6%96%B9%E6%B3%95/015ea84c833e44eca08ac38867cabe84.png" alt="在这里插入图片描述"></p>
<h3 id="五、常用技巧"><a href="#五、常用技巧" class="headerlink" title="五、常用技巧"></a>五、常用技巧</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let person = &#123;name:&quot;张三&quot;,age:25,address:&quot;深圳&quot;,getName:function()&#123;&#125;&#125;<br><br>Object.keys(person).map((key)=&gt;&#123;<br><br>　　person[key] // 获取到属性对应的值，做一些处理<br><br>&#125;) <br></code></pre></td></tr></table></figure>

<h3 id="六、Object-values-和Object-keys-是相反的操作，把一个对象的值转换为数组"><a href="#六、Object-values-和Object-keys-是相反的操作，把一个对象的值转换为数组" class="headerlink" title="六、Object.values()和Object.keys()是相反的操作，把一个对象的值转换为数组"></a>六、Object.values()和Object.keys()是相反的操作，把一个对象的值转换为数组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let str = &quot;abc字符串&quot;;<br>let str2 = &#123;<br>  a: &#x27;123&#x27;,<br>  b: 12<br>&#125;<br><br>console.log(Object.keys(str));<br>console.log(Object.values(str));<br>console.log(Object.values(str2));<br></code></pre></td></tr></table></figure>

<p><img src="/2023/10/22/js%E7%9A%84Object-keys%E6%96%B9%E6%B3%95/image-20231022122644494.png" alt="image-20231022122644494"></p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>新用户注册(正则表达式)</title>
    <url>/2023/07/26/js%E6%96%B0%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%B0%8F%E6%A1%88%E4%BE%8B-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="js新用户注册小案例-正则表达式"><a href="#js新用户注册小案例-正则表达式" class="headerlink" title="js新用户注册小案例(正则表达式)"></a>js新用户注册小案例(正则表达式)</h1><h3 id="本文是在学习javaScript中Web-APIs板块为更加熟练掌握理解正则表达式的练习小案例"><a href="#本文是在学习javaScript中Web-APIs板块为更加熟练掌握理解正则表达式的练习小案例" class="headerlink" title="本文是在学习javaScript中Web APIs板块为更加熟练掌握理解正则表达式的练习小案例"></a>本文是在学习javaScript中Web APIs板块为更加熟练掌握理解正则表达式的练习小案例</h3><h4 id="网页的业务模块分析"><a href="#网页的业务模块分析" class="headerlink" title="网页的业务模块分析"></a>网页的业务模块分析</h4><ol>
<li>发送验证码模块</li>
<li>各个表单验证模块</li>
<li>勾选已经阅读同意模块</li>
<li>下一步验证模块，只要上面有一个input验证不通过就不同意提交</li>
</ol>
<h4 id="网页效果如下"><a href="#网页效果如下" class="headerlink" title="网页效果如下"></a>网页效果如下</h4><p><img src="/2023/07/26/js%E6%96%B0%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%B0%8F%E6%A1%88%E4%BE%8B-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A1%88%E4%BE%8B%E6%95%88%E6%9E%9C%E5%9B%BE.png"></p>
<h4 id="完整代码实现以及包含的css代码如下，可按需取用"><a href="#完整代码实现以及包含的css代码如下，可按需取用" class="headerlink" title="完整代码实现以及包含的css代码如下，可按需取用"></a>完整代码实现以及包含的css代码如下，可按需取用</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>newUser-registery<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/common.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/register.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://at.alicdn.com/t/font_2143783_iq6z4ey5vu.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- 卡片 --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-card&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>新用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-zhanghao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;设置用户名称&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-shouji&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入手机号码  &quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-zhibiaozhushibiaozhu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;短信验证码&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>发送验证码<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-suo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;设置6至20位字母、数字和符号组合&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;confirm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-suo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;confirm&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请再次输入上面密码&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item pl50&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-queren&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                已阅读并同意<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>《用户服务协议》<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>下一步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- &lt;a class=&quot;submit&quot; href=&quot;javascript:;&quot;&gt;下一步&lt;/a&gt; --&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 1. 发送短信验证码模块</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> code = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.code&#x27;</span>)</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>  <span class="hljs-comment">// 通过一个变量来控制   节流阀 </span></span><br><span class="language-javascript">          <span class="hljs-comment">//  1.1 点击事件</span></span><br><span class="language-javascript">          code.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">              <span class="hljs-comment">// 取反了，不能马上第二次点击</span></span><br><span class="language-javascript">              flag = <span class="hljs-literal">false</span></span><br><span class="language-javascript">              <span class="hljs-keyword">let</span> i = <span class="hljs-number">5</span></span><br><span class="language-javascript">              <span class="hljs-comment">// 点击完毕之后立马触发</span></span><br><span class="language-javascript">              code.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`0<span class="hljs-subst">$&#123;i&#125;</span>秒后重新获取`</span></span><br><span class="language-javascript">              <span class="hljs-comment">// 开启定时器</span></span><br><span class="language-javascript">              <span class="hljs-keyword">let</span> timerId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                i--</span><br><span class="language-javascript">                code.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`0<span class="hljs-subst">$&#123;i&#125;</span>秒后重新获取`</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                  <span class="hljs-comment">// 清除定时器</span></span><br><span class="language-javascript">                  <span class="hljs-built_in">clearInterval</span>(timerId)</span><br><span class="language-javascript">                  <span class="hljs-comment">// 从新获取</span></span><br><span class="language-javascript">                  code.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`重新获取`</span></span><br><span class="language-javascript">                  <span class="hljs-comment">// 到时间了，可以开启 flag了</span></span><br><span class="language-javascript">                  flag = <span class="hljs-literal">true</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">              &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">        &#125;)();</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 2. 验证的是用户名</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 2.1 获取用户名表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=username]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 2.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        username.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyName)</span><br><span class="language-javascript">        <span class="hljs-comment">// 2.3 封装verifyName函数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyName</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = username.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 2.4 定规则  用户名</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9-_]&#123;6,10&#125;$/</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!reg.<span class="hljs-title function_">test</span>(username.<span class="hljs-property">value</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;输入不合法,请输入6~10位&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 2.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 3. 验证的是手机号</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 2.1 获取手机表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> phone = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=phone]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 2.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        phone.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyPhone)</span><br><span class="language-javascript">        <span class="hljs-comment">// 2.3 verifyPhone</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyPhone</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = phone.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 2.4 定规则  用户名</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^1(3\d|4[5-9]|5[0-35-9]|6[567]|7[0-8]|8\d|9[0-35-9])\d&#123;8&#125;$/</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!reg.<span class="hljs-title function_">test</span>(phone.<span class="hljs-property">value</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;输入不合法,请输入正确的11位手机号码&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 2.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 4. 验证的是验证码</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 4.1 获取验证码表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> codeInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=code]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//4.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        codeInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyCode)</span><br><span class="language-javascript">        <span class="hljs-comment">// 4.3 verifyPhone</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyCode</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = codeInput.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 4.4 定规则  验证码</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^\d&#123;6&#125;$/</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!reg.<span class="hljs-title function_">test</span>(codeInput.<span class="hljs-property">value</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;输入不合法,6 位数字&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 4.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 5. 验证的是密码框</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 5.1 获取密码表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> password = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=password]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//5.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        password.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyPwd)</span><br><span class="language-javascript">        <span class="hljs-comment">// 5.3 verifyPhone</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyPwd</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = password.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 5.4 定规则  密码</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9-_]&#123;6,20&#125;$/</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!reg.<span class="hljs-title function_">test</span>(password.<span class="hljs-property">value</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;输入不合法,6~20位数字字母符号组成&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 5.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 6. 密码的再次验证</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 6.1 获取再次验证表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> confirm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=confirm]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//6.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        confirm.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyConfirm)</span><br><span class="language-javascript">        <span class="hljs-comment">// 6.3 verifyPhone</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyConfirm</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = confirm.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 6.4 当前表单的值不等于 密码框的值就是错误的</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (confirm.<span class="hljs-property">value</span> !== password.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;两次密码输入不一致&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 6.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 7. 我同意</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> queren = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.icon-queren&#x27;</span>)</span><br><span class="language-javascript">        queren.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 切换类  原来有的就删掉，原来没有就添加</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;icon-queren2&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 8. 提交模块</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;form&#x27;</span>)</span><br><span class="language-javascript">        form.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 判断是否勾选我同意模块 ，如果有 icon-queren2说明就勾选了，否则没勾选</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!queren.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;icon-queren2&#x27;</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请勾选同意协议&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 阻止提交</span></span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 依次判断上面的每个框框 是否通过，只要有一个没有通过的就阻止</span></span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(verifyName())</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyName</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyPhone</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyCode</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyPwd</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyConfirm</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="register-css"><a href="#register-css" class="headerlink" title="register.css"></a>register.css</h4><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.xtx-wrapper</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f5f5</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-wrapper</span> <span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1240px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-card</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-card</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;<br>  <span class="hljs-attribute">font-weight</span>: normal;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">180px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">180px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">460px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">24px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.msg</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff4d4f</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">2px</span>;<br>&#125;<br><br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span><span class="hljs-selector-class">.pl50</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.iconfont</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">13px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e4e4e4</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">40px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span><span class="hljs-selector-class">.error</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#ff4d4f</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">::placeholder</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cccccc</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.submit</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.code</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">190px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.code</span><span class="hljs-selector-class">.ing</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cccccc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">720px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">96px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">48px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">63px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.step</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#e4e4e4</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">46px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">23px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#e4e4e4</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:first</span>-child<span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:last-child</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-class">.active</span> <span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-class">.active</span> <span class="hljs-selector-class">.step</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-class">.active</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-class">.active</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">360px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">80px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e4e4e4</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">::placeholder</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cccccc</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:read-only</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f5f5</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.submit</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.captcha</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.captcha</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">134px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.captcha</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.code</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">310px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.code</span><span class="hljs-selector-class">.ing</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cccccc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> &#123;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">250px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> <span class="hljs-selector-class">.iconfont</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#1DC779</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> <span class="hljs-selector-class">.tit</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> <span class="hljs-selector-class">.desc</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> <span class="hljs-selector-class">.btn</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="common-css"><a href="#common-css" class="headerlink" title="common.css"></a>common.css</h4><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@charset</span> <span class="hljs-string">&quot;UTF-8&quot;</span>;<br><span class="hljs-comment">/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */</span><br><span class="hljs-comment">/* Document</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the line height in all browsers.</span><br><span class="hljs-comment"> * 2. Prevent adjustments of font size after orientation changes in iOS.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.15</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  -webkit-text-size-adjust: <span class="hljs-number">100%</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/* Sections</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the margin in all browsers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Render the `main` element consistently in IE.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">main</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Correct the font size and margin on `h1` elements within `section` and</span><br><span class="hljs-comment"> * `article` contexts in Chrome, Firefox, and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0.67em</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Grouping content</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Add the correct box sizing in Firefox.</span><br><span class="hljs-comment"> * 2. Show the overflow in Edge and IE.</span><br><span class="hljs-comment"> */</span><br>hr &#123;<br>  <span class="hljs-attribute">box-sizing</span>: content-box;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">overflow</span>: visible;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the inheritance and scaling of font size in all browsers.</span><br><span class="hljs-comment"> * 2. Correct the odd `em` font sizing in all browsers.</span><br><span class="hljs-comment"> */</span><br>pre &#123;<br>  <span class="hljs-attribute">font-family</span>: monospace, monospace;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/* Text-level semantics</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the gray background on active links in IE 10.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: transparent;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Remove the bottom border in Chrome 57-</span><br><span class="hljs-comment"> * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">abbr</span><span class="hljs-selector-attr">[title]</span> &#123;<br>  <span class="hljs-attribute">border-bottom</span>: none;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">text-decoration</span>: underline;<br>  <span class="hljs-comment">/* 2 */</span><br>  <span class="hljs-attribute">text-decoration</span>: underline dotted;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct font weight in Chrome, Edge, and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">b</span>,<br><span class="hljs-selector-tag">strong</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bolder;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the inheritance and scaling of font size in all browsers.</span><br><span class="hljs-comment"> * 2. Correct the odd `em` font sizing in all browsers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">code</span>,<br><span class="hljs-selector-tag">kbd</span>,<br><span class="hljs-selector-tag">samp</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: monospace, monospace;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct font size in all browsers.</span><br><span class="hljs-comment"> */</span><br>small &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80%</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Prevent `sub` and `sup` elements from affecting the line height in</span><br><span class="hljs-comment"> * all browsers.</span><br><span class="hljs-comment"> */</span><br>sub,<br><span class="hljs-selector-tag">sup</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">75%</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">vertical-align</span>: baseline;<br>&#125;<br><br>sub &#123;<br>  <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">0.25em</span>;<br>&#125;<br><br><span class="hljs-selector-tag">sup</span> &#123;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">0.5em</span>;<br>&#125;<br><br><span class="hljs-comment">/* Embedded content</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the border on images inside links in IE 10.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">border-style</span>: none;<br>&#125;<br><br><span class="hljs-comment">/* Forms</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Change the font styles in all browsers.</span><br><span class="hljs-comment"> * 2. Remove the margin in Firefox and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">input</span>,<br>optgroup,<br>select,<br><span class="hljs-selector-tag">textarea</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.15</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Show the overflow in IE.</span><br><span class="hljs-comment"> * 1. Show the overflow in Edge.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">overflow</span>: visible;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the inheritance of text transform in Edge, Firefox, and IE.</span><br><span class="hljs-comment"> * 1. Remove the inheritance of text transform in Firefox.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>,<br>select &#123;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">text-transform</span>: none;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Correct the inability to style clickable types in iOS and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;button&quot;</span>]</span>,<br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;reset&quot;</span>]</span>,<br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;submit&quot;</span>]</span> &#123;<br>  -webkit-appearance: button;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the inner border and padding in Firefox.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>::-moz-focus-inner,<br>[type=<span class="hljs-string">&quot;button&quot;</span>]::-moz-focus-inner,<br>[type=<span class="hljs-string">&quot;reset&quot;</span>]::-moz-focus-inner,<br>[type=<span class="hljs-string">&quot;submit&quot;</span>]::-moz-focus-inner &#123;<br>  <span class="hljs-attribute">border-style</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Restore the focus styles unset by the previous rule.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>:-moz-focusring,<br>[type=<span class="hljs-string">&quot;button&quot;</span>]:-moz-focusring,<br>[type=<span class="hljs-string">&quot;reset&quot;</span>]:-moz-focusring,<br>[type=<span class="hljs-string">&quot;submit&quot;</span>]:-moz-focusring &#123;<br>  <span class="hljs-attribute">outline</span>: <span class="hljs-number">1px</span> dotted ButtonText;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Correct the padding in Firefox.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">fieldset</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.35em</span> <span class="hljs-number">0.75em</span> <span class="hljs-number">0.625em</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the text wrapping in Edge and IE.</span><br><span class="hljs-comment"> * 2. Correct the color inheritance from `fieldset` elements in IE.</span><br><span class="hljs-comment"> * 3. Remove the padding so developers are not caught out when they zero out</span><br><span class="hljs-comment"> *    `fieldset` elements in all browsers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">legend</span> &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">color</span>: inherit;<br>  <span class="hljs-comment">/* 2 */</span><br>  <span class="hljs-attribute">display</span>: table;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 3 */</span><br>  <span class="hljs-attribute">white-space</span>: normal;<br>  <span class="hljs-comment">/* 1 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct vertical alignment in Chrome, Firefox, and Opera.</span><br><span class="hljs-comment"> */</span><br>progress &#123;<br>  <span class="hljs-attribute">vertical-align</span>: baseline;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the default vertical scrollbar in IE 10+.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">textarea</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: auto;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Add the correct box sizing in IE 10.</span><br><span class="hljs-comment"> * 2. Remove the padding in IE 10.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;checkbox&quot;</span>]</span>,<br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;radio&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Correct the cursor style of increment and decrement buttons in Chrome.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;number&quot;</span>]</span>::-webkit-inner-spin-button,<br>[type=<span class="hljs-string">&quot;number&quot;</span>]::-webkit-outer-spin-button &#123;<br>  <span class="hljs-attribute">height</span>: auto;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the odd appearance in Chrome and Safari.</span><br><span class="hljs-comment"> * 2. Correct the outline style in Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;search&quot;</span>]</span> &#123;<br>  -webkit-appearance: textfield;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">outline-offset</span>: -<span class="hljs-number">2px</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the inner padding in Chrome and Safari on macOS.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;search&quot;</span>]</span>::-webkit-search-decoration &#123;<br>  -webkit-appearance: none;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the inability to style clickable types in iOS and Safari.</span><br><span class="hljs-comment"> * 2. Change font properties to `inherit` in Safari.</span><br><span class="hljs-comment"> */</span><br>::-webkit-file-upload-button &#123;<br>  -webkit-appearance: button;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">font</span>: inherit;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/* Interactive</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Add the correct display in Edge, IE 10+, and Firefox.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">details</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Add the correct display in all browsers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">summary</span> &#123;<br>  <span class="hljs-attribute">display</span>: list-item;<br>&#125;<br><br><span class="hljs-comment">/* Misc</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct display in IE 10+.</span><br><span class="hljs-comment"> */</span><br>template &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct display in IE 10.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[hidden]</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br>* &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">14px</span>/<span class="hljs-number">1.4</span> <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, <span class="hljs-string">&quot;Microsoft Yahei&quot;</span>, <span class="hljs-string">&quot;Hiragino Sans GB&quot;</span>, <span class="hljs-string">&quot;Heiti SC&quot;</span>, <span class="hljs-string">&quot;WenQuanYi Micro Hei&quot;</span>, sans-serif;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h3</span>, <span class="hljs-selector-tag">h4</span>, <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">dl</span>, <span class="hljs-selector-tag">dd</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br><br><span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">max-height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot; &quot;</span>;<br>  <span class="hljs-attribute">display</span>: table;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  *zoom: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1240px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.sprites</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/sprites.png</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400px</span> <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>&#125;<br><br><span class="hljs-selector-class">.fl</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.fr</span> &#123;<br>  <span class="hljs-attribute">float</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.tc</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.green</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#CF4444</span>;<br>&#125;<br><br><span class="hljs-selector-class">.mb10</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fz20</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fz18</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fz16</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-bread</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">25px</span> <span class="hljs-number">25px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-bread</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-bread</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-common-btn</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">48px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-common-btn</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;primary&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-common-btn</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;info&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#CCCCCC</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.icon-yixuanze</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.icon-weixuanze</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.icon-yixuanze</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.icon-weixuanze</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-comment">/** 顶部导航 **/</span><br><span class="hljs-selector-class">.xtx_topnav</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">53px</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">53px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">border-right</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-class">.mobile</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">160px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#666666</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-comment">/** 主导航及Logo **/</span><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_logo</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">132px</span>;<br>  <span class="hljs-attribute">text-indent</span>: -<span class="hljs-number">999px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/logo.png</span>);<br>  <span class="hljs-attribute">background-size</span>: contain;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-position</span>-x: center;<br>  <span class="hljs-attribute">background-position</span>-y: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">7px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.active</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:after</span>, <span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.active</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">38px</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">175px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">38px</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">39px</span>;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e7e7e7</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">float</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_wrapper</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">17px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">17px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/sprites.png</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400px</span> <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">80px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_wrapper</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_wrapper</span> <span class="hljs-selector-tag">input</span>::-webkit-input-placeholder &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_cart</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">8px</span> <span class="hljs-number">12px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">float</span>: right;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">120px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_cart</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">6px</span>;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#E26237</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-comment">/** 公共底部 **/</span><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">60px</span> <span class="hljs-number">0</span> <span class="hljs-number">40px</span> <span class="hljs-number">25px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dl</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">190px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">72px</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#f2f2f2</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dl</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dl</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">border-right</span>: none;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dt</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dd</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">36px</span> <span class="hljs-number">12px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dd</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.chat</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.feedback</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weixin</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weibo</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">92px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">92px</span>;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ededed</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.chat</span><span class="hljs-selector-pseudo">:before</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.feedback</span><span class="hljs-selector-pseudo">:before</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weixin</span><span class="hljs-selector-pseudo">:before</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weibo</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/sprites.png</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400px</span> <span class="hljs-number">400px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.chat</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">245px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.chat</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">200px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.feedback</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">345px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.feedback</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">295px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weixin</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">247px</span> -<span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weixin</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">202px</span> -<span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weibo</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">347px</span> -<span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weibo</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">297px</span> -<span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.qrcode</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">92px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">92px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ededed</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.download</span> &#123;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.download</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.download</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.hotline</span> &#123;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.hotline</span> small &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.extra</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">178px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">60px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#434343</span>;<br>  <span class="hljs-attribute">text-align</span>: justify;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/sprites.png</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400px</span> <span class="hljs-number">400px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-class">.price</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-class">.express</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">65px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-class">.quality</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">130px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.copyright</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">170px</span>;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.copyright</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.copyright</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.copyright</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">border-right</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS小案例</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>osi和tcp模型</title>
    <url>/2023/11/24/osi%E5%92%8Ctcp%E6%A8%A1%E5%9E%8B%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h6 id="iso-osi参考模型有七层，tcp-ip模型有四层，结构图如下"><a href="#iso-osi参考模型有七层，tcp-ip模型有四层，结构图如下" class="headerlink" title="iso&#x2F;osi参考模型有七层，tcp&#x2F;ip模型有四层，结构图如下"></a>iso&#x2F;osi参考模型有七层，tcp&#x2F;ip模型有四层，结构图如下</h6><p><img src="/2023/11/24/osi%E5%92%8Ctcp%E6%A8%A1%E5%9E%8B%E5%8C%BA%E5%88%AB/image-20231124125132185.png" alt="image-20231124125132185"></p>
<h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><h4 id="1-物理层"><a href="#1-物理层" class="headerlink" title="1.物理层:"></a>1.物理层:</h4><p>负责传输比特流</p>
<p>使用的协议有:RS-232、V.35、Ethernet、Wi-Fi等, </p>
<p>RS-232 是一种串行通信协议用于在计算机和外部设备之间传输数据.</p>
<p>V.35是一种高速串行接口协议，用于连接计算机和网络设备。</p>
<p>Ethernet 是一种局域网协议，用于在计算机之间传输数据。</p>
<p>Wi-Fi 是一种无线局域网协议，用于在无线网络中传输数据</p>
<h4 id="2-数据链路层"><a href="#2-数据链路层" class="headerlink" title="2.数据链路层:"></a>2.数据链路层:</h4><p>负责将比特流转换为帧</p>
<p>使用的协议有: PPP、HDLC、Ethernet、Wi-Fi等，</p>
<p>PPP 是一种点对点协议用于在两个计算机之间建立连接。</p>
<p>HDLC 是-种高级数据链路控制协议，用于在计算机和网络设备之间传输数据。</p>
<p>Ethernet 和 Wi-Fi 也可以用于数据链路层通信</p>
<h4 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3.网络层:"></a>3.网络层:</h4><p>负责将顿转换为数据包，</p>
<p>使用的协议有: IP、ICMP、ARP、RIP、OSPF等</p>
<p>IP 是一种互联网协议，用于在不同的计算机之间传输数据。</p>
<p>ICMP 是一种互联网控制消息协议，用于在网络中传输控制信息。</p>
<p>ARP 是一种地址解析协议，用于将 IP 地址转换为物理地址。</p>
<p>RIP 和 OSPF 是路由协议，用于在网络中选择最佳路径</p>
<h4 id="4-传输层"><a href="#4-传输层" class="headerlink" title="4.传输层:"></a>4.传输层:</h4><p>负责提供端到端的可靠传输，</p>
<p>使用的协议有: TCP、UDP等。</p>
<p> TCP 是一种面向连接的协议提供可靠的数据传输。</p>
<p>UDP 是一种无连接的协议，提供不可靠但更快的数据传输。</p>
<h4 id="5-会话层"><a href="#5-会话层" class="headerlink" title="5.会话层:"></a>5.会话层:</h4><p>负责建立、管理和终止会话，</p>
<p>使用的协议有: RPC、NetBIOS 等。</p>
<h4 id="6-表示层"><a href="#6-表示层" class="headerlink" title="6.表示层:"></a>6.表示层:</h4><p>负责数据的格式化和加密解密，</p>
<p>使用的协议有: JPEG、MPEG、ASCII等</p>
<p>JPEG和MPEG 是图像和视频压缩协议，用于在网络中传输图像和视频<br>ASCII 是一种字符编码协议，用于在计算机之间传输文本数据</p>
<h4 id="7-应用层"><a href="#7-应用层" class="headerlink" title="7.应用层:"></a>7.应用层:</h4><p>负责提供各种网络应用服务，</p>
<p>使用的协议有: HTTP、FTP、SMTP、DNS等。</p>
<p>HTTP 是一种超文本传输协议，用于在 Web 浏览器和 Web 服务器之间传输数据。</p>
<p>FTP 是一种文件传输协议，用于在计算机之间传输文件。</p>
<p>SMTP 是一种简单邮件传输协议，用于在邮件服务器之间传输邮件。</p>
<p>DNS是一种域名系统协议，用于将域名转换为 IP 地址。</p>
<h3 id="tcp参考模型"><a href="#tcp参考模型" class="headerlink" title="tcp参考模型"></a>tcp参考模型</h3><p>TCP&#x2F;IP 模型将 OSI 模型由七层简化为四层，传输层和网络层被完整保留，因此网络中最核心的技术就是传输层和网络层技术。</p>
<p>TCP&#x2F;IP 协议中每层技术举例：<br>网络访问层：ARP、RARP<br>互联网层：ICMP、IP<br>传输层：TCP、UDP<br>应用层：DNS、FTP、HTTP、SMTP、TELNET、IRC、WHOIS</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>package.json中dependencies和devDependencies的区别</title>
    <url>/2024/02/02/package-json%E4%B8%ADdependencies%E5%92%8CdevDependencies%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>在前端项目的<code>package.json</code>文件中，<code>dependencies</code>和<code>devDependencies</code>是两个重要的字段，它们之间的主要区别如下：</p>
<ol>
<li><strong>用途</strong>：<ul>
<li><code>dependencies</code>：这个字段列出了项目运行所依赖的模块。这些模块是项目正常运行所必需的。</li>
<li><code>devDependencies</code>：这个字段列出了项目开发所需的模块。这些模块主要用于开发、测试或构建等过程，并不直接用于项目的日常运行。</li>
</ul>
</li>
<li><strong>安装方式</strong>：<ul>
<li><code>dependencies</code>：当使用<code>npm install</code>命令安装项目依赖时，会自动安装所有在<code>dependencies</code>字段中列出的模块。</li>
<li><code>devDependencies</code>：对于<code>devDependencies</code>中的模块，需要使用<code>--save-dev</code>选项进行安装，例如<code>npm install &lt;module-name&gt; --save-dev</code>。</li>
</ul>
</li>
<li><strong>默认行为</strong>：当你运行<code>npm install</code>命令时，默认情况下，它会安装所有在<code>dependencies</code>字段中列出的模块，但不会安装<code>devDependencies</code>中的模块。如果你希望同时安装两者，需要使用特定的命令，如<code>npm install --save-dev</code>。</li>
<li><strong>使用场景</strong>：<ul>
<li><code>dependencies</code>：例如，如果你需要一个特定版本的框架或库来运行你的项目，那么这个框架或库应该被列在<code>dependencies</code>字段中。</li>
<li><code>devDependencies</code>：例如，你可能需要某个构建工具（如Webpack、Babel等）来帮助你构建和测试代码。这些工具应该在<code>devDependencies</code>字段中列出。</li>
</ul>
</li>
<li><strong>发布到生产环境</strong>：只有<code>dependencies</code>中的模块会被包含在发布到生产环境的包中，因为这些模块是项目运行所必需的。而<code>devDependencies</code>中的模块不会被包含在内。</li>
</ol>
<p>综上所述，正确理解和配置这两个字段对于管理前端项目的依赖关系至关重要。一般来说，应该将那些项目运行所必需的模块放在<code>dependencies</code>字段中，而将那些仅在开发、测试或构建过程中所需的模块放在<code>devDependencies</code>字段中。</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
  </entry>
  <entry>
    <title>pnpm乱杀yarn,npm</title>
    <url>/2023/12/13/pnpm%E4%B9%B1%E6%9D%80yarn-npm/</url>
    <content><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a><strong>1 引言</strong></h2><p>  平时在项目开发中，经常用到npm、pnpm、yarn这些来安装包，但是它们之间到底有什么区别呢，一直没太搞明白。</p>
<p>  我只知道他们都是可以从npm官网上下载包，安装完包咱们就可以写代码了，其他的不觉明历，所以认为需要总结下。</p>
<h2 id="2-npm"><a href="#2-npm" class="headerlink" title="2 npm"></a><strong>2 npm</strong></h2><p>  npm（Node Package Manager）是Node.js的默认包管理器。它是一个成熟、广泛使用的工具，有着大量的开源包。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li><p>默认随Node.js一起安装，无需额外配置。</p>
</li>
<li><p>提供了庞大的包生态系统，有大量的第三方包可用。</p>
</li>
<li><p>默认将依赖项安装到项目的<code>node_modules</code>目录中。</p>
</li>
</ul>
<h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>​	1.  依赖没有共用。假如A B C三个包有相同的依赖D，执行npm install时D会被重复下载3次。随着项目越来越复杂，像D这样的包会越来越多，大量的冗余会快速消耗我们的磁盘空间。</p>
<p>​	2.  嵌套层级过深。windows的文件路径最长是260个字符，随着递归安装依赖，嵌套可能会超过windows路径的长度限制，导致依赖安装失败。</p>
<h2 id="3-yarn"><a href="#3-yarn" class="headerlink" title="3 yarn"></a><strong>3 yarn</strong></h2><p>yarn 是由Facebook提供的包管理工具，旨在提高性能和安全性。</p>
<ul>
<li>并行下载、离线安装，提高安装速度。</li>
<li>锁定版本以确保不同环境中获得相同的依赖版本。</li>
<li>yarn针对于npm把所有嵌套的依赖直接拉平，这样就不会触发window的文件路径限制，也解决了依赖包重复的问题。</li>
</ul>
<h3 id="存在问题-1"><a href="#存在问题-1" class="headerlink" title="存在问题"></a>存在问题</h3><ol>
<li>依赖分身：有的包依然有node_modules，没有完全拉平。(当两个包A(C v1),B(C v2)所依赖的C版本不一样时，A,B共用C的版本不一致，只能提一个到第一层级)</li>
<li>幽灵依赖：因为所有依赖都被拉到同一层级，npm v5也有此类情况。（我其实只依赖了koa这一个包，但是yarn把所有依赖包都拉平了。项目没有依赖xxx，但是可以直接使用xxx这个包，因为koa会依赖xxx。如果有一天koa去掉了这个包的依赖，而我们的项目使用了xxx就跑不起来了）</li>
</ol>
<h2 id="4-pnpm"><a href="#4-pnpm" class="headerlink" title="4 pnpm"></a>4 <strong>pnpm</strong></h2><p>pnpm 是一种较新的包管理工具，旨在解决npm中的依赖项重复安装的问题。</p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>所有的文件在磁盘中只存在一处。当安装包的时候，所有的文件会被硬链接。这样不会消耗额外的磁盘空间，而且多个项目可以共享同一个依赖。</li>
<li>解决了npm，yarn的依赖分身问题。</li>
<li>项目的node_modules文件夹下除了.pnpm这个隐藏文件夹之外，只会出现package.json里需要的依赖，从而避免了npm或yarn的幽灵依赖问题。</li>
</ul>
<h2 id="5-比较"><a href="#5-比较" class="headerlink" title="5 比较"></a><strong>5 比较</strong></h2><h3 id="5-1-安装速度"><a href="#5-1-安装速度" class="headerlink" title="5.1 安装速度"></a>5.1 安装速度</h3><ul>
<li><strong>npm：</strong> 相对较慢，特别是在有大量依赖项的项目中。</li>
<li><strong>pnpm：</strong> 安装速度较快，尤其在多项目工作区中。</li>
<li><strong>yarn：</strong> 使用并行下载，速度相对较快。</li>
</ul>
<h3 id="5-2-磁盘空间占用"><a href="#5-2-磁盘空间占用" class="headerlink" title="5.2 磁盘空间占用"></a>5.2 磁盘空间占用</h3><ul>
<li><strong>npm：</strong> 默认将依赖项复制到项目的<code>node_modules</code>目录，可能导致重复占用磁盘空间</li>
<li><strong>pnpm：</strong> 通过符号链接共享依赖项，减少了磁盘空间占用</li>
<li><strong>yarn：</strong> 在离线模式下，通过缓存机制减少了磁盘空间占用(本地缓存每个下载过的包，再次使用无需重复下载)</li>
</ul>
<h3 id="5-3-并发安装"><a href="#5-3-并发安装" class="headerlink" title="5.3 并发安装"></a>5.3 并发安装</h3><ul>
<li><strong>npm：</strong> 不支持并发安装，会一个一个地安装依赖项。</li>
<li><strong>pnpm：</strong> 支持并发安装，提高了安装速度。</li>
<li><strong>yarn：</strong> 使用并行下载，速度相对较快。</li>
</ul>
<h3 id="5-4-稳定性"><a href="#5-4-稳定性" class="headerlink" title="5.4 稳定性"></a>5.4 稳定性</h3><ul>
<li><strong>npm：</strong> 稳定、成熟，广泛使用。</li>
<li><strong>pnpm：</strong> 相对较新，但社区正在不断发展。</li>
<li><strong>yarn：</strong> 由Facebook维护，稳定性较高。</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><p><code>npm</code>是默认选择，稳定且易于使用。<code>pnpm</code>通过共享依赖项减少磁盘空间占用，适用于需要优化空间的项目。<code>yarn</code>通过并行下载和版本锁定提供了更快、更可靠的安装。</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>script标签中defer,async的区别</title>
    <url>/2024/01/09/script%E6%A0%87%E7%AD%BE%E4%B8%ADdefer-async%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>&lt; script &gt;标签中的 async 和 defer 属性都是用来控制外部 JavaScript 文件的加载和执行时机的。它们的目的是优化页面加载性能，避免脚本的加载和执行阻塞页面的渲染过程。下面是 async 和 defer 两个属性的用途和它们之间的区别。</p>
<h3 id="Async-（异步）"><a href="#Async-（异步）" class="headerlink" title="Async （异步）"></a>Async （异步）</h3><p>当在＜ script &gt;标签中使用 async 属性时，浏览器会在后台异步加载 JavaScript 文件，不会阻塞 HTML 文档的解析。即使 JavaScript 文件下载完成，只要 HTML 解析还未结束，脚本不会立即执行。只有在文件加载完成后，它才会尽快执行，无论 HTML 解析是否完成。这意味着 async 脚本的执行时机是不确定的，可能会在文档解析完成前或完成后。</p>
<h3 id="Defer-（延迟）"><a href="#Defer-（延迟）" class="headerlink" title="Defer （延迟）"></a>Defer （延迟）</h3><p>当你在＜ script &gt;标签中使用 defer 属性时，浏览器也会异步加载 JavaScript 文件，但会延迟执行这个脚本，直到整个页面的 HTML 都解析完成。这确保了脚本只会在文档解析完成之后、在 DOMContentLoaded 事件之前执行。如果有多个带有 defer 属性的脚本，它们将按照在文档中出现的顺序被执行。</p>
<p>区别<br>执行时机：</p>
<p>async : 一旦脚本异步加载完成，就会尽快执行，这可能在 HTML 文档解析完成前或完成后。</p>
<p>defer : 脚本会在整个 HTML 文档解析完成后、 DOMContentLoaded 事件触发前按顺序执行。</p>
<p>脚本顺序：</p>
<p>async : 多个带 async 的脚本不能保证按照它们在页面中出现的顺序执行。</p>
<p>defer : 多个带 defer 的脚本会按照它们在页面中出现的顺序执行。</p>
<p>使用 async 或 defer 的最佳实践取决于脚本的性质和需求。如果脚本相互独立，或者其执行顺序无关紧要，则可以使用 async 。如果脚本的执行需要保证顺序，尤其是当脚本之间有依赖时，应当使用 defer 。对于那些需要尽快加载并执行的脚本（例如性能监测脚本），可能不适合使用这两个属性。</p>
<script>标签中的async和defer属性都是用来控制外部JavaScript文件的加载和执行时机的。它们的目的是优化页面加载性能，避免脚本的加载和执行阻塞页面的渲染过程。下面是async和defer两个属性的用途和它们之间的区别。

</script>]]></content>
      <tags>
        <tag>前端充电宝</tag>
      </tags>
  </entry>
  <entry>
    <title>typeof和instanceof的区别</title>
    <url>/2023/11/30/typeof%E5%92%8Cinstanceof%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="一、typeof"><a href="#一、typeof" class="headerlink" title="一、typeof"></a>一、typeof</h2><p><code>typeof</code> 操作符返回一个字符串，表示未经计算的操作数的类型</p>
<p>使用方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">typeof operand<br>typeof(operand)<br></code></pre></td></tr></table></figure>

<p><code>operand</code>表示对象或原始值的表达式，其类型将被返回</p>
<p>举例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">typeof 1 // &#x27;number&#x27;<br>typeof &#x27;1&#x27; // &#x27;string&#x27;<br>typeof undefined // &#x27;undefined&#x27;<br>typeof true // &#x27;boolean&#x27;<br>typeof Symbol() // &#x27;symbol&#x27;<br>typeof null // &#x27;object&#x27;<br>typeof [] // &#x27;object&#x27;<br>typeof &#123;&#125; // &#x27;object&#x27;<br>typeof console // &#x27;object&#x27;<br>typeof console.log // &#x27;function&#x27;<br></code></pre></td></tr></table></figure>

<p>从上面例子，前6个都是基础数据类型。虽然<code>typeof null</code>为<code>object</code>，但这只是<code>JavaScript</code> 存在的一个悠久 <code>Bug</code>，不代表<code>null</code>就是引用数据类型，并且<code>null</code>本身也不是对象</p>
<p>所以，<code>null</code>在 <code>typeof</code>之后返回的是有问题的结果，不能作为判断<code>null</code>的方法。如果你需要在 <code>if</code> 语句中判断是否为 <code>null</code>，直接通过<code>===null</code>来判断就好</p>
<p>同时，可以发现引用类型数据，用<code>typeof</code>来判断的话，除了<code>function</code>会被识别出来之外，其余的都输出<code>object</code></p>
<p>如果我们想要判断一个变量是否存在，可以使用<code>typeof</code>：(不能使用<code>if(a)</code>， 若<code>a</code>未声明，则报错)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">if(typeof a != &#x27;undefined&#x27;)&#123;<br>    //变量存在<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="二、instanceof"><a href="#二、instanceof" class="headerlink" title="二、instanceof"></a>二、instanceof</h2><p><code>instanceof</code> 运算符用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</p>
<p>使用如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">object instanceof constructor<br></code></pre></td></tr></table></figure>

<p><code>object</code>为实例对象，<code>constructor</code>为构造函数</p>
<p>构造函数通过<code>new</code>可以实例对象，<code>instanceof</code>能判断这个对象是否是之前那个构造函数生成的对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 定义构建函数<br>let Car = function() &#123;&#125;<br>let benz = new Car()<br>benz instanceof Car // true<br>let car = new String(&#x27;xxx&#x27;)<br>car instanceof String // true<br>let str = &#x27;xxx&#x27;<br>str instanceof String // false<br></code></pre></td></tr></table></figure>

<p>关于<code>instanceof</code>的实现原理，可以参考下面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">function myInstanceof(left, right) &#123;<br>    // 这里先用typeof来判断基础数据类型，如果是，直接返回false<br>    if(typeof left !== &#x27;object&#x27; || left === null) return false;<br>    // getProtypeOf是Object对象自带的API，能够拿到参数的原型对象<br>    let proto = Object.getPrototypeOf(left);<br>    while(true) &#123;                  <br>        if(proto === null) return false;<br>        if(proto === right.prototype) return true;//找到相同原型对象，返回true<br>        proto = Object.getPrototypeof(proto);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>也就是顺着原型链去找，直到找到相同的原型对象，返回<code>true</code>，否则为<code>false</code></p>
<h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><p><code>typeof</code>与<code>instanceof</code>都是判断数据类型的方法，区别如下：</p>
<ul>
<li><code>typeof</code>会返回一个变量的基本类型，<code>instanceof</code>返回的是一个布尔值</li>
<li><code>instanceof</code> 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li>
<li>而<code>typeof</code> 也存在弊端，它虽然可以判断基础数据类型（<code>null</code> 除外），但是引用数据类型中，除了<code>function</code> 类型以外，其他的也无法判断</li>
</ul>
<p>可以看到，上述两种方法都有弊端，并不能满足所有场景的需求</p>
<p>如果需要通用检测数据类型，可以采用<code>Object.prototype.toString</code>，调用该方法，统一返回格式<code>“[object Xxx]”</code>的字符串</p>
<p>如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Object.prototype.toString(&#123;&#125;)       // &quot;[object Object]&quot;<br>Object.prototype.toString.call(&#123;&#125;)  // 同上结果，加上call也ok<br>Object.prototype.toString.call(1)    // &quot;[object Number]&quot;<br>Object.prototype.toString.call(&#x27;1&#x27;)  // &quot;[object String]&quot;<br>Object.prototype.toString.call(true)  // &quot;[object Boolean]&quot;<br>Object.prototype.toString.call(function()&#123;&#125;)  // &quot;[object Function]&quot;<br>Object.prototype.toString.call(null)   //&quot;[object Null]&quot;<br>Object.prototype.toString.call(undefined) //&quot;[object Undefined]&quot;<br>Object.prototype.toString.call(/123/g)    //&quot;[object RegExp]&quot;<br>Object.prototype.toString.call(new Date()) //&quot;[object Date]&quot;<br>Object.prototype.toString.call([])       //&quot;[object Array]&quot;<br>Object.prototype.toString.call(document)  //&quot;[object HTMLDocument]&quot;<br>Object.prototype.toString.call(window)   //&quot;[object Window]&quot;<br></code></pre></td></tr></table></figure>

<p>了解了<code>toString</code>的基本用法，下面就实现一个全局通用的数据类型判断方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">function getType(obj)&#123;<br>  let type  = typeof obj;<br>  if (type !== &quot;object&quot;) &#123;    // 先进行typeof判断，如果是基础数据类型，直接返回<br>    return type;<br>  &#125;<br>  // 对于typeof返回结果是object的，再进行如下的判断，正则返回结果<br>  return Object.prototype.toString.call(obj).replace(/^\[object (\S+)\]$/, &#x27;$1&#x27;); <br>&#125;<br></code></pre></td></tr></table></figure>

<p>使用如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">getType([])     // &quot;Array&quot; typeof []是object，因此toString返回<br>getType(&#x27;123&#x27;)  // &quot;string&quot; typeof 直接返回<br>getType(window) // &quot;Window&quot; toString返回<br>getType(null)   // &quot;Null&quot;首字母大写，typeof null是object，需toString来判断<br>getType(undefined)   // &quot;undefined&quot; typeof 直接返回<br>getType()            // &quot;undefined&quot; typeof 直接返回<br>getType(function()&#123;&#125;) // &quot;function&quot; typeof能判断，因此首字母小写<br>getType(/123/g)      //&quot;RegExp&quot; toString返回<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>type和interface的区别</title>
    <url>/2023/11/23/type%E5%92%8Cinterface%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>在 TypeScript 中，type 和 interface 这两个概念比较容易混淆，它们都可以用来表示 接口，但是在实际使用上会存在一些差异。</p>
<h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><p>1、type（类型别名）</p>
<p>用来给一个类型起新名字，使用 type 创建类型别名。类型别名不仅可以用来表示基本类型，还可以用来表示对象类型、联合类型、元组和交集。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">type userName = string;   // 基本类型<br>type userMsg = string | number;   // 联合类型<br><br>// 对象类型<br>type Person = &#123;<br>    name: userName;<br>    age: number;<br>&#125;;<br><br>// 使用Person类型<br>let user: Person = &#123;<br>    name: &quot;leo&quot;,<br>    age: 18<br>&#125;;<br></code></pre></td></tr></table></figure>


<p>2、interface（接口）<br>接口是命名数据结构（例如对象）的另一种方式；与 type 不同，interface 仅限于描述对象类型。接口的声明语法也不同于类型别名的声明语法。如将上面的类型别名 Person 重写为接口声明如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">interface Person &#123;<br>    name: userName;<br>    age: number;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="二、相同点"><a href="#二、相同点" class="headerlink" title="二、相同点"></a>二、相同点</h3><p>1、都可以用来定义对象和函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">type Position = &#123;<br>  x: number;<br>  y: number;<br>&#125;;<br><br>type SetPosition = (x: number, y: number) =&gt; void;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"><br>interface Position &#123;<br>  x: number;<br>  y: number;<br>&#125;<br><br>interface SetPosition &#123;<br>  (x: number, y: number): void;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>interface SetPosition {<br>  (x: number, y: number): void;<br>}<br>2、都可以实现继承<br>type 和 interface 并不互斥。type 可以继承 interface，反之亦然。只是在实现形式上，稍微有些区别。</p>
<p>type</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// type 继承 type<br>type Person &#123;<br>    name: string<br>&#125;<br><br>type Student = Person &amp; &#123; stuId: number &#125;<br><br>// type 继承 interface<br>interface Person &#123;<br>    name: string<br>&#125;<br><br>type Student = Person &amp; &#123; stuId: number &#125;<br></code></pre></td></tr></table></figure>

<p>interface</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// interface 继承 interface<br>interface Person &#123;<br>    name: string<br>&#125;<br><br>interface Student extends Person &#123; stuId: number &#125;<br><br>// interface 继承 type<br>type Person &#123;<br>    name: string<br>&#125;<br><br>interface Student extends Person &#123; stuId: number &#125;<br></code></pre></td></tr></table></figure>


<p>小结：对于 interface 来说，继承是通过 extends 实现的；而 type 是通过 &amp; 来实现的，也可以叫做交叉类型。 </p>
<h3 id="三、不同点"><a href="#三、不同点" class="headerlink" title="三、不同点"></a>三、不同点</h3><p>1、type 可以做到而 interface 不能做到</p>
<p>type 可以声明基本类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">type userName = string;<br></code></pre></td></tr></table></figure>


<p>type 可以声明联合类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">type userMsg = string | number; <br></code></pre></td></tr></table></figure>


<p>type 可以声明元组类型。、</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">type Data = [number, string];<br></code></pre></td></tr></table></figure>


<p>type 可以通过 typeof 操作符来声明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">type myType = typeof someObj;<br></code></pre></td></tr></table></figure>

<p>2、interface 可以做到而 type 不能做到</p>
<p>interface 可以声明合并。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">interface test &#123;<br>    name: string<br>&#125;<br>interface test &#123;<br>    age: number<br>&#125;<br>    <br>/*<br>    test实际为 &#123;<br>        name: string<br>        age: number<br>    &#125;<br>*/<br></code></pre></td></tr></table></figure>


<p>如果是 type 的话，就会报重复定义的警告，因此是无法实现声明合并的。</p>
<h3 id="四、使用建议"><a href="#四、使用建议" class="headerlink" title="四、使用建议"></a>四、使用建议</h3><p>1、官方推荐使用 interface，其他无法满足需求的情况下用 type。但是因为联合类型和交叉类型是比较常用的，所以避免不了大量使用 type 的场景，一些复杂类型也需要通过组装后形成类型别名来使用。</p>
<p>2、如果想保持代码统一，还是可选择使用 type。通过上面的对比，type 其实可涵盖 interface 的大部分场景。</p>
<p>3、编写三方库时使推荐使用 interface，其更加灵活自动的类型合并可应对未知的复杂使用场景。</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>vite和webpack的区别</title>
    <url>/2023/11/06/vite%E5%92%8Cwebpack%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="Vite和webpack的区别"><a href="#Vite和webpack的区别" class="headerlink" title="** Vite和webpack的区别**"></a>** Vite和webpack的区别**</h2><p>Vite和webpack是两个常用的前端构建工具，它们在功能和使用方式上有一些区别。接下来我将详细介绍Vite和webpack的区别</p>
<h3 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h3><p>Vite使用了一种新的构建方式，称为「原生ESM」构建。它利用浏览器原生支持ES模块的能力，通过将每个模块作为一个单独的文件进行构建，而不是像webpack那样将所有模块打包成一个文件。这种方式可以提供更快的冷启动和热更新速度。</p>
<p>webpack则是使用传统的「Bundler」构建方式，它将所有模块打包成一个或多个bundle文件，并使用代码分割和懒加载等技术来优化加载性能。</p>
<h3 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a>开发服务器</h3><p>Vite使用了一个基于ES模块的开发服务器，它利用浏览器原生支持ES模块的特性，可以在开发过程中实现快速的冷启动和热更新。Vite在启动开发服务器时，会根据需要动态地生成和提供每个模块的依赖关系，而不是像webpack那样提前构建好整个应用的依赖关系。</p>
<p>webpack也提供了一个开发服务器，但它是基于传统的构建方式，需要提前将所有模块打包成bundle文件，然后在浏览器中通过HTTP请求获取这些文件。</p>
<h3 id="构建速度"><a href="#构建速度" class="headerlink" title="构建速度"></a>构建速度</h3><p>由于Vite利用了浏览器原生支持ES模块的能力，并采用了「原生ESM」构建方式，所以它在冷启动和热更新时的速度比webpack更快。Vite可以在浏览器中动态地解析和编译模块，而不需要像webpack那样在每次修改代码后重新构建整个应用。</p>
<p>webpack在构建大型应用时可能会比较慢，因为它需要分析和处理大量的模块依赖关系，并生成相应的bundle文件。</p>
<h3 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h3><p>webpack是一个成熟的构建工具，拥有庞大的生态系统和丰富的插件支持。它可以处理各种类型的资源文件，并提供了许多功能强大的插件来优化和扩展构建过程。</p>
<p>Vite相对较新，生态系统相对较小，但它可以与现有的构建工具和库（如Rollup和webpack）进行集成，可以使用现有的webpack插件来扩展Vite的功能。</p>
<h3 id="服务启动方式和使用复杂度"><a href="#服务启动方式和使用复杂度" class="headerlink" title="服务启动方式和使用复杂度"></a>服务启动方式和使用复杂度</h3><p>webpack是先打包再启动开发服务器，vite是直接启动开发服务器，然后按需编译依赖文件。</p>
<p>vite使用复杂度介于Parcel和Webpack的中间，只是暴露了极少数的配置项和pluging接口，既不会像Parcel一样配置不灵活，又不会像Webpack一样需要了解庞大的loader、plugin生态，灵活适中、复杂度适中。</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3-pinia</title>
    <url>/2023/08/29/vue3-pinia/</url>
    <content><![CDATA[<h1 id="Vue3-状态管理-Pinia"><a href="#Vue3-状态管理-Pinia" class="headerlink" title="Vue3 状态管理 - Pinia"></a>Vue3 状态管理 - Pinia</h1><h2 id="1-什么是Pinia"><a href="#1-什么是Pinia" class="headerlink" title="1. 什么是Pinia"></a>1. 什么是Pinia</h2><p>Pinia 是 Vue 的专属的最新状态管理库 ，是 Vuex 状态管理工具的替代品<br><img src="/2023/08/29/vue3-pinia/31.png" alt="image.png"></p>
<h2 id="2-手动添加Pinia到Vue项目"><a href="#2-手动添加Pinia到Vue项目" class="headerlink" title="2. 手动添加Pinia到Vue项目"></a>2. 手动添加Pinia到Vue项目</h2><p>后面在实际开发项目的时候，Pinia可以在项目创建时自动添加，现在我们初次学习，从零开始：</p>
<ol>
<li>使用 Vite 创建一个空的 Vue3项目</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm init vite@latest<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>按照官方文档安装 pinia 到项目中</li>
</ol>
<h2 id="3-Pinia基础使用"><a href="#3-Pinia基础使用" class="headerlink" title="3. Pinia基础使用"></a>3. Pinia基础使用</h2><ol>
<li>定义store</li>
<li>组件使用store</li>
</ol>
<p><img src="/2023/08/29/vue3-pinia/32.png" alt="image.png"></p>
<h2 id="4-getters实现"><a href="#4-getters实现" class="headerlink" title="4. getters实现"></a>4. getters实现</h2><p>Pinia中的 getters 直接使用 computed函数 进行模拟, 组件中需要使用需要把 getters return出去</p>
<p><img src="/2023/08/29/vue3-pinia/33.png" alt="image.png"></p>
<h2 id="5-action异步实现"><a href="#5-action异步实现" class="headerlink" title="5. action异步实现"></a>5. action异步实现</h2><p>方式：异步action函数的写法和组件中获取异步数据的写法完全一致</p>
<ul>
<li><p>接口地址：<a href="http://geek.itheima.net/v1_0/channels">http://geek.itheima.net/v1_0/channels</a></p>
</li>
<li><p>请求方式：get</p>
</li>
<li><p>请求参数：无</p>
</li>
</ul>
<p><img src="/2023/08/29/vue3-pinia/34.png" alt="image.png"></p>
<p>需求：在Pinia中获取频道列表数据并把数据渲染App组件的模板中<br><img src="/2023/08/29/vue3-pinia/35.png" alt="image.png"></p>
<h2 id="6-storeToRefs工具函数"><a href="#6-storeToRefs工具函数" class="headerlink" title="6. storeToRefs工具函数"></a>6. storeToRefs工具函数</h2><p>使用storeToRefs函数可以辅助保持数据（state + getter）的响应式解构<br><img src="/2023/08/29/vue3-pinia/36.png" alt="image.png"></p>
<h2 id="7-Pinia的调试"><a href="#7-Pinia的调试" class="headerlink" title="7. Pinia的调试"></a>7. Pinia的调试</h2><p>Vue官方的 dev-tools 调试工具 对 Pinia直接支持，可以直接进行调试<br><img src="/2023/08/29/vue3-pinia/37.png" alt="image.png"></p>
<h2 id="8-Pinia持久化插件"><a href="#8-Pinia持久化插件" class="headerlink" title="8. Pinia持久化插件"></a>8. Pinia持久化插件</h2><p>官方文档：<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p>
<ol>
<li>安装插件 pinia-plugin-persistedstate</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">npm i pinia-plugin-persistedstate<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>使用 main.js</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> persist <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia-plugin-persistedstate&#x27;</span><br>...<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPinia</span>().<span class="hljs-title function_">use</span>(persist))<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>配置 store&#x2F;counter.js</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">return</span> &#123;<br>    count,<br>    doubleCount,<br>    increment<br>  &#125;<br>&#125;, &#123;<br>  <span class="hljs-attr">persist</span>: <span class="hljs-literal">true</span><br>&#125;)<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>其他配置，看官网文档即可</li>
</ol>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3插槽slot用法汇总</title>
    <url>/2023/09/14/vue3%E6%8F%92%E6%A7%BDslot%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>Vue中的插槽相信使用过Vue的小伙伴或多或少的都用过，但是你是否了解它全部用法呢？本篇文章整理总结了Vue3中插槽的全部用法用于查漏补缺。</p>
<h2 id="什么是插槽"><a href="#什么是插槽" class="headerlink" title="什么是插槽"></a>什么是插槽</h2><p>简单来说就是子组件中的提供给父组件使用的一个<code>坑位</code>，用<code>&lt;slot&gt;&lt;/slot&gt;</code> 表示，父组件可以在这个坑位中填充任何模板代码然后子组件中<code>&lt;slot&gt;&lt;/slot&gt;</code>就会被替换成这些内容。比如一个最简单插槽例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//父组件<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;Child&gt;Hello Juejin&lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>&lt;/script&gt;<br><br>//子组件Child<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;p&gt;1&lt;/p&gt;<br>        &lt;slot /&gt;<br>        &lt;p&gt;2&lt;/p&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p>子组件中的<code>&lt;slot /&gt;</code> 便是父组件放在子组件标签<code>&lt;Child&gt;</code>之间的内容。当然这之间你可以传入任何代码片段，都会被放到<code>&lt;slot /&gt;</code>这个位置。</p>
<p><img src="/2023/09/14/vue3%E6%8F%92%E6%A7%BDslot%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/image-20230914083639908.png" alt="image-20230914083639908"></p>
<p>同样的你也可以在标签<code>&lt;Child&gt;</code>之间放入变量，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//父组件<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;Child&gt;&#123;&#123; msg &#125;&#125;&lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>import Child from &#x27;./Child.vue&#x27;<br>const msg = ref(&#x27;Hello Juejin&#x27;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>先解释一下后面频繁出现的两个词 <code>插槽</code>和<code>插槽内容</code>，防止后面阅读搞混了：</p>
<p><img src="/2023/09/14/vue3%E6%8F%92%E6%A7%BDslot%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/image-20230914083727368.png" alt="image-20230914083727368"></p>
<p>同样的 <code>插槽</code>表示的就是这个<code>msg</code>变量。所以子组件 <code>插槽</code>是可以访问到父组件的数据作用域，而<code>插槽内容</code>是无法访问子组件的数据（即父组件中两个<code>&lt;Child&gt;</code>之间是不能使用子组件中的数据的），这就是所谓的渲染作用域。后面会介绍<code>插槽</code>向<code>插槽内容</code>传参的方式</p>
<h2 id="默认内容"><a href="#默认内容" class="headerlink" title="默认内容"></a>默认内容</h2><p>在父组件没有提供任何<code>插槽内容</code>的时候，我们是可以为子组件的<code>插槽</code>指定默认内容的，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//子组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;slot&gt;我是默认内容&lt;/slot&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>//父组件1<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;Child&gt;&lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>&lt;/script&gt;<br><br>//父组件2<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;Child&gt;Hello Juejin&lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>此时<code>父组件1</code>展示默认内容</p>
<p><img src="/2023/09/14/vue3%E6%8F%92%E6%A7%BDslot%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/image-20230914083758556.png" alt="image-20230914083758556"></p>
<p><code>父组件2</code>展示提供的内容</p>
<p><img src="/2023/09/14/vue3%E6%8F%92%E6%A7%BDslot%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/image-20230914083827288.png" alt="image-20230914083827288"></p>
<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>很多时候一个 <code>插槽</code>满足不了我们的需求，我们需要多个 <code>插槽</code>。于是就有了<code>具名插槽</code>，就是具有名字的 <code>插槽</code>。简单来说这个<code>具名插槽</code>的目的就是让一个萝卜一个坑，让它们呆在该呆的位置去。比如带 <code>name</code> 的插槽<code> &lt;slot name=&quot;xx&quot;&gt;</code>被称为具名插槽。没有提供 <code>name</code> 的 <code>&lt;slot&gt;</code> 会隐式地命名为“default”。在父组件中可以使用<code>v-slot:xxx</code>（可简写为<code>#xxx</code>） 指令的 <code>&lt;template&gt;</code> 元素将目标插槽的名字传下去匹配对应 <code>插槽</code>。比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//子组件<br><br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;!-- 大萝卜 --&gt;<br>        &lt;div&gt;<br>            &lt;slot name=&quot;bigTurnip&quot;&gt;&lt;/slot&gt;<br>        &lt;/div&gt;<br>        &lt;!-- 小萝卜 --&gt;<br>        &lt;div&gt;<br>            &lt;slot name=&quot;smallTurnip&quot;&gt;&lt;/slot&gt;<br>        &lt;/div&gt;<br>        &lt;!-- 中萝卜 --&gt;<br>        &lt;div&gt;<br>            &lt;slot name=&quot;midTurnip&quot;&gt;&lt;/slot&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>//父组件<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;Child&gt;<br>      &lt;!-- #smallTurnip 为v-slot:smallTurnip缩写 --&gt;<br>      &lt;template #smallTurnip&gt;<br>        小萝卜<br>      &lt;/template&gt;<br>      &lt;template #midTurnip&gt;<br>        中萝卜<br>      &lt;/template&gt;<br>      &lt;template #bigTurnip&gt;<br>        大萝卜<br>      &lt;/template&gt;<br>    &lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/09/14/vue3%E6%8F%92%E6%A7%BDslot%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/image-20230914083929664.png" alt="image-20230914083929664"></p>
<p>所以父组件中无需在意顺序，只需要写好模板命好名，它就会自动去到它所对应的位置。</p>
<h2 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h2><p>动态插槽名就是插槽名变成了变量的形式，我们可以随时修改这个变量从而展示不同的效果。它的写法是<code>v-slot:[变量名]</code>或者缩写为<code>#[变量名]</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//父组件<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;Child&gt;<br>      &lt;!-- 等同于#smallTurnip --&gt;<br>      &lt;template #[slotName]&gt;<br>        小萝卜<br>      &lt;/template&gt;<br>      &lt;template #midTurnip&gt;<br>        中萝卜<br>      &lt;/template&gt;<br>      &lt;template #bigTurnip&gt;<br>        大萝卜<br>      &lt;/template&gt;<br>    &lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>import Child from &#x27;./Child.vue&#x27;<br>const slotName = ref(&#x27;smallTurnip&#x27;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><h3 id="作用域插槽-1"><a href="#作用域插槽-1" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>上面说过<code>插槽内容</code>是无法访问子组件的数据的，但是如果我们想在<code>插槽内容</code>访问子组件的状态该怎么办呢？</p>
<p>其实<code>插槽</code>可以像对组件传递 props 那样，在<code>slot</code>标签绑定属性从而传递给父组件中的<code>插槽内容</code>。首先来看下默认插槽的传值方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//子组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;slot personName=&quot;xiaoyue&quot; age=&quot;18&quot;&gt;&lt;/slot&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>//父组件<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;Child v-slot=&quot;slotProps&quot;&gt;<br>      My name is &#123;&#123; slotProps.personName &#125;&#125; and I am &#123;&#123; slotProps.age &#125;&#125; years old this year<br>    &lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>你还可以以结构的形式获取<code>slot</code>提供的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;Child v-slot=&quot;&#123; personName, age &#125;&quot;&gt;<br>      My name is &#123;&#123; personName &#125;&#125; and I am &#123;&#123; age &#125;&#125; years old this year<br>    &lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/09/14/vue3%E6%8F%92%E6%A7%BDslot%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/image-20230914084026259.png" alt="image-20230914084026259"></p>
<p>注意不能绑定<code>name</code>属性，因为你绑定了<code>name</code>它就成了具名插槽了。同样具名插槽中的<code>name</code>属性也不会传递给<code>插槽内容</code>。因为传递的参数只能在<code>插槽内容</code>中使用，所以这类能够接受参数的插槽就被称为了<code>作用域插槽</code>。</p>
<h3 id="具名作用域插槽"><a href="#具名作用域插槽" class="headerlink" title="具名作用域插槽"></a>具名作用域插槽</h3><p>下面再看下<code>具名作用域插槽</code>它的传参方式。它接收参数的方式是通过<code>template</code>标签的指令<code>v-slot</code>的值获取的，所以可以缩写成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//父组件<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;Child&gt;<br>      &lt;template #bigTurnip=&quot;bigTurnipProps&quot;&gt;<br>        &#123;&#123; bigTurnipProps.message &#125;&#125;<br>      &lt;/template&gt;<br>    &lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>&lt;/script&gt;<br><br>//子组件Child.vue<br><br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;!-- 大萝卜 --&gt;<br>        &lt;div&gt;<br>            &lt;slot name=&quot;bigTurnip&quot; message=&quot;我是萝北&quot;&gt;&lt;/slot&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/09/14/vue3%E6%8F%92%E6%A7%BDslot%E7%94%A8%E6%B3%95%E6%B1%87%E6%80%BB/image-20230914084054462.png" alt="image-20230914084054462"></p>
<p>这类插槽便是<code>具名作用域插槽</code>啦</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3项目rem自适应大小如何实现</title>
    <url>/2023/09/09/vue3%E9%A1%B9%E7%9B%AErem%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="rem自适应"><a href="#rem自适应" class="headerlink" title="rem自适应"></a>rem自适应</h2><p>随着现在互联网设备的日益更新，各大尺寸的屏幕参差不穷</p>
<p>导致我们的布局在某些小屏或者大屏上与UI的表现并不一致</p>
<p>所以，很多人寻求各种解决方案，我们现在的很多移动端框架都是支持了的，包括小程序，很多都采用了rpx的方式，这里不去深究它们的实现方案。</p>
<p>像手机淘宝网，就是在根标签设置font-size，然后使用rem去设置尺寸大小，它们可能有更精细化的优化处理，这里就只实现普通的方法。</p>
<p><img src="/2023/09/09/vue3%E9%A1%B9%E7%9B%AErem%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/640.png" alt="图片">淘宝示例图如上</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h4 id="获取当前的设备宽度"><a href="#获取当前的设备宽度" class="headerlink" title="获取当前的设备宽度"></a>获取当前的设备宽度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const view_width = document.getElementsByTagName(&#x27;html&#x27;)[0].getBoundingClientRect().width;<br></code></pre></td></tr></table></figure>

<h4 id="计算rem的值"><a href="#计算rem的值" class="headerlink" title="计算rem的值"></a>计算rem的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 750 是设计稿的宽度 ， 按设计稿调整<br>// 乘以100 是为了具体宽度值书写不会太大<br>const fontSize = fontSize = 100 * (view_width / 750) + &#x27;px&#x27;<br></code></pre></td></tr></table></figure>

<h4 id="赋值到根标签"><a href="#赋值到根标签" class="headerlink" title="赋值到根标签"></a>赋值到根标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const _html = document.getElementsByTagName(&#x27;html&#x27;)[0];<br>_html.style.fontSize =  fontSize<br></code></pre></td></tr></table></figure>

<h4 id="监听宽度变化"><a href="#监听宽度变化" class="headerlink" title="监听宽度变化"></a>监听宽度变化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// onWindowResize 即上述处理过程<br>window.addEventListener(&#x27;resize&#x27;, onWindowResize)<br></code></pre></td></tr></table></figure>

<h4 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/*<br>* 设计稿盒子宽100px<br>* 高100px<br>* 字体30px<br>*/<br>.box&#123;<br>  width:1rem;<br>  height:1rem;<br>  font-size:0.3rem;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="完整示例（Vue3）"><a href="#完整示例（Vue3）" class="headerlink" title="完整示例（Vue3）"></a>完整示例（Vue3）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script setup&gt;<br>import &#123; onMounted, onUnmounted, ref &#125; from &quot;vue&quot;;<br><br>const flag = ref(false)<br><br>// 防止频繁触发<br>const onWindowResize = () =&gt; &#123;<br>  if (!flag.value) &#123;<br>    flag.value = true<br>    setTimeout(() =&gt; &#123;<br>      initFontSize()<br>      flag.value = false<br>    &#125;, 300)<br>  &#125;<br>&#125;<br><br>const initFontSize = () =&gt; &#123;<br>  const view_width = document.getElementsByTagName(&#x27;html&#x27;)[0].getBoundingClientRect().width;<br>  const _html = document.getElementsByTagName(&#x27;html&#x27;)[0];<br><br>  _html.style.fontSize = 100 * (view_width / 1280) + &#x27;px&#x27;<br>&#125;<br><br>onMounted(() =&gt; &#123;<br>  initFontSize()<br>  window.addEventListener(&#x27;resize&#x27;, onWindowResize)<br>&#125;)<br><br>onUnmounted(() =&gt; &#123;<br>  window.removeEventListener(&#x27;resize&#x27;, onWindowResize)<br>&#125;)<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>自适应</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day1</title>
    <url>/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/</url>
    <content><![CDATA[<blockquote>
<p>本文是在学习vue的第一天整理的笔记，涵盖知识范围有：vue的基本概念，开发者工具安装，插值表达式，响应式特性，常见指令等。</p>
</blockquote>
<h2 id="Ⅰ、什么是Vue"><a href="#Ⅰ、什么是Vue" class="headerlink" title="Ⅰ、什么是Vue"></a>Ⅰ、什么是Vue</h2><p>概念：Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套 **构建用户界面 ** 的 <strong>渐进式</strong> <strong>框架</strong></p>
<p>Vue2官网：<a href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/</a></p>
<h3 id="1-什么是构建用户界面"><a href="#1-什么是构建用户界面" class="headerlink" title="1.什么是构建用户界面"></a>1.什么是构建用户界面</h3><p><strong>基于数据</strong>渲染出用户可以看到的<strong>界面</strong></p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681875887026.png" alt="68187588702"></p>
<h3 id="2-什么是渐进式"><a href="#2-什么是渐进式" class="headerlink" title="2.什么是渐进式"></a>2.什么是渐进式</h3><p>所谓渐进式就是循序渐进，不一定非得把Vue中的所有API都学完才能开发Vue，可以学一点开发一点</p>
<h4 id="Vue的两种开发方式："><a href="#Vue的两种开发方式：" class="headerlink" title="Vue的两种开发方式："></a>Vue的两种开发方式：</h4><ol>
<li><p>Vue核心包开发</p>
<p>场景：局部模块改造</p>
</li>
<li><p>Vue核心包&amp;Vue插件&amp;工程化</p>
<p>场景：整站开发</p>
</li>
</ol>
<h3 id="3-什么是框架"><a href="#3-什么是框架" class="headerlink" title="3.什么是框架"></a>3.什么是框架</h3><p>所谓框架：就是一套完整的解决方案</p>
<p><strong>For example</strong>	</p>
<p>如果把一个完整的项目比喻为一个装修好的房子，那么框架就是一个毛坯房。</p>
<p>我们只需要在“毛坯房”的基础上，增加功能代码即可。</p>
<p>提到框架，不得不提一下库。</p>
<ul>
<li>库，类似工具箱，是一堆方法的集合，比如 axios、lodash、echarts等</li>
<li>框架，是一套完整的解决方案，实现了大部分功能，我们只需要按照一定的规则去编码即可。</li>
</ul>
<p>下图是 库 和 框架的对比。</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681876620277.png" alt="68187662027"></p>
<p>框架的特点：有一套必须让开发者遵守的<strong>规则</strong>或者<strong>约束</strong></p>
<p>咱们学框架就是学习的这些规则 <a href="https://v2.cn.vuejs.org/">官网</a></p>
<h2 id="Ⅱ、创建Vue实例"><a href="#Ⅱ、创建Vue实例" class="headerlink" title="Ⅱ、创建Vue实例"></a>Ⅱ、创建Vue实例</h2><p><strong>核心步骤（4步）：</strong></p>
<ol>
<li><p>准备容器</p>
</li>
<li><p>引包（官网） — 开发版本&#x2F;生产版本</p>
</li>
<li><p>创建Vue实例  new Vue()</p>
</li>
<li><p>指定配置项，渲染数据</p>
<p>​	el:指定挂载点</p>
<p>​	data提供数据</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681877405007.png" alt="1681877405007"></p>
</li>
</ol>
<h2 id="Ⅲ、插值表达式"><a href="#Ⅲ、插值表达式" class="headerlink" title="Ⅲ、插值表达式 "></a>Ⅲ、插值表达式 "{{}}"</h2><p>插值表达式是一种Vue的模板语法</p>
<p>我们可以用插值表达式渲染出Vue提供的数据</p>
<h3 id="1-作用：利用表达式进行插值，渲染到页面中"><a href="#1-作用：利用表达式进行插值，渲染到页面中" class="headerlink" title="1.作用：利用表达式进行插值，渲染到页面中"></a>1.作用：利用表达式进行插值，渲染到页面中</h3><p>表达式：是可以被求值的代码，JS引擎会讲其计算出一个结果</p>
<p>以下的情况都是表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">money + <span class="hljs-number">100</span><br>money - <span class="hljs-number">100</span><br>money * <span class="hljs-number">10</span><br>money / <span class="hljs-number">10</span> <br>price &gt;= <span class="hljs-number">100</span> ? <span class="hljs-string">&#x27;真贵&#x27;</span>:<span class="hljs-string">&#x27;还行&#x27;</span><br>obj.<span class="hljs-property">name</span><br>arr[<span class="hljs-number">0</span>]<br><span class="hljs-title function_">fn</span>()<br>obj.<span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure>



<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><p>插值表达式语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;h3&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;nickName.toUpperCase()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;age &gt;= 18 ? &#x27;成年&#x27;:&#x27;未成年&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;obj.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;fn()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h3 id="3-错误用法"><a href="#3-错误用法" class="headerlink" title="3.错误用法"></a>3.错误用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>在插值表达式中使用的数据 必须在data中进行了提供<br>&lt;p&gt;&#123;&#123;hobby&#125;&#125;&lt;<span class="hljs-regexp">/p&gt;  /</span><span class="hljs-regexp">/如果在data中不存在 则会报错</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">2.支持的是表达式，而非语句，比如：if   for ...</span><br><span class="hljs-regexp">&lt;p&gt;&#123;&#123;if&#125;&#125;&lt;/</span>p&gt;<br><br><span class="hljs-number">3.</span>不能在标签属性中使用 &#123;&#123;  &#125;&#125; 插值 (插值表达式只能标签中间使用)<br>&lt;p title=<span class="hljs-string">&quot;&#123;&#123;username&#125;&#125;&quot;</span>&gt;我是P标签&lt;/p&gt;<br></code></pre></td></tr></table></figure>



<h2 id="Ⅳ、响应式特性"><a href="#Ⅳ、响应式特性" class="headerlink" title="Ⅳ、响应式特性"></a>Ⅳ、响应式特性</h2><h3 id="1-什么是响应式？"><a href="#1-什么是响应式？" class="headerlink" title="1.什么是响应式？"></a>1.什么是响应式？</h3><p>​	简单理解就是数据变，视图对应变。 </p>
<h3 id="2-如何访问-和-修改-data中的数据（响应式演示）"><a href="#2-如何访问-和-修改-data中的数据（响应式演示）" class="headerlink" title="2.如何访问 和 修改 data中的数据（响应式演示）"></a>2.如何访问 和 修改 data中的数据（响应式演示）</h3><p>data中的数据, 最终会被添加到实例上</p>
<p>① 访问数据： “实例.属性名”</p>
<p>② 修改数据： “实例.属性名”&#x3D; “值”</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681888539340.png" alt="68188853934"></p>
<h2 id="Ⅴ、Vue开发者工具安装"><a href="#Ⅴ、Vue开发者工具安装" class="headerlink" title="Ⅴ、Vue开发者工具安装"></a>Ⅴ、Vue开发者工具安装</h2><ol>
<li>通过谷歌应用商店安装（国外网站）</li>
<li>极简插件下载（推荐） <a href="https://chrome.zzzmh.cn/index">https://chrome.zzzmh.cn/index</a></li>
</ol>
<p>安装步骤：</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681889390406.png" alt="68188939040"></p>
<p>安装之后可以F12后看到多一个Vue的调试面板</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681889483446.png" alt="68188948344"></p>
<h2 id="Ⅵ、Vue中的常用指令"><a href="#Ⅵ、Vue中的常用指令" class="headerlink" title="Ⅵ、Vue中的常用指令"></a>Ⅵ、Vue中的常用指令</h2><p><strong>概念：</strong>指令（Directives）是 Vue 提供的带有 <strong>v- 前缀</strong> 的 特殊 标签<strong>属性</strong>。</p>
<p>作用：提高程序员操作 DOM 的效率。</p>
<p>vue 中的指令按照不同的用途可以分为如下 6 大类：</p>
<ul>
<li>内容渲染指令（v-html、v-text）</li>
<li>条件渲染指令（v-show、v-if、v-else、v-else-if）</li>
<li>事件绑定指令（v-on）</li>
<li>属性绑定指令 （v-bind）</li>
<li>双向绑定指令（v-model）</li>
<li>列表渲染指令（v-for）</li>
</ul>
<p>指令是 vue 开发中最基础、最常用、最简单的知识点。</p>
<h2 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h2><p>内容渲染指令用来辅助开发者渲染 DOM 元素的文本内容。常用的内容渲染指令有如下2 个：</p>
<ul>
<li><p>v-text（类似innerText）</p>
</li>
<li><ul>
<li>使用语法：<code>&lt;p v-text=&quot;uname&quot;&gt;hello&lt;/p&gt;</code>，意思是将 uame 值渲染到 p 标签中</li>
<li>类似 innerText，使用该语法，会覆盖 p 标签原有内容</li>
</ul>
</li>
<li><p>v-html（类似 innerHTML）</p>
</li>
<li><ul>
<li>使用语法：<code>&lt;p v-html=&quot;intro&quot;&gt;hello&lt;/p&gt;</code>，意思是将 intro 值渲染到 p 标签中</li>
<li>类似 innerHTML，使用该语法，会覆盖 p 标签原有内容</li>
<li>类似 innerHTML，使用该语法，能够将HTML标签的样式呈现出来。</li>
</ul>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"> <br>  &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>	<span class="hljs-comment">// 既然指令是vue提供的特殊的html属性，所以咱们写的时候就当成属性来用即可</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;uname&quot;</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span> <br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;intro&quot;</span>&gt;</span>简介：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  &lt;/div&gt; <br><br>&lt;script&gt;<br>        const app = new Vue(&#123;<br>            el:&#x27;#app&#x27;,<br>            data:&#123;<br>                uname:&#x27;张三&#x27;,<br>                intro:&#x27;&lt;h2&gt;这是一个&lt;strong&gt;非常优秀&lt;/strong&gt;的boy&lt;h2&gt;&#x27;<br>            &#125;<br>        &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><p>条件判断指令，用来辅助开发者按需控制 DOM 的显示与隐藏。条件渲染指令有如下两个，分别是：</p>
<ol>
<li><p>v-show</p>
<ol>
<li>作用：  控制元素显示隐藏</li>
<li>语法：  v-show &#x3D; “表达式”   表达式值为 true 显示， false 隐藏</li>
<li>原理：  切换 display:none 控制显示隐藏</li>
<li>场景：频繁切换显示隐藏的场景</li>
</ol>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681891228284.png" alt="68189122828"></p>
</li>
<li><p>v-if</p>
<ol>
<li>作用：  控制元素显示隐藏（条件渲染）</li>
<li>语法：  v-if&#x3D; “表达式”          表达式值 true显示， false 隐藏</li>
<li>原理：  基于条件判断，是否创建 或 移除元素节点</li>
<li>场景：  要么显示，要么隐藏，不频繁切换的场景</li>
</ol>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681891237750.png" alt="68189123775"></p>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是v-show控制的盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是v-if控制的盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br>   <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
</li>
<li><p>v-else 和 v-else-if</p>
<ol>
<li>作用：辅助v-if进行判断渲染</li>
<li>语法：v-else  v-else-if&#x3D;”表达式”</li>
<li>需要紧接着v-if使用</li>
</ol>
</li>
</ol>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>性别：♂ 男<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>性别：♀ 女<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  &lt;hr&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>成绩评定A：奖励电脑一台<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>成绩评定B：奖励周末郊游<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>成绩评定C：奖励零食礼包<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>成绩评定D：惩罚一周不能玩手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">gender</span>: <span class="hljs-number">2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">score</span>: <span class="hljs-number">95</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h2 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h2><p>使用Vue时，如需为DOM注册事件，及其的简单，语法如下：</p>
<ul>
<li>&lt;button v-on:事件名&#x3D;”内联语句”&gt;按钮</li>
<li>&lt;button v-on:事件名&#x3D;”处理函数”&gt;按钮</li>
<li>&lt;button v-on:事件名&#x3D;”处理函数(实参)”&gt;按钮</li>
<li><code>v-on:</code> **简写为 **@</li>
</ul>
<ol>
<li><p>内联语句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count--&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &lt;/div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">count</span>: <span class="hljs-number">100</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
</li>
<li><p>事件处理函数</p>
<p>注意：</p>
<ul>
<li>事件处理函数应该写到一个跟data同级的配置项（methods）中</li>
<li>methods中的函数内部的this都指向Vue实例</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>切换显示隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &lt;/div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p>  3.给事件处理函数传参</p>
<ul>
<li><p>如果不传递任何参数，则方法无需加小括号；methods方法中可以直接使用 e 当做事件对象</p>
</li>
<li><p>如果传递了参数，则实参 <code>$event</code> 表示事件对象，固定用法。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;style&gt;<br>   .<span class="hljs-property">box</span> &#123;<br>     <span class="hljs-attr">border</span>: 3px solid #<span class="hljs-number">000000</span>;<br>     border-<span class="hljs-attr">radius</span>: 10px;<br>     <span class="hljs-attr">padding</span>: 20px;<br>     <span class="hljs-attr">margin</span>: 20px;<br>     <span class="hljs-attr">width</span>: 200px;<br>   &#125;<br>   h3 &#123;<br>     <span class="hljs-attr">margin</span>: 10px <span class="hljs-number">0</span> 20px <span class="hljs-number">0</span>;<br>   &#125;<br>   p &#123;<br>     <span class="hljs-attr">margin</span>: 20px;<br>   &#125;<br> &lt;/style&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑自动售货机<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>可乐5元<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>咖啡10元<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>牛奶8元<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>银行卡余额：&#123;&#123; money &#125;&#125;元<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-attr">money</span>: <span class="hljs-number">100</span></span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h2 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h2><ol>
<li><strong>作用：</strong>动态设置html的标签属性 比如：src、url、title</li>
<li><strong>语法</strong>：**v-bind:**属性名&#x3D;“表达式”</li>
<li>**v-bind:**可以简写成 &#x3D;&gt;   <strong>:</strong></li>
</ol>
<p>比如，有一个图片，它的 <code>src</code> 属性值，是一个图片地址。这个地址在数据 data 中存储。</p>
<p>则可以这样设置属性值：</p>
<ul>
<li><code>&lt;img v-bind:src=&quot;url&quot; /&gt;</code></li>
<li><code>&lt;img :src=&quot;url&quot; /&gt;</code>   （v-bind可以省略）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;imgUrl&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgUrl&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">imgUrl</span>: <span class="hljs-string">&#x27;./imgs/10-02.png&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello 波仔&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><p>Vue 提供了 v-for 列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构。</p>
<p>v-for 指令需要使用 <code>(item, index) in arr</code> 形式的特殊语法，其中：</p>
<ul>
<li>item 是数组中的每一项</li>
<li>index 是每一项的索引，不需要可以省略</li>
<li>arr 是被遍历的数组</li>
</ul>
<p>此语法也可以遍历<strong>对象和数字</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//遍历对象</span><br>&lt;div v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(value, key, index) in object&quot;</span>&gt;&#123;&#123;value&#125;&#125;&lt;/div&gt;<br><span class="hljs-attr">value</span>:对象中的值<br><span class="hljs-attr">key</span>:对象中的键<br><span class="hljs-attr">index</span>:遍历索引从<span class="hljs-number">0</span>开始<br><br><span class="hljs-comment">//遍历数字</span><br>&lt;p v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in 10&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;<br>item从<span class="hljs-number">1</span> 开始<br></code></pre></td></tr></table></figure>



<h2 id="v-for中的key"><a href="#v-for中的key" class="headerlink" title="v-for中的key"></a>v-for中的key</h2><p><strong>语法：</strong> key&#x3D;”唯一值”</p>
<p><strong>作用：</strong>给列表项添加的<strong>唯一标识</strong>。便于Vue进行列表项的<strong>正确排序复用</strong>。</p>
<p><strong>为什么加key：</strong>Vue 的默认行为会尝试原地修改元素（<strong>就地复用</strong>）</p>
<p>实例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in booksList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.author &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>key 的值只能是字符串 或 数字类型</li>
<li>key 的值必须具有唯一性</li>
<li>推荐使用  id 作为 key（唯一），不推荐使用 index 作为 key（会变化，不对应）</li>
</ol>
<h2 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h2><p>所谓双向绑定就是：</p>
<ol>
<li>数据改变后，呈现的页面结果会更新</li>
<li>页面结果更新后，数据也会随之而变</li>
</ol>
<p><strong>作用：</strong> 给<strong>表单元素</strong>（input、radio、select）使用，双向绑定数据，可以快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素内容</p>
<p><strong>语法：</strong>v-model&#x3D;”变量”</p>
<p><strong>需求：</strong>使用双向绑定实现以下需求</p>
<ol>
<li>点击登录按钮获取表单中的内容</li>
<li>点击重置按钮清空表单中的内容</li>
</ol>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681913125738.png" alt="68191312573"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    账户：&lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt; &lt;br&gt;&lt;br&gt;<br>    密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span>&gt; &lt;br&gt;&lt;br&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &lt;/div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day3</title>
    <url>/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/</url>
    <content><![CDATA[<h2 id="一、今日学习目标"><a href="#一、今日学习目标" class="headerlink" title="一、今日学习目标"></a>一、今日学习目标</h2><h3 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1.生命周期"></a>1.生命周期</h3><ol>
<li>生命周期介绍</li>
<li>生命周期的四个阶段</li>
<li>生命周期钩子</li>
<li>声明周期案例</li>
</ol>
<h3 id="2-工程化开发入门"><a href="#2-工程化开发入门" class="headerlink" title="2.工程化开发入门"></a>2.工程化开发入门</h3><ol>
<li>工程化开发和脚手架</li>
<li>项目运行流程</li>
<li>组件化</li>
<li>组件注册</li>
</ol>
<h2 id="二、Vue生命周期"><a href="#二、Vue生命周期" class="headerlink" title="二、Vue生命周期"></a>二、Vue生命周期</h2><p>思考：什么时候可以发送初始化渲染请求？（越早越好）什么时候可以开始操作dom？（至少dom得渲染出来）</p>
<p>Vue生命周期：就是一个Vue实例从创建 到 销毁 的整个过程。</p>
<p>生命周期四个阶段：① 创建 ② 挂载 ③ 更新 ④ 销毁</p>
<p>1.创建阶段：创建响应式数据</p>
<p>2.挂载阶段：渲染模板</p>
<p>3.更新阶段：修改数据，更新视图</p>
<p>4.销毁阶段：销毁Vue实例</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682065937815.png" alt="68206593781"></p>
<h2 id="三、Vue生命周期钩子"><a href="#三、Vue生命周期钩子" class="headerlink" title="三、Vue生命周期钩子"></a>三、Vue生命周期钩子</h2><p>Vue生命周期过程中，会<strong>自动运行一些函数</strong>，被称为【<strong>生命周期钩子</strong>】→  让开发者可以在【<strong>特定阶段</strong>】运行<strong>自己的代码</strong></p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682066040295.png" alt="68206604029"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count--&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;计数器&#x27;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 1. 创建阶段（准备数据）</span></span><br><span class="language-javascript">     </span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 2. 挂载阶段（渲染模板）</span></span><br><span class="language-javascript">      </span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 3. 更新阶段(修改数据 → 更新视图)</span></span><br><span class="language-javascript">      </span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 4. 卸载阶段</span></span><br><span class="language-javascript">     </span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="四、生命周期钩子小案例"><a href="#四、生命周期钩子小案例" class="headerlink" title="四、生命周期钩子小案例"></a>四、生命周期钩子小案例</h2><h3 id="1-在created中发送数据"><a href="#1-在created中发送数据" class="headerlink" title="1.在created中发送数据"></a>1.在created中发送数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   * &#123;</span><br><span class="language-css">     <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">     <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">     <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">     <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">     <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">     <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">     <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">     <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">     <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">     <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">     <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">     <span class="hljs-attribute">object-fit</span>: cover;</span><br><span class="language-css">   &#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>5G商用在即，三大运营商营收持续下降<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>新京报经济新闻<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2222-10-28 11:50:28<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax-api.itheima.net/public/images/0.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>5G商用在即，三大运营商营收持续下降<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>新京报经济新闻<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2222-10-28 11:50:28<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax-api.itheima.net/public/images/0.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>5G商用在即，三大运营商营收持续下降<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>新京报经济新闻<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2222-10-28 11:50:28<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax-api.itheima.net/public/images/0.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">// 接口地址：http://hmajax.itheima.net/api/news</span></span><br><span class="language-javascript">   <span class="hljs-comment">// 请求方式：get</span></span><br><span class="language-javascript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">       <span class="hljs-attr">list</span>: []</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;)</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h3 id="2-在mounted中获取焦点"><a href="#2-在mounted中获取焦点" class="headerlink" title="2.在mounted中获取焦点"></a>2.在mounted中获取焦点</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">html</span>,</span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-class">.search-box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-class">.search-box</span> <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">512px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">vertical-align</span>: top;</span><br><span class="language-css">      <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-shadow</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#c4c7ce</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#222</span>;</span><br><span class="language-css">      <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">      <span class="hljs-attribute">box-sizing</span>: content-box;</span><br><span class="language-css">      -webkit-tap-highlight-<span class="hljs-attribute">color</span>: transparent;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-class">.search-box</span> <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">112px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">44px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">41px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">42px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ad2a27</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-shadow</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">letter-spacing</span>: normal;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: no-repeat center /cover;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#edf0f5</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.itheima.com/images/logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;words&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>搜索一下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="五、工程化开发和脚手架"><a href="#五、工程化开发和脚手架" class="headerlink" title="五、工程化开发和脚手架"></a>五、工程化开发和脚手架</h2><h3 id="1-开发Vue的两种方式"><a href="#1-开发Vue的两种方式" class="headerlink" title="1.开发Vue的两种方式"></a>1.开发Vue的两种方式</h3><ul>
<li>核心包传统开发模式：基于html &#x2F; css &#x2F; js 文件，直接引入核心包，开发 Vue。</li>
<li><strong>工程化开发模式：基于构建工具（例如：webpack）的环境中开发Vue。</strong></li>
</ul>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682090039070.png" alt="68209003907"></p>
<p>工程化开发模式优点：</p>
<p>   提高编码效率，比如使用JS新语法、Less&#x2F;Sass、Typescript等通过webpack都可以编译成浏览器识别的ES3&#x2F;ES5&#x2F;CSS等</p>
<p>工程化开发模式问题：</p>
<ul>
<li>webpack配置<strong>不简单</strong></li>
<li><strong>雷同</strong>的基础配置</li>
<li>缺乏<strong>统一的标准</strong></li>
</ul>
<p>为了解决以上问题，所以我们需要一个工具，生成标准化的配置</p>
<h3 id="2-脚手架Vue-CLI"><a href="#2-脚手架Vue-CLI" class="headerlink" title="2.脚手架Vue CLI"></a>2.脚手架Vue CLI</h3><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>   Vue CLI 是Vue官方提供的一个<strong>全局命令工具</strong></p>
<p>   可以帮助我们<strong>快速创建</strong>一个开发Vue项目的<strong>标准化基础架子</strong>。【集成了webpack配置】</p>
<h4 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h4><ol>
<li>开箱即用，零配置</li>
<li>内置babel等工具</li>
<li>标准化的webpack配置</li>
</ol>
<h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ol>
<li>全局安装（只需安装一次即可） yarn global add @vue&#x2F;cli 或者 npm i @vue&#x2F;cli -g</li>
<li>查看vue&#x2F;cli版本： vue –version</li>
<li>创建项目架子：<strong>vue create project-name</strong>(项目名不能使用中文)</li>
<li>启动项目：<strong>yarn serve</strong> 或者 <strong>npm run serve</strong>(命令不固定，找package.json)</li>
</ol>
<h2 id="六、项目目录介绍和运行流程"><a href="#六、项目目录介绍和运行流程" class="headerlink" title="六、项目目录介绍和运行流程"></a>六、项目目录介绍和运行流程</h2><h3 id="1-项目目录介绍"><a href="#1-项目目录介绍" class="headerlink" title="1.项目目录介绍"></a>1.项目目录介绍</h3><p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682092148521.png" alt="68209214852"></p>
<p>虽然脚手架中的文件有很多，目前咱们只需人事三个文件即可</p>
<ol>
<li>main.js  入口文件</li>
<li>App.vue  App根组件 </li>
<li>index.html 模板文件</li>
</ol>
<h3 id="2-运行流程"><a href="#2-运行流程" class="headerlink" title="2.运行流程"></a>2.运行流程</h3><p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682094032876.png" alt="68209403287"></p>
<h2 id="七、组件化开发"><a href="#七、组件化开发" class="headerlink" title="七、组件化开发"></a>七、组件化开发</h2><p>​     组件化：一个页面可以拆分成一个个组件，每个组件有着自己独立的结构、样式、行为。</p>
<p>​     好处：便于维护，利于复用 → 提升开发效率。</p>
<p>​     组件分类：普通组件、根组件。</p>
<p>​      比如：下面这个页面，可以把所有的代码都写在一个页面中，但是这样显得代码比较混乱，难易维护。咱们可以按模块进行组件划分</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682168852372.png" alt="68216885237"></p>
<h2 id="八、根组件-App-vue"><a href="#八、根组件-App-vue" class="headerlink" title="八、根组件 App.vue"></a>八、根组件 App.vue</h2><h3 id="1-根组件介绍"><a href="#1-根组件介绍" class="headerlink" title="1.根组件介绍"></a>1.根组件介绍</h3><p>整个应用最上层的组件，包裹所有普通小组件</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682169131688.png" alt="68216913168"></p>
<h3 id="2-组件是由三部分构成"><a href="#2-组件是由三部分构成" class="headerlink" title="2.组件是由三部分构成"></a>2.组件是由三部分构成</h3><ul>
<li>语法高亮插件</li>
</ul>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682169264266.png" alt="68216926426"></p>
<ul>
<li><p><strong>三部分构成</strong></p>
<ul>
<li>template：结构 （有且只能一个根元素）</li>
<li>script:   js逻辑 </li>
<li>style： 样式 (可支持less，需要装包)</li>
</ul>
</li>
<li><p>让组件支持less</p>
<p>（1） style标签，lang&#x3D;”less” 开启less功能 </p>
<p>（2） 装包: yarn add less less-loader -D 或者npm i less less-loader -D</p>
</li>
</ul>
<h2 id="九、普通组件的注册使用-局部注册"><a href="#九、普通组件的注册使用-局部注册" class="headerlink" title="九、普通组件的注册使用-局部注册"></a>九、普通组件的注册使用-局部注册</h2><h3 id="1-特点："><a href="#1-特点：" class="headerlink" title="1.特点："></a>1.特点：</h3><p>只能在注册的组件内使用</p>
<h3 id="2-步骤："><a href="#2-步骤：" class="headerlink" title="2.步骤："></a>2.步骤：</h3><ol>
<li>创建.vue文件（三个组成部分）</li>
<li>在使用的组件内先导入再注册，最后使用</li>
</ol>
<h3 id="3-使用方式："><a href="#3-使用方式：" class="headerlink" title="3.使用方式："></a>3.使用方式：</h3><p>当成html标签使用即可  &lt;组件名&gt;&lt;&#x2F;组件名&gt;</p>
<h3 id="4-注意："><a href="#4-注意：" class="headerlink" title="4.注意："></a>4.注意：</h3><p>组件名规范 —&gt; 大驼峰命名法， 如 HmHeader</p>
<h3 id="5-语法："><a href="#5-语法：" class="headerlink" title="5.语法："></a>5.语法：</h3><p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682227966812.png" alt="68222796681"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入需要注册的组件</span><br><span class="hljs-keyword">import</span> 组件对象 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;.vue文件路径&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HmHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/HmHeader&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-comment">// 局部注册</span><br>  <span class="hljs-attr">components</span>: &#123;<br>   <span class="hljs-string">&#x27;组件名&#x27;</span>: 组件对象,<br>    <span class="hljs-title class_">HmHeader</span>:<span class="hljs-title class_">HmHeaer</span>,<br>    <span class="hljs-title class_">HmHeader</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="6-练习"><a href="#6-练习" class="headerlink" title="6.练习"></a>6.练习</h3><p>在App.vue中使用组件的方式完成下面布局</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682227902873.png" alt="68222790287"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hm-header&quot;&gt;<br>    我是hm-header<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.hm-header &#123;<br>  height: 100px;<br>  line-height: 100px;<br>  text-align: center;<br>  font-size: 30px;<br>  background-color: #8064a2;<br>  color: white;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hm-main&quot;&gt;<br>    我是hm-main<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.hm-main &#123;<br>  height: 400px;<br>  line-height: 400px;<br>  text-align: center;<br>  font-size: 30px;<br>  background-color: #f79646;<br>  color: white;<br>  margin: 20px 0;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hm-footer&quot;&gt;<br>    我是hm-footer<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.hm-footer &#123;<br>  height: 100px;<br>  line-height: 100px;<br>  text-align: center;<br>  font-size: 30px;<br>  background-color: #4f81bd;<br>  color: white;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><ul>
<li>A组件内部注册的局部组件能在B组件使用吗</li>
<li>局部注册组件的步骤是什么</li>
<li>使用组件时 应该按照什么命名法</li>
</ul>
<h2 id="十、普通组件的注册使用-全局注册"><a href="#十、普通组件的注册使用-全局注册" class="headerlink" title="十、普通组件的注册使用-全局注册"></a>十、普通组件的注册使用-全局注册</h2><h3 id="1-特点：-1"><a href="#1-特点：-1" class="headerlink" title="1.特点："></a>1.特点：</h3><p>全局注册的组件，在项目的<strong>任何组件</strong>中都能使用</p>
<h3 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h3><ol>
<li>创建.vue组件（三个组成部分）</li>
<li><strong>main.js</strong>中进行全局注册</li>
</ol>
<h3 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="3.使用方式"></a>3.使用方式</h3><p>当成HTML标签直接使用</p>
<blockquote>
<p>&lt;组件名&gt;&lt;&#x2F;组件名&gt;</p>
</blockquote>
<h3 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a>4.注意</h3><p>组件名规范 —&gt; 大驼峰命名法， 如 HmHeader</p>
<h3 id="5-语法"><a href="#5-语法" class="headerlink" title="5.语法"></a>5.语法</h3><p>Vue.component(‘组件名’, 组件对象)</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入需要全局注册的组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HmButton</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/HmButton&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;HmButton&#x27;</span>, <span class="hljs-title class_">HmButton</span>)<br></code></pre></td></tr></table></figure>

<h3 id="6-练习-1"><a href="#6-练习-1" class="headerlink" title="6.练习"></a>6.练习</h3><p>在以下3个局部组件中是展示一个通用按钮</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682263187344.png" alt="68226318734"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button class=&quot;hm-button&quot;&gt;通用按钮&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.hm-button &#123;<br>  height: 50px;<br>  line-height: 50px;<br>  padding: 0 20px;<br>  background-color: #3bae56;<br>  border-radius: 5px;<br>  color: white;<br>  border: none;<br>  vertical-align: middle;<br>  cursor: pointer;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="7-总结-1"><a href="#7-总结-1" class="headerlink" title="7.总结"></a>7.总结</h3><p>1.全局注册组件应该在哪个文件中注册以及语法是什么</p>
<p>2.全局组件在项目中的任何一个组件中可不可以使用</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day2</title>
    <url>/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/</url>
    <content><![CDATA[<h2 id="一、今日学习目标"><a href="#一、今日学习目标" class="headerlink" title="一、今日学习目标"></a>一、今日学习目标</h2><h3 id="1-指令补充"><a href="#1-指令补充" class="headerlink" title="1.指令补充"></a>1.指令补充</h3><ol>
<li>指令修饰符</li>
<li>v-bind对样式增强的操作</li>
<li>v-model应用于其他表单元素</li>
</ol>
<h3 id="2-computed计算属性"><a href="#2-computed计算属性" class="headerlink" title="2.computed计算属性"></a>2.computed计算属性</h3><ol>
<li>基础语法</li>
<li>计算属性vs方法</li>
<li>计算属性的完整写法</li>
<li>成绩案例</li>
</ol>
<h3 id="3-watch侦听器"><a href="#3-watch侦听器" class="headerlink" title="3.watch侦听器"></a>3.watch侦听器</h3><ol>
<li>基础写法</li>
<li>完整写法</li>
</ol>
<h2 id="二、指令修饰符"><a href="#二、指令修饰符" class="headerlink" title="二、指令修饰符"></a>二、指令修饰符</h2><h3 id="1-什么是指令修饰符？"><a href="#1-什么是指令修饰符？" class="headerlink" title="1.什么是指令修饰符？"></a>1.什么是指令修饰符？</h3><p>​	所谓指令修饰符就是通过“.”指明一些指令<strong>后缀</strong> 不同的<strong>后缀</strong>封装了不同的处理操作  —&gt; 简化代码</p>
<h3 id="2-按键修饰符"><a href="#2-按键修饰符" class="headerlink" title="2.按键修饰符"></a>2.按键修饰符</h3><ul>
<li>@keyup.enter  —&gt;当点击enter键的时候才触发</li>
</ul>
<p>代码演示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>@keyup.enter  →  监听键盘回车事件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h3 id="3-v-model修饰符"><a href="#3-v-model修饰符" class="headerlink" title="3.v-model修饰符"></a>3.v-model修饰符</h3><ul>
<li>v-model.trim  —&gt;去除首位空格</li>
<li>v-model.number —&gt;转数字</li>
</ul>
<h3 id="4-事件修饰符"><a href="#4-事件修饰符" class="headerlink" title="4.事件修饰符"></a>4.事件修饰符</h3><ul>
<li>@事件名.stop —&gt; 阻止冒泡</li>
<li>@事件名.prevent  —&gt;阻止默认行为</li>
<li>@事件名.stop.prevent —&gt;可以连用 即阻止事件冒泡也阻止默认行为</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;style&gt;<br>   .<span class="hljs-property">father</span> &#123;<br>     <span class="hljs-attr">width</span>: 200px;<br>     <span class="hljs-attr">height</span>: 200px;<br>     background-<span class="hljs-attr">color</span>: pink;<br>     margin-<span class="hljs-attr">top</span>: 20px;<br>   &#125;<br>   .<span class="hljs-property">son</span> &#123;<br>     <span class="hljs-attr">width</span>: 100px;<br>     <span class="hljs-attr">height</span>: 100px;<br>     background-<span class="hljs-attr">color</span>: skyblue;<br>   &#125;<br> &lt;/style&gt;<br><br>&lt;div id=&quot;app&quot;&gt;<br>   &lt;h3&gt;v-model修饰符 .trim .number&lt;/h3&gt;<br>   姓名：&lt;input v-model=&quot;username&quot; type=&quot;text&quot;&gt;&lt;br&gt;<br>   年纪：&lt;input v-model=&quot;age&quot; type=&quot;text&quot;&gt;&lt;br&gt;<br><br>   <br>   &lt;h3&gt;@事件名.stop     →  阻止冒泡&lt;/h3&gt;<br>   &lt;div @click=&quot;fatherFn&quot; class=&quot;father&quot;&gt;<br>     &lt;div @click=&quot;sonFn&quot; class=&quot;son&quot;&gt;儿子&lt;/div&gt;<br>   &lt;/div&gt;<br><br>   &lt;h3&gt;@事件名.prevent  →  阻止默认行为&lt;/h3&gt;<br>   &lt;a @click href=&quot;http://www.baidu.com&quot;&gt;阻止默认行为&lt;/a&gt;<br> &lt;/div&gt;<br><br> &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;<br> &lt;script&gt;<br>   const app = new Vue(&#123;<br>     el: &#x27;#app&#x27;,<br>     data: &#123;<br>       username: &#x27;&#x27;,<br>       age: &#x27;&#x27;,<br>     &#125;,<br>     methods: &#123;<br>       fatherFn () &#123;<br>         alert(&#x27;老父亲被点击了&#x27;)<br>       &#125;,<br>       sonFn (e) &#123;<br>         // e.stopPropagation()<br>         alert(&#x27;儿子被点击了&#x27;)<br>       &#125;<br>     &#125;<br>   &#125;)<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="三、v-bind对样式控制的增强-操作class"><a href="#三、v-bind对样式控制的增强-操作class" class="headerlink" title="三、v-bind对样式控制的增强-操作class"></a>三、v-bind对样式控制的增强-操作class</h2><p>为了方便开发者进行样式控制， Vue 扩展了 v-bind 的语法，可以针对 <strong>class 类名</strong> 和 <strong>style 行内样式</strong> 进行控制 。</p>
<h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1.语法："></a>1.语法：</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> :class = &quot;对象/数组&quot;&gt;这是一个div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h3 id="2-对象语法"><a href="#2-对象语法" class="headerlink" title="2.对象语法"></a>2.对象语法</h3><p>当class动态绑定的是<strong>对象</strong>时，<strong>键就是类名，值就是布尔值</strong>，如果值是<strong>true</strong>，就有这个类，否则没有这个类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; 类名1: 布尔值, 类名2: 布尔值 &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>​    适用场景：一个类名，来回切换</p>
<h3 id="3-数组语法"><a href="#3-数组语法" class="headerlink" title="3.数组语法"></a>3.数组语法</h3><p>当class动态绑定的是<strong>数组</strong>时 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[ 类名1, 类名2, 类名3 ]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>   使用场景:批量添加或删除类</p>
<h3 id="4-代码练习"><a href="#4-代码练习" class="headerlink" title="4.代码练习"></a>4.代码练习</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.pink</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.big</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--绑定对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是个程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--绑定数组--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是个程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="四、仿京东秒杀-tab栏切换导航高亮"><a href="#四、仿京东秒杀-tab栏切换导航高亮" class="headerlink" title="四、仿京东秒杀-tab栏切换导航高亮"></a>四、仿京东秒杀-tab栏切换导航高亮</h2><h3 id="1-需求："><a href="#1-需求：" class="headerlink" title="1.需求："></a>1.需求：</h3><p>​	当我们点击哪个tab页签时，哪个tab页签就高亮</p>
<h3 id="2-准备代码"><a href="#2-准备代码" class="headerlink" title="2.准备代码:"></a>2.准备代码:</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#e01222</span>;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">      <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e01222</span>;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>京东秒杀<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>每日特价<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>品类秒杀<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;京东秒杀&#x27;</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;每日特价&#x27;</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;品类秒杀&#x27;</span> &#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="3-思路："><a href="#3-思路：" class="headerlink" title="3.思路："></a>3.思路：</h3><p>1.基于数据，动态渲染tab（v-for）</p>
<p>2.准备一个下标 记录高亮的是哪一个 tab</p>
<p>3.基于下标动态切换class的类名</p>
<h2 id="五、v-bind对有样式控制的增强-操作style"><a href="#五、v-bind对有样式控制的增强-操作style" class="headerlink" title="五、v-bind对有样式控制的增强-操作style"></a>五、v-bind对有样式控制的增强-操作style</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; CSS属性名1: CSS属性值, CSS属性名2: CSS属性值 &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="2-代码练习"><a href="#2-代码练习" class="headerlink" title="2.代码练习"></a>2.代码练习</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">187</span>, <span class="hljs-number">150</span>, <span class="hljs-number">156</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="3-进度条案例"><a href="#3-进度条案例" class="headerlink" title="3.进度条案例"></a>3.进度条案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.progress</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#272425</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#272425</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.inner</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: right;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#409eff</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-size</span>: <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.inner</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">right</span>: -<span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">25px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>50%<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>设置25%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>设置50%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>设置75%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>设置100%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="六、v-model在其他表单元素的使用"><a href="#六、v-model在其他表单元素的使用" class="headerlink" title="六、v-model在其他表单元素的使用"></a>六、v-model在其他表单元素的使用</h2><h3 id="1-讲解内容："><a href="#1-讲解内容：" class="headerlink" title="1.讲解内容："></a>1.讲解内容：</h3><p>常见的表单元素都可以用 v-model 绑定关联  →  快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素的值</p>
<p>它会根据  <strong>控件类型</strong> 自动选取  <strong>正确的方法</strong> 来更新元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">输入框  <span class="hljs-attr">input</span>:text   ——&gt; value<br>文本域  textarea	 ——&gt; value<br>复选框  <span class="hljs-attr">input</span>:checkbox  ——&gt; checked<br>单选框  <span class="hljs-attr">input</span>:radio   ——&gt; checked<br>下拉菜单 select    ——&gt; value<br>...<br></code></pre></td></tr></table></figure>

<h3 id="2-代码准备"><a href="#2-代码准备" class="headerlink" title="2.代码准备"></a>2.代码准备</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-tag">textarea</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">     <span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑学习网<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>   姓名：<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>   是否单身：<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">     前置理解：</span><br><span class="hljs-comment">       1. name:  给单选框加上 name 属性 可以分组 → 同一组互相会互斥</span><br><span class="hljs-comment">       2. value: 给单选框加上 value 属性，用于提交给后台的数据</span><br><span class="hljs-comment">     结合 Vue 使用 → v-model</span><br><span class="hljs-comment">   --&gt;</span><br>   性别: <br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span>男<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span>女<br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">     前置理解：</span><br><span class="hljs-comment">       1. option 需要设置 value 值，提交给后台</span><br><span class="hljs-comment">       2. select 的 value 值，关联了选中的 option 的 value 值</span><br><span class="hljs-comment">     结合 Vue 使用 → v-model</span><br><span class="hljs-comment">   --&gt;</span><br>   所在城市:<br>     <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>成都<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>南京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>   自我描述：<br>     <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span> <br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>立即注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;)</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="七、computed计算属性"><a href="#七、computed计算属性" class="headerlink" title="七、computed计算属性"></a>七、computed计算属性</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>基于<strong>现有的数据</strong>，计算出来的<strong>新属性</strong>。 <strong>依赖</strong>的数据变化，<strong>自动</strong>重新计算。</p>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><ol>
<li>声明在 <strong>computed 配置项</strong>中，一个计算属性对应一个函数</li>
<li>使用起来和普通属性一样使用  </li>
</ol>
<h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><ol>
<li>computed配置项和data配置项是<strong>同级</strong>的</li>
<li>computed中的计算属性<strong>虽然是函数的写法</strong>，但他<strong>依然是个属性</strong></li>
<li>computed中的计算属性<strong>不能</strong>和data中的属性<strong>同名</strong></li>
<li>使用computed中的计算属性和使用data中的属性是一样的用法</li>
<li>computed中计算属性内部的<strong>this</strong>依然<strong>指向的是Vue实例</strong></li>
</ol>
<h3 id="4-案例"><a href="#4-案例" class="headerlink" title="4.案例"></a>4.案例</h3><p>比如我们可以使用计算属性实现下面这个业务场景</p>
<p><img src="/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/1682039327858.png" alt="68203932785"></p>
<h3 id="5-代码准备"><a href="#5-代码准备" class="headerlink" title="5.代码准备"></a>5.代码准备</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">h3</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑的礼物清单<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.num &#125;&#125;个<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 目标：统计求和，求得礼物总数 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>礼物总数：? 个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 现有的数据</span></span><br><span class="language-javascript">        <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;篮球&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">1</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;玩具&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">2</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;铅笔&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">5</span> &#125;,</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="八、computed计算属性-VS-methods方法"><a href="#八、computed计算属性-VS-methods方法" class="headerlink" title="八、computed计算属性 VS methods方法"></a>八、computed计算属性 VS methods方法</h2><h3 id="1-computed计算属性"><a href="#1-computed计算属性" class="headerlink" title="1.computed计算属性"></a>1.computed计算属性</h3><p>作用：封装了一段对于<strong>数据</strong>的处理，求得一个<strong>结果</strong></p>
<p>语法：</p>
<ol>
<li>写在computed配置项中</li>
<li>作为属性，直接使用<ul>
<li>js中使用计算属性： this.计算属性</li>
<li>模板中使用计算属性：</li>
</ul>
</li>
</ol>
<h3 id="2-methods计算属性"><a href="#2-methods计算属性" class="headerlink" title="2.methods计算属性"></a>2.methods计算属性</h3><p>作用：给Vue实例提供一个<strong>方法</strong>，调用以<strong>处理业务逻辑</strong>。</p>
<p>语法：</p>
<ol>
<li>写在methods配置项中</li>
<li>作为方法调用<ul>
<li>js中调用：this.方法名()</li>
<li>模板中调用  "{{方法名()}}" 或者 @事件名&#x3D;“方法名”</li>
</ul>
</li>
</ol>
<h3 id="3-计算属性的优势"><a href="#3-计算属性的优势" class="headerlink" title="3.计算属性的优势"></a>3.计算属性的优势</h3><ol>
<li><p>缓存特性（提升性能）</p>
<p>计算属性会对计算出来的结果缓存，再次使用直接读取缓存，</p>
<p>依赖项变化了，会自动重新计算 → 并再次缓存</p>
</li>
<li><p>methods没有缓存特性</p>
</li>
<li><p>通过代码比较</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">h3</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">145px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: -<span class="hljs-number">4px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e63f32</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>?<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.num &#125;&#125;个<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>礼物总数：&#123;&#123; totalCount &#125;&#125; 个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 现有的数据</span></span><br><span class="language-javascript">        <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;篮球&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">3</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;玩具&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">2</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;铅笔&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">5</span> &#125;,</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">        totalCount () &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> total = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item.<span class="hljs-property">num</span>, <span class="hljs-number">0</span>)</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> total</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>1.computed<strong>有缓存特性</strong>，methods<strong>没有缓存</strong></p>
<p>2.当一个结果依赖其他多个值时，推荐使用计算属性</p>
<p>3.当处理业务逻辑时，推荐使用methods方法，比如事件的处理函数</p>
<h2 id="九、计算属性的完整写法"><a href="#九、计算属性的完整写法" class="headerlink" title="九、计算属性的完整写法"></a>九、计算属性的完整写法</h2><p><strong>既然计算属性也是属性，能访问，应该也能修改了？</strong></p>
<ol>
<li>计算属性默认的简写，只能读取访问，不能 “修改”</li>
<li>如果要 “修改”  → 需要写计算属性的完整写法</li>
</ol>
<p><img src="/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/1682041822963.png" alt="68204182296"></p>
<p>完整写法代码演示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   姓：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span> +<br>   名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span> =<br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>改名卡<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">		<span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;刘&#x27;</span>,</span><br><span class="language-javascript">       <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;备&#x27;</span></span><br><span class="language-javascript">     &#125;,</span><br><span class="language-javascript">     <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">     &#125;,</span><br><span class="language-javascript">     <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;)</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="十、综合案例-成绩案例"><a href="#十、综合案例-成绩案例" class="headerlink" title="十、综合案例-成绩案例"></a>十、综合案例-成绩案例</h2><p><img src="/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/1682042489319.png" alt="68204248931"></p>
<p>功能描述：</p>
<p>1.渲染功能</p>
<p>2.删除功能</p>
<p>3.添加功能</p>
<p>4.统计总分，求平均分</p>
<p>思路分析：</p>
<p>1.渲染功能  v-for  :key  v-bind:动态绑定class的样式</p>
<p>2.删除功能 v-on绑定事件， 阻止a标签的默认行为</p>
<p>3.v-model的修饰符 .trim、 .number、  判断数据是否为空后 再添加、添加后清空文本框的数据</p>
<p>4.使用计算属性computed 计算总分和平均分的值</p>
<h2 id="十一、watch侦听器（监视器）"><a href="#十一、watch侦听器（监视器）" class="headerlink" title="十一、watch侦听器（监视器）"></a>十一、watch侦听器（监视器）</h2><h3 id="1-作用："><a href="#1-作用：" class="headerlink" title="1.作用："></a>1.作用：</h3><p>​	<strong>监视数据变化</strong>，执行一些业务逻辑或异步操作</p>
<h3 id="2-语法："><a href="#2-语法：" class="headerlink" title="2.语法："></a>2.语法：</h3><ol>
<li><p>watch同样声明在跟data同级的配置项中</p>
</li>
<li><p>简单写法： 简单类型数据直接监视</p>
</li>
<li><p>完整写法：添加额外配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123; <br>  <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;苹果&#x27;</span>,<br>  <span class="hljs-attr">obj</span>: &#123;<br>    <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;苹果&#x27;</span><br>  &#125;<br>&#125;,<br><br><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-comment">// 该方法会在数据变化时，触发执行</span><br>  数据属性名 (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;,<br>  <span class="hljs-string">&#x27;对象.属性名&#x27;</span> (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-侦听器代码准备"><a href="#3-侦听器代码准备" class="headerlink" title="3.侦听器代码准备"></a>3.侦听器代码准备</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">     * &#123;</span><br><span class="language-css">       <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">       <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">       <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.query</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-tag">textarea</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dedede</span>;</span><br><span class="language-css">       <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">       <span class="hljs-attribute">resize</span>: none;</span><br><span class="language-css">       <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-tag">textarea</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#1589f5</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.transbox</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;</span><br><span class="language-css">       <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.tip-box</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.tip-box</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">       <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.query</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css"></span><br><span class="language-css">     <span class="hljs-selector-class">.input-wrap</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.input-wrap</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">       <span class="hljs-attribute">right</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">bottom</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.input-wrap</span> <span class="hljs-selector-tag">i</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">font-style</span>: normal;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 条件选择框 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;query&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>翻译成的语言：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;italy&quot;</span>&gt;</span>意大利<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;english&quot;</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;german&quot;</span>&gt;</span>德语<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!-- 翻译框 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-wrap&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;words&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>⌨️<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>文档翻译<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;output-wrap&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;transbox&quot;</span>&gt;</span>mela<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-comment">// 接口地址：https://applet-base-api-t.itheima.net/api/translate</span></span><br><span class="language-javascript">     <span class="hljs-comment">// 请求方式：get</span></span><br><span class="language-javascript">     <span class="hljs-comment">// 请求参数：</span></span><br><span class="language-javascript">     <span class="hljs-comment">// （1）words：需要被翻译的文本（必传）</span></span><br><span class="language-javascript">     <span class="hljs-comment">// （2）lang： 需要被翻译成的语言（可选）默认值-意大利</span></span><br><span class="language-javascript">     <span class="hljs-comment">// -----------------------------------------------</span></span><br><span class="language-javascript">     </span><br><span class="language-javascript">     <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">       <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">         <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">       &#125;,</span><br><span class="language-javascript">       <span class="hljs-comment">// 具体讲解：(1) watch语法 (2) 具体业务实现</span></span><br><span class="language-javascript">     &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="十二、翻译案例-代码实现"><a href="#十二、翻译案例-代码实现" class="headerlink" title="十二、翻译案例-代码实现"></a>十二、翻译案例-代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 接口地址：https://applet-base-api-t.itheima.net/api/translate</span><br>    <span class="hljs-comment">// 请求方式：get</span><br>    <span class="hljs-comment">// 请求参数：</span><br>    <span class="hljs-comment">// （1）words：需要被翻译的文本（必传）</span><br>    <span class="hljs-comment">// （2）lang： 需要被翻译成的语言（可选）默认值-意大利</span><br>    <span class="hljs-comment">// -----------------------------------------------</span><br>    <br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>      <span class="hljs-attr">data</span>: &#123;<br>         <span class="hljs-comment">//words: &#x27;&#x27;</span><br>         <span class="hljs-attr">obj</span>: &#123;<br>          <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">result</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 翻译结果</span><br>        <span class="hljs-comment">// timer: null // 延时器id</span><br>      &#125;,<br>      <span class="hljs-comment">// 具体讲解：(1) watch语法 (2) 具体业务实现</span><br>      <span class="hljs-attr">watch</span>: &#123;<br>        <span class="hljs-comment">// 该方法会在数据变化时调用执行</span><br>        <span class="hljs-comment">// newValue新值, oldValue老值（一般不用）</span><br>        <span class="hljs-comment">// words (newValue) &#123;</span><br>        <span class="hljs-comment">//   console.log(&#x27;变化了&#x27;, newValue)</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-string">&#x27;obj.words&#x27;</span> (newValue) &#123;<br>          <span class="hljs-comment">// console.log(&#x27;变化了&#x27;, newValue)</span><br>          <span class="hljs-comment">// 防抖: 延迟执行 → 干啥事先等一等，延迟一会，一段时间内没有再次触发，才执行</span><br>          <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>            <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>              <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://applet-base-api-t.itheima.net/api/translate&#x27;</span>,<br>              <span class="hljs-attr">params</span>: &#123;<br>                <span class="hljs-attr">words</span>: newValue<br>              &#125;<br>            &#125;)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>)<br>          &#125;, <span class="hljs-number">300</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十三、watch侦听器"><a href="#十三、watch侦听器" class="headerlink" title="十三、watch侦听器"></a>十三、watch侦听器</h2><h3 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1.语法"></a>1.语法</h3><p>完整写法 —&gt;添加额外的配置项</p>
<ol>
<li>deep:true 对复杂类型进行深度监听</li>
<li>immdiate:true 初始化 立刻执行一次</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">obj</span>: &#123;<br>    <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;苹果&#x27;</span>,<br>    <span class="hljs-attr">lang</span>: <span class="hljs-string">&#x27;italy&#x27;</span><br>  &#125;,<br>&#125;,<br><br><span class="hljs-attr">watch</span>: &#123;<span class="hljs-comment">// watch 完整写法</span><br>  对象: &#123;<br>    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 深度监视</span><br>    <span class="hljs-attr">immdiate</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//立即执行handler函数</span><br>    handler (newValue) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue)<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="2-需求"><a href="#2-需求" class="headerlink" title="2.需求"></a>2.需求</h3><p><img src="/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/1682050515722.png" alt="68205051572"></p>
<ul>
<li>当文本框输入的时候 右侧翻译内容要时时变化</li>
<li>当下拉框中的语言发生变化的时候 右侧翻译的内容依然要时时变化</li>
<li>如果文本框中有默认值的话要立即翻译</li>
</ul>
<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt; <br>     <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>       <span class="hljs-attr">data</span>: &#123;<br>         <span class="hljs-attr">obj</span>: &#123;<br>           <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;小黑&#x27;</span>,<br>           <span class="hljs-attr">lang</span>: <span class="hljs-string">&#x27;italy&#x27;</span><br>         &#125;,<br>         <span class="hljs-attr">result</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 翻译结果</span><br>       &#125;,<br>       <span class="hljs-attr">watch</span>: &#123;<br>         <span class="hljs-attr">obj</span>: &#123;<br>           <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 深度监视</span><br>           <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 立刻执行，一进入页面handler就立刻执行一次</span><br>           handler (newValue) &#123;<br>             <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)<br>             <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>               <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>                 <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://applet-base-api-t.itheima.net/api/translate&#x27;</span>,<br>                 <span class="hljs-attr">params</span>: newValue<br>               &#125;)<br>               <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>)<br>             &#125;, <span class="hljs-number">300</span>)<br>           &#125;<br>         &#125; <br>       &#125;<br>     &#125;)<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h3><p>watch侦听器的写法有几种？</p>
<p>1.简单写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>  数据属性名 (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;,<br>  <span class="hljs-string">&#x27;对象.属性名&#x27;</span> (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>2.完整写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<span class="hljs-comment">// watch 完整写法</span><br>  数据属性名: &#123;<br>    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 深度监视(针对复杂类型)</span><br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否立刻执行一次handler</span><br>    handler (newValue) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day4</title>
    <url>/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/</url>
    <content><![CDATA[<h2 id="一、今日学习目标"><a href="#一、今日学习目标" class="headerlink" title="一、今日学习目标"></a>一、今日学习目标</h2><h3 id="1-组件的三大组成部分（结构-样式-逻辑）"><a href="#1-组件的三大组成部分（结构-样式-逻辑）" class="headerlink" title="1.组件的三大组成部分（结构&#x2F;样式&#x2F;逻辑）"></a>1.组件的三大组成部分（结构&#x2F;样式&#x2F;逻辑）</h3><p>​    scoped解决样式冲突&#x2F;data是一个函数</p>
<h3 id="2-组件通信"><a href="#2-组件通信" class="headerlink" title="2.组件通信"></a>2.组件通信</h3><ol>
<li>组件通信语法</li>
<li>父传子</li>
<li>子传父</li>
<li>非父子通信（扩展）</li>
</ol>
<h3 id="3-综合案例：小黑记事本（组件版）"><a href="#3-综合案例：小黑记事本（组件版）" class="headerlink" title="3.综合案例：小黑记事本（组件版）"></a>3.综合案例：小黑记事本（组件版）</h3><ol>
<li>拆分组件</li>
<li>列表渲染</li>
<li>数据添加</li>
<li>数据删除</li>
<li>列表统计</li>
<li>清空</li>
<li>持久化</li>
</ol>
<h3 id="4-进阶语法"><a href="#4-进阶语法" class="headerlink" title="4.进阶语法"></a>4.进阶语法</h3><ol>
<li>v-model原理</li>
<li>v-model应用于组件</li>
<li>sync修饰符</li>
<li>ref和$refs</li>
<li>$nextTick</li>
</ol>
<h2 id="二、scoped解决样式冲突"><a href="#二、scoped解决样式冲突" class="headerlink" title="二、scoped解决样式冲突"></a>二、scoped解决样式冲突</h2><h3 id="1-默认情况："><a href="#1-默认情况：" class="headerlink" title="1.默认情况："></a><strong>1.默认情况</strong>：</h3><p>写在组件中的样式会 <strong>全局生效</strong> →  因此很容易造成多个组件之间的样式冲突问题。</p>
<ol>
<li><p><strong>全局样式</strong>: 默认组件中的样式会作用到全局，任何一个组件中都会受到此样式的影响</p>
</li>
<li><p><strong>局部样式</strong>: 可以给组件加上<strong>scoped</strong> 属性,可以<strong>让样式只作用于当前组件</strong></p>
</li>
</ol>
<h3 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2.代码演示"></a>2.代码演示</h3><p>BaseOne.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-one&quot;&gt;<br>    BaseOne<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseTwo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-one&quot;&gt;<br>    BaseTwo<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;BaseOne&gt;&lt;/BaseOne&gt;<br>    &lt;BaseTwo&gt;&lt;/BaseTwo&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseOne from &#x27;./components/BaseOne&#x27;<br>import BaseTwo from &#x27;./components/BaseTwo&#x27;<br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  components: &#123;<br>    BaseOne,<br>    BaseTwo<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-scoped原理"><a href="#3-scoped原理" class="headerlink" title="3.scoped原理"></a>3.scoped原理</h3><ol>
<li>当前组件内标签都被添加<strong>data-v-hash值</strong> 的属性 </li>
<li>css选择器都被添加 [<strong>data-v-hash值</strong>] 的属性选择器</li>
</ol>
<p>最终效果: <strong>必须是当前组件的元素</strong>, 才会有这个自定义属性, 才会被这个样式作用到 </p>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682306517375.png" alt="68230651737"></p>
<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><ol>
<li>style的默认样式是作用到哪里的？</li>
<li>scoped的作用是什么？</li>
<li>style中推不推荐加scoped？</li>
</ol>
<h2 id="三、data必须是一个函数"><a href="#三、data必须是一个函数" class="headerlink" title="三、data必须是一个函数"></a>三、data必须是一个函数</h2><h3 id="1、data为什么要写成函数"><a href="#1、data为什么要写成函数" class="headerlink" title="1、data为什么要写成函数"></a>1、data为什么要写成函数</h3><p>一个组件的 <strong>data</strong> 选项必须<strong>是一个函数</strong>。目的是为了：保证每个组件实例，维护<strong>独立</strong>的一份<strong>数据</strong>对象。</p>
<p>每次创建新的组件实例，都会新<strong>执行一次data 函数</strong>，得到一个新对象。</p>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682306952078.png" alt="68230695207"></p>
<h3 id="2-代码演示-1"><a href="#2-代码演示-1" class="headerlink" title="2.代码演示"></a>2.代码演示</h3><p>BaseCount.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-count&quot;&gt;<br>    &lt;button @click=&quot;count--&quot;&gt;-&lt;/button&gt;<br>    &lt;span&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt;<br>    &lt;button @click=&quot;count++&quot;&gt;+&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data: function () &#123;<br>    return &#123;<br>      count: 100,<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.base-count &#123;<br>  margin: 20px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseCount&gt;&lt;/BaseCount&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseCount from &#x27;./components/BaseCount&#x27;<br>export default &#123;<br>  components: &#123;<br>    BaseCount,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>data写成函数的目的是什么？</p>
<h2 id="四、组件通信"><a href="#四、组件通信" class="headerlink" title="四、组件通信"></a>四、组件通信</h2><h3 id="1-什么是组件通信？"><a href="#1-什么是组件通信？" class="headerlink" title="1.什么是组件通信？"></a>1.什么是组件通信？</h3><p>组件通信，就是指<strong>组件与组件</strong>之间的<strong>数据传递</strong></p>
<ul>
<li>组件的数据是独立的，无法直接访问其他组件的数据。</li>
<li>想使用其他组件的数据，就需要组件通信</li>
</ul>
<h3 id="2-组件之间如何通信"><a href="#2-组件之间如何通信" class="headerlink" title="2.组件之间如何通信"></a>2.组件之间如何通信</h3><p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682308903094.png" alt="68230890309"></p>
<p>思考：</p>
<ol>
<li>组件之间有哪些关系？</li>
<li>对应的组件通信方案有哪几类？</li>
</ol>
<h3 id="3-组件关系分类"><a href="#3-组件关系分类" class="headerlink" title="3.组件关系分类"></a>3.组件关系分类</h3><ol>
<li>父子关系</li>
<li>非父子关系</li>
</ol>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318073803.png" alt="68231807380"></p>
<h3 id="4-通信解决方案"><a href="#4-通信解决方案" class="headerlink" title="4.通信解决方案"></a>4.通信解决方案</h3><p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318111090.png" alt="68231811109"></p>
<h3 id="5-父子通信流程"><a href="#5-父子通信流程" class="headerlink" title="5.父子通信流程"></a>5.父子通信流程</h3><ol>
<li>父组件通过 <strong>props</strong> 将数据传递给子组件</li>
<li>子组件利用 <strong>$emit</strong> 通知父组件修改更新</li>
</ol>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318444566.png" alt="68231844456"></p>
<h3 id="6-父向子通信代码示例"><a href="#6-父向子通信代码示例" class="headerlink" title="6.父向子通信代码示例"></a>6.父向子通信代码示例</h3><p>父组件通过<strong>props</strong>将数据传递给子组件</p>
<p>父组件App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot; style=&quot;border: 3px solid #000; margin: 10px&quot;&gt;<br>    我是APP组件 <br>    &lt;Son&gt;&lt;/Son&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Son from &#x27;./components/Son.vue&#x27;<br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  data() &#123;<br>    return &#123;<br>      myTitle: &#x27;学前端，就来黑马程序员&#x27;,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Son,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<p>子组件Son.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;son&quot; style=&quot;border:3px solid #000;margin:10px&quot;&gt;<br>    我是Son组件<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Son-Child&#x27;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318711785.png" alt="68231871178"></p>
<p>父向子传值步骤</p>
<ol>
<li>给子组件以添加属性的方式传值</li>
<li>子组件内部通过props接收</li>
<li>模板中直接使用 props接收的值</li>
</ol>
<h3 id="7-子向父通信代码示例"><a href="#7-子向父通信代码示例" class="headerlink" title="7.子向父通信代码示例"></a>7.子向父通信代码示例</h3><p>子组件利用 <strong>$emit</strong> 通知父组件，进行修改更新</p>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318965635.png" alt="68231896563"></p>
<p>子向父传值步骤</p>
<ol>
<li>$emit触发事件，给父组件发送消息通知</li>
<li>父组件监听$emit触发的事件</li>
<li>提供处理函数，在函数的性参中获取传过来的参数</li>
</ol>
<h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h3><ol>
<li>组件关系分类有哪两种</li>
<li>父子组件通信的流程是什么？<ol>
<li>父向子</li>
<li>子向父</li>
</ol>
</li>
</ol>
<h2 id="五、什么是props"><a href="#五、什么是props" class="headerlink" title="五、什么是props"></a>五、什么是props</h2><h3 id="1-Props-定义"><a href="#1-Props-定义" class="headerlink" title="1.Props 定义"></a>1.Props 定义</h3><p>组件上 注册的一些  自定义属性</p>
<h3 id="2-Props-作用"><a href="#2-Props-作用" class="headerlink" title="2.Props 作用"></a>2.Props 作用</h3><p>向子组件传递数据</p>
<h3 id="3-特点"><a href="#3-特点" class="headerlink" title="3.特点"></a>3.特点</h3><ol>
<li>可以 传递 <strong>任意数量</strong> 的prop</li>
<li>可以 传递 <strong>任意类型</strong> 的prop</li>
</ol>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682320156914.png" alt="68232015691"></p>
<h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>父组件App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;UserInfo<br>      :username=&quot;username&quot;<br>      :age=&quot;age&quot;<br>      :isSingle=&quot;isSingle&quot;<br>      :car=&quot;car&quot;<br>      :hobby=&quot;hobby&quot;<br>    &gt;&lt;/UserInfo&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import UserInfo from &#x27;./components/UserInfo.vue&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      username: &#x27;小帅&#x27;,<br>      age: 28,<br>      isSingle: true,<br>      car: &#123;<br>        brand: &#x27;宝马&#x27;,<br>      &#125;,<br>      hobby: [&#x27;篮球&#x27;, &#x27;足球&#x27;, &#x27;羽毛球&#x27;],<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    UserInfo,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>子组件UserInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;userinfo&quot;&gt;<br>    &lt;h3&gt;我是个人信息组件&lt;/h3&gt;<br>    &lt;div&gt;姓名：&lt;/div&gt;<br>    &lt;div&gt;年龄：&lt;/div&gt;<br>    &lt;div&gt;是否单身：&lt;/div&gt;<br>    &lt;div&gt;座驾：&lt;/div&gt;<br>    &lt;div&gt;兴趣爱好：&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  <br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.userinfo &#123;<br>  width: 300px;<br>  border: 3px solid #000;<br>  padding: 20px;<br>&#125;<br>.userinfo &gt; div &#123;<br>  margin: 20px 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="六、props校验"><a href="#六、props校验" class="headerlink" title="六、props校验"></a>六、props校验</h2><h3 id="1-思考"><a href="#1-思考" class="headerlink" title="1.思考"></a>1.思考</h3><p>组件的props可以乱传吗</p>
<h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h3><p>为组件的 prop 指定<strong>验证要求</strong>，不符合要求，控制台就会有<strong>错误提示</strong>  → 帮助开发者，快速发现错误</p>
<h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h3><ul>
<li><strong>类型校验</strong></li>
<li>非空校验</li>
<li>默认值</li>
<li>自定义校验</li>
</ul>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682320684053.png" alt="68232068405"></p>
<h3 id="4-代码演示-1"><a href="#4-代码演示-1" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseProgress :w=&quot;width&quot;&gt;&lt;/BaseProgress&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseProgress from &#x27;./components/BaseProgress.vue&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      width: 30,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    BaseProgress,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseProgress.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-progress&quot;&gt;<br>    &lt;div class=&quot;inner&quot; :style=&quot;&#123; width: w + &#x27;%&#x27; &#125;&quot;&gt;<br>      &lt;span&gt;&#123;&#123; w &#125;&#125;%&lt;/span&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: [&#x27;w&#x27;],<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-progress &#123;<br>  height: 26px;<br>  width: 400px;<br>  border-radius: 15px;<br>  background-color: #272425;<br>  border: 3px solid #272425;<br>  box-sizing: border-box;<br>  margin-bottom: 30px;<br>&#125;<br>.inner &#123;<br>  position: relative;<br>  background: #379bff;<br>  border-radius: 15px;<br>  height: 25px;<br>  box-sizing: border-box;<br>  left: -3px;<br>  top: -2px;<br>&#125;<br>.inner span &#123;<br>  position: absolute;<br>  right: 0;<br>  top: 26px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="七、props校验完整写法"><a href="#七、props校验完整写法" class="headerlink" title="七、props校验完整写法"></a>七、props校验完整写法</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">props: &#123;<br>  校验的属性名: &#123;<br>    type: 类型,  // Number String Boolean ...<br>    required: true, // 是否必填<br>    default: 默认值, // 默认值<br>    validator (value) &#123;<br>      // 自定义校验逻辑<br>      return 是否通过校验<br>    &#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>

<h3 id="2-代码实例"><a href="#2-代码实例" class="headerlink" title="2.代码实例"></a>2.代码实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  // 完整写法（类型、默认值、非空、自定义校验）<br>  props: &#123;<br>    w: &#123;<br>      type: Number,<br>      //required: true,<br>      default: 0,<br>      validator(val) &#123;<br>        // console.log(val)<br>        if (val &gt;= 100 || val &lt;= 0) &#123;<br>          console.error(&#x27;传入的范围必须是0-100之间&#x27;)<br>          return false<br>        &#125; else &#123;<br>          return true<br>        &#125;<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><p>1.default和required一般不同时写（因为当时必填项时，肯定是有值的）</p>
<p>2.default后面如果是简单类型的值，可以直接写默认。如果是复杂类型的值，则需要以函数的形式return一个默认值</p>
<h2 id="八、props-data、单向数据流"><a href="#八、props-data、单向数据流" class="headerlink" title="八、props&amp;data、单向数据流"></a>八、props&amp;data、单向数据流</h2><h3 id="1-共同点"><a href="#1-共同点" class="headerlink" title="1.共同点"></a>1.共同点</h3><p>都可以给组件提供数据</p>
<h3 id="2-区别"><a href="#2-区别" class="headerlink" title="2.区别"></a>2.区别</h3><ul>
<li>data 的数据是<strong>自己</strong>的  →   随便改  </li>
<li>prop 的数据是<strong>外部</strong>的  →   不能直接改，要遵循 <strong>单向数据流</strong></li>
</ul>
<h3 id="3-单向数据流："><a href="#3-单向数据流：" class="headerlink" title="3.单向数据流："></a>3.单向数据流：</h3><p>父级props 的数据更新，会向下流动，影响子组件。这个数据流动是单向的</p>
<h3 id="4-代码演示-2"><a href="#4-代码演示-2" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseCount&gt;&lt;/BaseCount&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseCount from &#x27;./components/BaseCount.vue&#x27;<br>export default &#123;<br>  components:&#123;<br>    BaseCount<br>  &#125;,<br>  data()&#123;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseCount.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-count&quot;&gt;<br>    &lt;button @click=&quot;count--&quot;&gt;-&lt;/button&gt;<br>    &lt;span&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt;<br>    &lt;button @click=&quot;count++&quot;&gt;+&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  // 1.自己的数据随便修改  （谁的数据 谁负责）<br>   data () &#123;<br>     return &#123;<br>       count: 100,<br>     &#125;<br>   &#125;,<br>  // 2.外部传过来的数据 不能随便修改<br>  //props: &#123;<br>  //  count: &#123;<br>  //    type: Number,<br>  //  &#125;, <br>  //&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.base-count &#123;<br>  margin: 20px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682323734228.png" alt="68232373422"></p>
<h3 id="5-口诀"><a href="#5-口诀" class="headerlink" title="5.口诀"></a>5.口诀</h3><p><strong>谁的数据谁负责</strong></p>
<h2 id="九、综合案例-组件拆分"><a href="#九、综合案例-组件拆分" class="headerlink" title="九、综合案例-组件拆分"></a>九、综合案例-组件拆分</h2><h3 id="1-需求说明"><a href="#1-需求说明" class="headerlink" title="1.需求说明"></a>1.需求说明</h3><ul>
<li>拆分基础组件</li>
<li>渲染待办任务</li>
<li>添加任务</li>
<li>删除任务</li>
<li>底部合计 和 清空功能</li>
<li>持久化存储</li>
</ul>
<h3 id="2-拆分基础组件"><a href="#2-拆分基础组件" class="headerlink" title="2.拆分基础组件"></a>2.拆分基础组件</h3><p>咱们可以把小黑记事本原有的结构拆成三部分内容：头部（TodoHeader）、列表(TodoMain)、底部(TodoFooter)</p>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682325598418.png" alt="68232559841"></p>
<h2 id="十、综合案例-列表渲染"><a href="#十、综合案例-列表渲染" class="headerlink" title="十、综合案例-列表渲染"></a>十、综合案例-列表渲染</h2><p>思路分析：</p>
<ol>
<li>提供数据：提供在公共的父组件 App.vue</li>
<li>通过父传子，将数据传递给TodoMain</li>
<li>利用v-for进行渲染</li>
</ol>
<h2 id="十一、综合案例-添加功能"><a href="#十一、综合案例-添加功能" class="headerlink" title="十一、综合案例-添加功能"></a>十一、综合案例-添加功能</h2><p>思路分析：</p>
<ol>
<li>收集表单数据  v-model</li>
<li>监听时间 （回车+点击 都要进行添加）</li>
<li>子传父，将任务名称传递给父组件App.vue</li>
<li>父组件接受到数据后 进行添加 <strong>unshift</strong>(自己的数据自己负责)</li>
</ol>
<h2 id="十二、综合案例-删除功能"><a href="#十二、综合案例-删除功能" class="headerlink" title="十二、综合案例-删除功能"></a>十二、综合案例-删除功能</h2><p>思路分析：</p>
<ol>
<li>监听时间（监听删除的点击）携带id</li>
<li>子传父，将删除的id传递给父组件App.vue</li>
<li>进行删除 <strong>filter</strong>  (自己的数据自己负责)</li>
</ol>
<h2 id="十三、综合案例-底部功能及持久化存储"><a href="#十三、综合案例-底部功能及持久化存储" class="headerlink" title="十三、综合案例-底部功能及持久化存储"></a>十三、综合案例-底部功能及持久化存储</h2><p>思路分析：</p>
<ol>
<li>底部合计：父组件传递list到底部组件  —&gt;展示合计</li>
<li>清空功能：监听事件 —&gt; <strong>子组件</strong>通知父组件 —&gt;父组件清空</li>
<li>持久化存储：watch监听数据变化，持久化到本地</li>
</ol>
<h2 id="十四、非父子通信-event-bus-事件总线"><a href="#十四、非父子通信-event-bus-事件总线" class="headerlink" title="十四、非父子通信-event bus 事件总线"></a>十四、非父子通信-event bus 事件总线</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><p>非父子组件之间，进行简易消息传递。(复杂场景→ Vuex)</p>
<h3 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h3><ol>
<li><p>创建一个都能访问的事件总线 （空Vue实例）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Bus</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Bus</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>A组件（接受方），监听Bus的 $on事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created () &#123;<br>  Bus.$on(&#x27;sendMsg&#x27;, (msg) =&gt; &#123;<br>    this.msg = msg<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>B组件（发送方），触发Bus的$emit事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">Bus.$emit(&#x27;sendMsg&#x27;, &#x27;这是一个消息&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682328392400.png" alt="68232839240"></p>
</li>
</ol>
<h3 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3.代码示例"></a>3.代码示例</h3><p>EventBus.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Bus</span>  =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Bus</span><br></code></pre></td></tr></table></figure>

<p>BaseA.vue(接受方)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-a&quot;&gt;<br>    我是A组件（接收方）<br>    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;  <br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Bus from &#x27;../utils/EventBus&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg: &#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-a &#123;<br>  width: 200px;<br>  height: 200px;<br>  border: 3px solid #000;<br>  border-radius: 3px;<br>  margin: 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseB.vue(发送方)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-b&quot;&gt;<br>    &lt;div&gt;我是B组件（发布方）&lt;/div&gt;<br>    &lt;button&gt;发送消息&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Bus from &#x27;../utils/EventBus&#x27;<br>export default &#123;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-b &#123;<br>  width: 200px;<br>  height: 200px;<br>  border: 3px solid #000;<br>  border-radius: 3px;<br>  margin: 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseA&gt;&lt;/BaseA&gt;<br>    &lt;BaseB&gt;&lt;/BaseB&gt; <br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseA from &#x27;./components/BaseA.vue&#x27;<br>import BaseB from &#x27;./components/BaseB.vue&#x27; <br>export default &#123;<br>  components:&#123;<br>    BaseA,<br>    BaseB<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h3><p>1.非父子组件传值借助什么？</p>
<p>2.什么是事件总线</p>
<p>3.发送方应该调用事件总线的哪个方法</p>
<p>4.接收方应该调用事件总线的哪个方法</p>
<p>5.一个组件发送数据，可不可以被多个组件接收</p>
<h2 id="十五、非父子通信-provide-inject"><a href="#十五、非父子通信-provide-inject" class="headerlink" title="十五、非父子通信-provide&amp;inject"></a>十五、非父子通信-provide&amp;inject</h2><h3 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1.作用"></a>1.作用</h3><p>跨层级共享数据</p>
<h3 id="2-场景"><a href="#2-场景" class="headerlink" title="2.场景"></a>2.场景</h3><p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682329516878.png" alt="68232950551"></p>
<h3 id="3-语法-1"><a href="#3-语法-1" class="headerlink" title="3.语法"></a>3.语法</h3><ol>
<li>父组件 provide提供数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  provide () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-comment">// 普通类型【非响应式】</span><br>       <span class="hljs-attr">color</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>, <br>       <span class="hljs-comment">// 复杂类型【响应式】</span><br>       <span class="hljs-attr">userInfo</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">userInfo</span>, <br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>2.子&#x2F;孙组件 inject获取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-string">&#x27;color&#x27;</span>,<span class="hljs-string">&#x27;userInfo&#x27;</span>],<br>  created () &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">userInfo</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a>4.注意</h3><ul>
<li>provide提供的简单类型的数据不是响应式的，复杂类型数据是响应式。（推荐提供复杂类型数据）</li>
<li>子&#x2F;孙组件通过inject获取的数据，不能在自身组件内修改</li>
</ul>
<h2 id="十六、v-model原理"><a href="#十六、v-model原理" class="headerlink" title="十六、v-model原理"></a>十六、v-model原理</h2><h3 id="1-原理："><a href="#1-原理：" class="headerlink" title="1.原理："></a>1.原理：</h3><p>v-model本质上是一个语法糖。例如应用在输入框上，就是value属性 和 input事件 的合写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot; &gt;<br>    &lt;input v-model=&quot;msg&quot; type=&quot;text&quot;&gt;<br><br>    &lt;input :value=&quot;msg&quot; @input=&quot;msg = $event.target.value&quot; type=&quot;text&quot;&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure>

<h3 id="2-作用："><a href="#2-作用：" class="headerlink" title="2.作用："></a>2.作用：</h3><p>提供数据的双向绑定</p>
<ul>
<li>数据变，视图跟着变 :value</li>
<li>视图变，数据跟着变 @input</li>
</ul>
<h3 id="3-注意-1"><a href="#3-注意-1" class="headerlink" title="3.注意"></a>3.注意</h3><p><strong>$event</strong> 用于在模板中，获取事件的形参</p>
<h3 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4.代码示例"></a>4.代码示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;input type=&quot;text&quot;  /&gt;<br>    &lt;br /&gt; <br>    &lt;input type=&quot;text&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg1: &#x27;&#x27;,<br>      msg2: &#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt; <br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="5-v-model使用在其他表单元素上的原理"><a href="#5-v-model使用在其他表单元素上的原理" class="headerlink" title="5.v-model使用在其他表单元素上的原理"></a>5.v-model使用在其他表单元素上的原理</h3><p>不同的表单元素， v-model在底层的处理机制是不一样的。比如给checkbox使用v-model</p>
<p>底层处理的是 checked属性和change事件。</p>
<p><strong>不过咱们只需要掌握应用在文本框上的原理即可</strong></p>
<h2 id="十七、表单类组件封装"><a href="#十七、表单类组件封装" class="headerlink" title="十七、表单类组件封装"></a>十七、表单类组件封装</h2><h3 id="1-需求目标"><a href="#1-需求目标" class="headerlink" title="1.需求目标"></a>1.需求目标</h3><p>实现子组件和父组件数据的双向绑定 （实现App.vue中的selectId和子组件选中的数据进行双向绑定）</p>
<h3 id="2-代码演示-2"><a href="#2-代码演示-2" class="headerlink" title="2.代码演示"></a>2.代码演示</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseSelect&gt;&lt;/BaseSelect&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseSelect from &#x27;./components/BaseSelect.vue&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      selectId: &#x27;102&#x27;,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    BaseSelect,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseSelect.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;select&gt;<br>      &lt;option value=&quot;101&quot;&gt;北京&lt;/option&gt;<br>      &lt;option value=&quot;102&quot;&gt;上海&lt;/option&gt;<br>      &lt;option value=&quot;103&quot;&gt;武汉&lt;/option&gt;<br>      &lt;option value=&quot;104&quot;&gt;广州&lt;/option&gt;<br>      &lt;option value=&quot;105&quot;&gt;深圳&lt;/option&gt;<br>    &lt;/select&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十八、v-model简化代码"><a href="#十八、v-model简化代码" class="headerlink" title="十八、v-model简化代码"></a>十八、v-model简化代码</h2><h3 id="1-目标："><a href="#1-目标：" class="headerlink" title="1.目标："></a>1.目标：</h3><p>父组件通过v-model <strong>简化代码</strong>，实现子组件和父组件数据 <strong>双向绑定</strong></p>
<h3 id="2-如何简化："><a href="#2-如何简化：" class="headerlink" title="2.如何简化："></a>2.如何简化：</h3><p>v-model其实就是 :value和@input事件的简写</p>
<ul>
<li>子组件：props通过value接收数据，事件触发 input</li>
<li>父组件：v-model直接绑定数据</li>
</ul>
<h3 id="3-代码示例-1"><a href="#3-代码示例-1" class="headerlink" title="3.代码示例"></a>3.代码示例</h3><p>子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;select :value=&quot;value&quot; @change=&quot;handleChange&quot;&gt;...&lt;/select&gt;<br>props: &#123;<br>  value: String<br>&#125;,<br>methods: &#123;<br>  handleChange (e) &#123;<br>    this.$emit(&#x27;input&#x27;, e.target.value)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;BaseSelect v-model=&quot;selectId&quot;&gt;&lt;/BaseSelect&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十九、-sync修饰符"><a href="#十九、-sync修饰符" class="headerlink" title="十九、.sync修饰符"></a>十九、.sync修饰符</h2><h3 id="1-作用-2"><a href="#1-作用-2" class="headerlink" title="1.作用"></a>1.作用</h3><p>可以实现 <strong>子组件</strong> 与 <strong>父组件数据</strong> 的 <strong>双向绑定</strong>，简化代码</p>
<p>简单理解：<strong>子组件可以修改父组件传过来的props值</strong></p>
<h3 id="2-场景-1"><a href="#2-场景-1" class="headerlink" title="2.场景"></a>2.场景</h3><p>封装弹框类的基础组件， visible属性 true显示 false隐藏</p>
<h3 id="3-本质"><a href="#3-本质" class="headerlink" title="3.本质"></a>3.本质</h3><p>.sync修饰符 就是 <strong>:属性名</strong> 和 <strong>@update:属性名</strong> 合写</p>
<h3 id="4-语法"><a href="#4-语法" class="headerlink" title="4.语法"></a>4.语法</h3><p>父组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">//.sync写法<br>&lt;BaseDialog :visible.sync=&quot;isShow&quot; /&gt;<br>--------------------------------------<br>//完整写法<br>&lt;BaseDialog <br>  :visible=&quot;isShow&quot; <br>  @update:visible=&quot;isShow = $event&quot; <br>/&gt;<br></code></pre></td></tr></table></figure>

<p>子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">props: &#123;<br>  visible: Boolean<br>&#125;,<br><br>this.$emit(&#x27;update:visible&#x27;, false)<br></code></pre></td></tr></table></figure>

<h3 id="5-代码示例"><a href="#5-代码示例" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;button @click=&quot;openDialog&quot;&gt;退出按钮&lt;/button&gt;<br>    &lt;BaseDialog :isShow=&quot;isShow&quot;&gt;&lt;/BaseDialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseDialog from &#x27;./components/BaseDialog.vue&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      isShow: false,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    BaseDialog,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseDialog.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-dialog-wrap&quot; v-show=&quot;isShow&quot;&gt;<br>    &lt;div class=&quot;base-dialog&quot;&gt;<br>      &lt;div class=&quot;title&quot;&gt;<br>        &lt;h3&gt;温馨提示：&lt;/h3&gt;<br>        &lt;button class=&quot;close&quot;&gt;x&lt;/button&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;content&quot;&gt;<br>        &lt;p&gt;你确认要退出本系统么？&lt;/p&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;footer&quot;&gt;<br>        &lt;button&gt;确认&lt;/button&gt;<br>        &lt;button&gt;取消&lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    isShow: Boolean,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-dialog-wrap &#123;<br>  width: 300px;<br>  height: 200px;<br>  box-shadow: 2px 2px 2px 2px #ccc;<br>  position: fixed;<br>  left: 50%;<br>  top: 50%;<br>  transform: translate(-50%, -50%);<br>  padding: 0 10px;<br>&#125;<br>.base-dialog .title &#123;<br>  display: flex;<br>  justify-content: space-between;<br>  align-items: center;<br>  border-bottom: 2px solid #000;<br>&#125;<br>.base-dialog .content &#123;<br>  margin-top: 38px;<br>&#125;<br>.base-dialog .title .close &#123;<br>  width: 20px;<br>  height: 20px;<br>  cursor: pointer;<br>  line-height: 10px;<br>&#125;<br>.footer &#123;<br>  display: flex;<br>  justify-content: flex-end;<br>  margin-top: 26px;<br>&#125;<br>.footer button &#123;<br>  width: 80px;<br>  height: 40px;<br>&#125;<br>.footer button:nth-child(1) &#123;<br>  margin-right: 10px;<br>  cursor: pointer;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>1.父组件如果想让子组件修改传过去的值 必须加什么修饰符？</p>
<p>2.子组件要修改父组件的props值 必须使用什么语法？</p>
<h2 id="二十、ref和-refs"><a href="#二十、ref和-refs" class="headerlink" title="二十、ref和$refs"></a>二十、ref和$refs</h2><h3 id="1-作用-3"><a href="#1-作用-3" class="headerlink" title="1.作用"></a>1.作用</h3><p>利用ref 和 $refs 可以用于 获取 dom 元素 或 组件实例</p>
<h3 id="2-特点："><a href="#2-特点：" class="headerlink" title="2.特点："></a>2.特点：</h3><p>查找范围 →  当前组件内(更精确稳定)</p>
<h3 id="3-语法-2"><a href="#3-语法-2" class="headerlink" title="3.语法"></a>3.语法</h3><p>1.给要获取的盒子添加ref属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;chartRef&quot;</span>&gt;</span>我是渲染图表的容器<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>2.获取时通过 $refs获取  this.$refs.chartRef 获取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">mounted () &#123;<br>  console.log(this.$refs.chartRef)<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="4-注意-1"><a href="#4-注意-1" class="headerlink" title="4.注意"></a>4.注意</h3><p>之前只用document.querySelect(‘.box’) 获取的是整个页面中的盒子</p>
<h3 id="5-代码示例-1"><a href="#5-代码示例-1" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseChart&gt;&lt;/BaseChart&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseChart from &#x27;./components/BaseChart.vue&#x27;<br>export default &#123;<br>  components:&#123;<br>    BaseChart<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseChart.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-chart-box&quot; ref=&quot;baseChartBox&quot;&gt;子组件&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// yarn add echarts 或者 npm i echarts<br>import * as echarts from &#x27;echarts&#x27;<br><br>export default &#123;<br>  mounted() &#123;<br>    // 基于准备好的dom，初始化echarts实例<br>    var myChart = echarts.init(document.querySelect(&#x27;.base-chart-box&#x27;))<br>    // 绘制图表<br>    myChart.setOption(&#123;<br>      title: &#123;<br>        text: &#x27;ECharts 入门示例&#x27;,<br>      &#125;,<br>      tooltip: &#123;&#125;,<br>      xAxis: &#123;<br>        data: [&#x27;衬衫&#x27;, &#x27;羊毛衫&#x27;, &#x27;雪纺衫&#x27;, &#x27;裤子&#x27;, &#x27;高跟鞋&#x27;, &#x27;袜子&#x27;],<br>      &#125;,<br>      yAxis: &#123;&#125;,<br>      series: [<br>        &#123;<br>          name: &#x27;销量&#x27;,<br>          type: &#x27;bar&#x27;,<br>          data: [5, 20, 36, 10, 10, 20],<br>        &#125;,<br>      ],<br>    &#125;)<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-chart-box &#123;<br>  width: 400px;<br>  height: 300px;<br>  border: 3px solid #000;<br>  border-radius: 6px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="二十一、异步更新-nextTick"><a href="#二十一、异步更新-nextTick" class="headerlink" title="二十一、异步更新 &amp; $nextTick"></a>二十一、异步更新 &amp; $nextTick</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>编辑标题,  编辑框自动聚焦</p>
<ol>
<li>点击编辑，显示编辑框</li>
<li>让编辑框，立刻获取焦点</li>
</ol>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682394495346.png" alt="68239449534"></p>
<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;div v-if=&quot;isShowEdit&quot;&gt;<br>      &lt;input type=&quot;text&quot; v-model=&quot;editValue&quot; ref=&quot;inp&quot; /&gt;<br>      &lt;button&gt;确认&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;div v-else&gt;<br>      &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;<br>      &lt;button @click=&quot;editFn&quot;&gt;编辑&lt;/button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      title: &#x27;大标题&#x27;,<br>      isShowEdit: false,<br>      editValue: &#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    editFn() &#123;<br>        // 显示输入框<br>        this.isShowEdit = true  <br>        // 获取焦点<br>        this.$refs.inp.focus() <br>    &#125;  &#125;,<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure>



<h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3.问题"></a>3.问题</h3><p>“显示之后”，立刻获取焦点是不能成功的！</p>
<p>原因：Vue 是异步更新DOM  (提升性能)</p>
<h3 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h3><p>$nextTick：<strong>等 DOM更新后</strong>,才会触发执行此方法里的函数体</p>
<p><strong>语法:</strong> this.$nextTick(函数体)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">inp</span>.<span class="hljs-title function_">focus</span>()<br>&#125;)<br></code></pre></td></tr></table></figure>

<p><strong>注意：</strong>$nextTick 内的函数体 一定是<strong>箭头函数</strong>，这样才能让函数内部的this指向Vue实例</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day5</title>
    <url>/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/</url>
    <content><![CDATA[<h2 id="一、今日学习目标"><a href="#一、今日学习目标" class="headerlink" title="一、今日学习目标"></a>一、今日学习目标</h2><h3 id="1-自定义指令"><a href="#1-自定义指令" class="headerlink" title="1.自定义指令"></a>1.自定义指令</h3><ul>
<li>基本语法（全局、局部注册）</li>
<li>指令的值</li>
<li>v-loading的指令封装</li>
</ul>
<h3 id="2-插槽"><a href="#2-插槽" class="headerlink" title="2.插槽"></a>2.插槽</h3><ul>
<li>默认插槽</li>
<li>具名插槽</li>
<li>作用域插槽</li>
</ul>
<h3 id="3-综合案例：商品列表"><a href="#3-综合案例：商品列表" class="headerlink" title="3.综合案例：商品列表"></a>3.综合案例：商品列表</h3><ul>
<li>MyTag组件封装</li>
<li>MyTable组件封装</li>
</ul>
<h3 id="4-路由入门"><a href="#4-路由入门" class="headerlink" title="4.路由入门"></a>4.路由入门</h3><ul>
<li>单页应用程序</li>
<li>路由</li>
<li>VueRouter的基本使用</li>
</ul>
<h2 id="二、自定义指令"><a href="#二、自定义指令" class="headerlink" title="二、自定义指令"></a>二、自定义指令</h2><h3 id="1-指令介绍"><a href="#1-指令介绍" class="headerlink" title="1.指令介绍"></a>1.指令介绍</h3><ul>
<li><p>内置指令：<strong>v-html、v-if、v-bind、v-on</strong>… 这都是Vue给咱们内置的一些指令，可以直接使用</p>
</li>
<li><p>自定义指令：同时Vue也支持让开发者，自己注册一些指令。这些指令被称为<strong>自定义指令</strong></p>
<p>每个指令都有自己各自独立的功能</p>
</li>
</ul>
<h3 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2.自定义指令"></a>2.自定义指令</h3><p>概念：自己定义的指令，可以<strong>封装一些DOM操作</strong>，扩展额外的功能</p>
<h3 id="3-自定义指令语法"><a href="#3-自定义指令语法" class="headerlink" title="3.自定义指令语法"></a>3.自定义指令语法</h3><ul>
<li><p>全局注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在main.js中</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;指令名&#x27;</span>, &#123;<br>  <span class="hljs-string">&quot;inserted&quot;</span> (el) &#123;<br>    <span class="hljs-comment">// 可以对 el 标签，扩展额外功能</span><br>    el.<span class="hljs-title function_">focus</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>局部注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">//在Vue组件的配置项中<br>directives: &#123;<br>  &quot;指令名&quot;: &#123;<br>    inserted () &#123;<br>      // 可以对 el 标签，扩展额外功能<br>      el.focus()<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>使用指令</p>
<p>注意：在使用指令的时候，一定要<strong>先注册</strong>，<strong>再使用</strong>，否则会报错<br>使用指令语法： v-指令名。如：<input type="text" v-focus>  </p>
<p><strong>注册</strong>指令时<strong>不用</strong>加<strong>v-前缀</strong>，但<strong>使用时</strong>一定要<strong>加v-前缀</strong></p>
</li>
</ul>
<h3 id="4-指令中的配置项介绍"><a href="#4-指令中的配置项介绍" class="headerlink" title="4.指令中的配置项介绍"></a>4.指令中的配置项介绍</h3><p>inserted:被绑定元素插入父节点时调用的钩子函数</p>
<p>el：使用指令的那个DOM元素</p>
<h3 id="5-代码示例"><a href="#5-代码示例" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>需求：当页面加载时，让元素获取焦点（<strong>autofocus在safari浏览器有兼容性</strong>）</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;<br>  &lt;h1&gt;自定义指令&lt;/h1&gt;<br>  &lt;input v-focus ref=&quot;inp&quot; type=&quot;text&quot;&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>



<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>1.自定义指令的作用是什么？</p>
<p>2.使用自定义指令的步骤是哪两步？</p>
<h2 id="三、自定义指令-指令的值"><a href="#三、自定义指令-指令的值" class="headerlink" title="三、自定义指令-指令的值"></a>三、自定义指令-指令的值</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>实现一个 color 指令 - 传入不同的颜色, 给标签设置文字颜色</p>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><p>1.在绑定指令时，可以通过“等号”的形式为指令 绑定 具体的参数值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>2.通过 binding.value 可以拿到指令值，<strong>指令值修改会 触发 update 函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">directives</span>: &#123;<br>  <span class="hljs-attr">color</span>: &#123;<br>    inserted (el, binding) &#123;<br>      el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = binding.<span class="hljs-property">value</span><br>    &#125;,<br>    update (el, binding) &#123;<br>      el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = binding.<span class="hljs-property">value</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3.代码示例"></a>3.代码示例</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>     &lt;!--显示红色--&gt; <br>    &lt;h2 v-color=&quot;color1&quot;&gt;指令的值1测试&lt;/h2&gt;<br>     &lt;!--显示蓝色--&gt; <br>    &lt;h2 v-color=&quot;color2&quot;&gt;指令的值2测试&lt;/h2&gt;<br>     &lt;button&gt;<br>        改变第一个h1的颜色<br>    &lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      color1: &#x27;red&#x27;,<br>      color2: &#x27;blue&#x27;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="四、自定义指令-v-loading指令的封装"><a href="#四、自定义指令-v-loading指令的封装" class="headerlink" title="四、自定义指令-v-loading指令的封装"></a>四、自定义指令-v-loading指令的封装</h2><h3 id="1-场景"><a href="#1-场景" class="headerlink" title="1.场景"></a>1.场景</h3><p>实际开发过程中，发送请求需要时间，在请求的数据未回来时，页面会处于<strong>空白状态</strong>  &#x3D;&gt;  用户体验不好</p>
<h3 id="2-需求"><a href="#2-需求" class="headerlink" title="2.需求"></a>2.需求</h3><p>封装一个 v-loading 指令，实现加载中的效果</p>
<h3 id="3-分析"><a href="#3-分析" class="headerlink" title="3.分析"></a>3.分析</h3><p>1.本质 loading效果就是一个蒙层，盖在了盒子上</p>
<p>2.数据请求中，开启loading状态，添加蒙层</p>
<p>3.数据请求完毕，关闭loading状态，移除蒙层</p>
<h3 id="4-实现"><a href="#4-实现" class="headerlink" title="4.实现"></a>4.实现</h3><p>1.准备一个 loading类，通过伪元素定位，设置宽高，实现蒙层</p>
<p>2.开启关闭 loading状态（添加移除蒙层），本质只需要添加移除类即可</p>
<p>3.结合自定义指令的语法进行封装复用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;./loading.gif&quot;</span>) no-repeat center;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="5-准备代码"><a href="#5-准备代码" class="headerlink" title="5.准备代码"></a>5.准备代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.source &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.time &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.img&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 安装axios =&gt;  yarn add axios || npm i axios</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 接口地址：http://hmajax.itheima.net/api/news</span></span><br><span class="language-javascript"><span class="hljs-comment">// 请求方式：get</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  data () &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">list</span>: [],</span><br><span class="language-javascript">      <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">isLoading2</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-keyword">async</span> created () &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 发送请求获取数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://hmajax.itheima.net/api/news&#x27;</span>)</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 2. 更新到 list 中，用于页面渲染 v-for</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">    &#125;, <span class="hljs-number">2000</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./loading.gif&#x27;</span>) no-repeat center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid orange;</span><br><span class="language-css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">  <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">object-fit</span>: cover;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="五、插槽-默认插槽"><a href="#五、插槽-默认插槽" class="headerlink" title="五、插槽-默认插槽"></a>五、插槽-默认插槽</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><p>让组件内部的一些 <strong>结构</strong> 支持 <strong>自定义</strong></p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682410215245.png" alt="68241021524"></p>
<h3 id="2-需求-1"><a href="#2-需求-1" class="headerlink" title="2.需求"></a>2.需求</h3><p>将需要多次显示的对话框,封装成一个组件</p>
<h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3.问题"></a>3.问题</h3><p>组件的内容部分，<strong>不希望写死</strong>，希望能使用的时候<strong>自定义</strong>。怎么办</p>
<h3 id="4-插槽的基本语法"><a href="#4-插槽的基本语法" class="headerlink" title="4.插槽的基本语法"></a>4.插槽的基本语法</h3><ol>
<li>组件内需要定制的结构部分，改用**<slot></slot>**占位</li>
<li>使用组件时, **<MyDialog></MyDialog>**标签内部, 传入结构替换slot</li>
<li>给插槽传入内容时，可以传入<strong>纯文本、html标签、组件</strong></li>
</ol>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682410329794.png" alt="68241032979"></p>
<h3 id="5-代码示例-1"><a href="#5-代码示例-1" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>MyDialog.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;dialog&quot;&gt;<br>    &lt;div class=&quot;dialog-header&quot;&gt;<br>      &lt;h3&gt;友情提示&lt;/h3&gt;<br>      &lt;span class=&quot;close&quot;&gt;✖️&lt;/span&gt;<br>    &lt;/div&gt;<br><br>    &lt;div class=&quot;dialog-content&quot;&gt;<br>      您确定要进行删除操作吗？<br>    &lt;/div&gt;<br>    &lt;div class=&quot;dialog-footer&quot;&gt;<br>      &lt;button&gt;取消&lt;/button&gt;<br>      &lt;button&gt;确认&lt;/button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>* &#123;<br>  margin: 0;<br>  padding: 0;<br>&#125;<br>.dialog &#123;<br>  width: 470px;<br>  height: 230px;<br>  padding: 0 25px;<br>  background-color: #ffffff;<br>  margin: 40px auto;<br>  border-radius: 5px;<br>&#125;<br>.dialog-header &#123;<br>  height: 70px;<br>  line-height: 70px;<br>  font-size: 20px;<br>  border-bottom: 1px solid #ccc;<br>  position: relative;<br>&#125;<br>.dialog-header .close &#123;<br>  position: absolute;<br>  right: 0px;<br>  top: 0px;<br>  cursor: pointer;<br>&#125;<br>.dialog-content &#123;<br>  height: 80px;<br>  font-size: 18px;<br>  padding: 15px 0;<br>&#125;<br>.dialog-footer &#123;<br>  display: flex;<br>  justify-content: flex-end;<br>&#125;<br>.dialog-footer button &#123;<br>  width: 65px;<br>  height: 35px;<br>  background-color: #ffffff;<br>  border: 1px solid #e1e3e9;<br>  cursor: pointer;<br>  outline: none;<br>  margin-left: 10px;<br>  border-radius: 3px;<br>&#125;<br>.dialog-footer button:last-child &#123;<br>  background-color: #007acc;<br>  color: #fff;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;MyDialog&gt;<br>    &lt;/MyDialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyDialog from &#x27;./components/MyDialog.vue&#x27;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br><br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    MyDialog<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>body &#123;<br>  background-color: #b3b3b3;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="6-总结-1"><a href="#6-总结-1" class="headerlink" title="6.总结"></a>6.总结</h3><p>场景：组件内某一部分结构不确定，想要自定义怎么办</p>
<p>使用：插槽的步骤分为哪几步？</p>
<h2 id="六、插槽-后备内容（默认值）"><a href="#六、插槽-后备内容（默认值）" class="headerlink" title="六、插槽-后备内容（默认值）"></a>六、插槽-后备内容（默认值）</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h3><p>通过插槽完成了内容的定制，传什么显示什么, 但是如果不传，则是空白</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682411494612.png" alt="68241149461"></p>
<p>能否给插槽设置 默认显示内容 呢？</p>
<h3 id="2-插槽的后备内容"><a href="#2-插槽的后备内容" class="headerlink" title="2.插槽的后备内容"></a>2.插槽的后备内容</h3><p>封装组件时，可以为预留的 <code>&lt;slot&gt;</code> 插槽提供后备内容（默认内容）。</p>
<h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h3><p>在 <slot> 标签内，放置内容, 作为默认显示内容</slot></p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682412365046.png" alt="68241233912"></p>
<h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h3><ul>
<li><p>外部使用组件时，不传东西，则slot会显示后备内容 </p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682412432656.png" alt="68241243265"></p>
</li>
<li><p>外部使用组件时，传东西了，则slot整体会被换掉</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682412459027.png" alt="68241245902"></p>
</li>
</ul>
<h3 id="5-代码示例-2"><a href="#5-代码示例-2" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;MyDialog&gt;&lt;/MyDialog&gt;<br>    &lt;MyDialog&gt;<br>      你确认要退出么<br>    &lt;/MyDialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyDialog from &#x27;./components/MyDialog.vue&#x27;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br><br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    MyDialog<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>body &#123;<br>  background-color: #b3b3b3;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="七、插槽-具名插槽"><a href="#七、插槽-具名插槽" class="headerlink" title="七、插槽-具名插槽"></a>七、插槽-具名插槽</h2><h3 id="1-需求-1"><a href="#1-需求-1" class="headerlink" title="1.需求"></a>1.需求</h3><p>一个组件内有多处结构，需要外部传入标签，进行定制 <img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682413134876.png" alt="68241313487"></p>
<p>上面的弹框中有<strong>三处不同</strong>，但是<strong>默认插槽</strong>只能<strong>定制一个位置</strong>，这时候怎么办呢?</p>
<h3 id="2-具名插槽语法"><a href="#2-具名插槽语法" class="headerlink" title="2.具名插槽语法"></a>2.具名插槽语法</h3><ul>
<li><p>多个slot使用name属性区分名字 </p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682413391727.png" alt="68241339172"></p>
</li>
<li><p>template配合v-slot:名字来分发对应标签</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682413411921.png" alt="68241341192"></p>
</li>
</ul>
<h3 id="3-v-slot的简写"><a href="#3-v-slot的简写" class="headerlink" title="3.v-slot的简写"></a>3.v-slot的简写</h3><p>v-slot写起来太长，vue给我们提供一个简单写法 <strong>v-slot —&gt; #</strong></p>
<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><ul>
<li>组件内 有多处不确定的结构 怎么办?</li>
<li>具名插槽的语法是什么？</li>
<li>v-slot:插槽名可以简化成什么?</li>
</ul>
<h2 id="八、作用域插槽"><a href="#八、作用域插槽" class="headerlink" title="八、作用域插槽"></a>八、作用域插槽</h2><h3 id="1-插槽分类"><a href="#1-插槽分类" class="headerlink" title="1.插槽分类"></a>1.插槽分类</h3><ul>
<li><p>默认插槽</p>
</li>
<li><p>具名插槽</p>
<p>插槽只有两种，作用域插槽不属于插槽的一种分类</p>
</li>
</ul>
<h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h3><p>定义slot 插槽的同时, 是可以<strong>传值</strong>的。给 <strong>插槽</strong> 上可以 <strong>绑定数据</strong>，将来 <strong>使用组件时可以用</strong></p>
<h3 id="3-场景"><a href="#3-场景" class="headerlink" title="3.场景"></a>3.场景</h3><p>封装表格组件</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682414342139.png" alt="68241434213"></p>
<h3 id="4-使用步骤"><a href="#4-使用步骤" class="headerlink" title="4.使用步骤"></a>4.使用步骤</h3><ol>
<li><p>给 slot 标签, 以 添加属性的方式传值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;slot :id=&quot;item.id&quot; msg=&quot;测试文本&quot;&gt;&lt;/slot&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>所有添加的属性, 都会被收集到一个对象中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&#123; id: 3, msg: &#x27;测试文本&#x27; &#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>在template中, 通过  <code> #插槽名= &quot;obj&quot;</code> 接收，默认插槽名为 default</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;MyTable :list=&quot;list&quot;&gt;<br>  &lt;template #default=&quot;obj&quot;&gt;<br>    &lt;button @click=&quot;del(obj.id)&quot;&gt;删除&lt;/button&gt;<br>  &lt;/template&gt;<br>&lt;/MyTable&gt;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-代码示例-3"><a href="#5-代码示例-3" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>MyTable.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;table class=&quot;my-table&quot;&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;th&gt;序号&lt;/th&gt;<br>        &lt;th&gt;姓名&lt;/th&gt;<br>        &lt;th&gt;年纪&lt;/th&gt;<br>        &lt;th&gt;操作&lt;/th&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;1&lt;/td&gt;<br>        &lt;td&gt;赵小云&lt;/td&gt;<br>        &lt;td&gt;19&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;button&gt;<br>          	查看    <br>    	  &lt;/button&gt;<br>        &lt;/td&gt;<br>      &lt;/tr&gt;<br>        &lt;tr&gt;<br>        &lt;td&gt;1&lt;/td&gt;<br>        &lt;td&gt;张小花&lt;/td&gt;<br>        &lt;td&gt;19&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;button&gt;<br>          	查看    <br>    	  &lt;/button&gt;<br>        &lt;/td&gt;<br>      &lt;/tr&gt;<br>        &lt;tr&gt;<br>        &lt;td&gt;1&lt;/td&gt;<br>        &lt;td&gt;孙大明&lt;/td&gt;<br>        &lt;td&gt;19&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;button&gt;<br>          	查看    <br>    	  &lt;/button&gt;<br>        &lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    data: Array<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.my-table &#123;<br>  width: 450px;<br>  text-align: center;<br>  border: 1px solid #ccc;<br>  font-size: 24px;<br>  margin: 30px auto;<br>&#125;<br>.my-table thead &#123;<br>  background-color: #1f74ff;<br>  color: #fff;<br>&#125;<br>.my-table thead th &#123;<br>  font-weight: normal;<br>&#125;<br>.my-table thead tr &#123;<br>  line-height: 40px;<br>&#125;<br>.my-table th,<br>.my-table td &#123;<br>  border-bottom: 1px solid #ccc;<br>  border-right: 1px solid #ccc;<br>&#125;<br>.my-table td:last-child &#123;<br>  border-right: none;<br>&#125;<br>.my-table tr:last-child td &#123;<br>  border-bottom: none;<br>&#125;<br>.my-table button &#123;<br>  width: 65px;<br>  height: 35px;<br>  font-size: 18px;<br>  border: 1px solid #ccc;<br>  outline: none;<br>  border-radius: 3px;<br>  cursor: pointer;<br>  background-color: #ffffff;<br>  margin-left: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;MyTable :data=&quot;list&quot;&gt;&lt;/MyTable&gt;<br>    &lt;MyTable :data=&quot;list2&quot;&gt;&lt;/MyTable&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  import MyTable from &#x27;./components/MyTable.vue&#x27;<br>  export default &#123;<br>    data () &#123;<br>      return &#123;<br>     	list: [<br>            &#123; id: 1, name: &#x27;张小花&#x27;, age: 18 &#125;,<br>            &#123; id: 2, name: &#x27;孙大明&#x27;, age: 19 &#125;,<br>            &#123; id: 3, name: &#x27;刘德忠&#x27;, age: 17 &#125;,<br>          ],<br>          list2: [<br>            &#123; id: 1, name: &#x27;赵小云&#x27;, age: 18 &#125;,<br>            &#123; id: 2, name: &#x27;刘蓓蓓&#x27;, age: 19 &#125;,<br>            &#123; id: 3, name: &#x27;姜肖泰&#x27;, age: 17 &#125;,<br>          ]<br>      &#125;<br>    &#125;,<br>    components: &#123;<br>      MyTable<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="6-总结-2"><a href="#6-总结-2" class="headerlink" title="6.总结"></a>6.总结</h3><p>1.作用域插槽的作用是什么？</p>
<p>2.作用域插槽的使用步骤是什么？</p>
<h2 id="九、综合案例-商品列表-MyTag组件抽离"><a href="#九、综合案例-商品列表-MyTag组件抽离" class="headerlink" title="九、综合案例 - 商品列表-MyTag组件抽离"></a>九、综合案例 - 商品列表-MyTag组件抽离</h2><p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682416406585.png" alt="68241640658"></p>
<h3 id="1-需求说明"><a href="#1-需求说明" class="headerlink" title="1.需求说明"></a>1.需求说明</h3><ol>
<li><strong>my-tag 标签组件封装</strong></li>
</ol>
<p>​    (1) 双击显示输入框，输入框获取焦点</p>
<p>​    (2) 失去焦点，隐藏输入框</p>
<p>​    (3) 回显标签信息</p>
<p>​    (4) 内容修改，回车 → 修改标签信息</p>
<ol start="2">
<li><strong>my-table 表格组件封装</strong></li>
</ol>
<p>​    (1) 动态传递表格数据渲染</p>
<p>​    (2) 表头支持用户自定义</p>
<p>​    (3) 主体支持用户自定义</p>
<h3 id="2-代码准备"><a href="#2-代码准备" class="headerlink" title="2.代码准备"></a>2.代码准备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;table-case&quot;&gt;<br>    &lt;table class=&quot;my-table&quot;&gt;<br>      &lt;thead&gt;<br>        &lt;tr&gt;<br>          &lt;th&gt;编号&lt;/th&gt;<br>          &lt;th&gt;名称&lt;/th&gt;<br>          &lt;th&gt;图片&lt;/th&gt;<br>          &lt;th width=&quot;100px&quot;&gt;标签&lt;/th&gt;<br>        &lt;/tr&gt;<br>      &lt;/thead&gt;<br>      &lt;tbody&gt;<br>        &lt;tr&gt;<br>          &lt;td&gt;1&lt;/td&gt;<br>          &lt;td&gt;梨皮朱泥三绝清代小品壶经典款紫砂壶&lt;/td&gt;<br>          &lt;td&gt;<br>            &lt;img src=&quot;https://yanxuan-item.nosdn.127.net/f8c37ffa41ab1eb84bff499e1f6acfc7.jpg&quot; /&gt;<br>          &lt;/td&gt;<br>          &lt;td&gt;<br>            &lt;div class=&quot;my-tag&quot;&gt;<br>              &lt;!-- &lt;input <br>                class=&quot;input&quot;<br>                type=&quot;text&quot;<br>                placeholder=&quot;输入标签&quot;<br>              /&gt; --&gt;<br>              &lt;div class=&quot;text&quot;&gt;<br>                茶具<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>          &lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>          &lt;td&gt;1&lt;/td&gt;<br>          &lt;td&gt;梨皮朱泥三绝清代小品壶经典款紫砂壶&lt;/td&gt;<br>          &lt;td&gt;<br>            &lt;img src=&quot;https://yanxuan-item.nosdn.127.net/221317c85274a188174352474b859d7b.jpg&quot; /&gt;<br>          &lt;/td&gt;<br>          &lt;td&gt;<br>            &lt;div class=&quot;my-tag&quot;&gt;<br>              &lt;!-- &lt;input<br>                ref=&quot;inp&quot;<br>                class=&quot;input&quot;<br>                type=&quot;text&quot;<br>                placeholder=&quot;输入标签&quot;<br>              /&gt; --&gt;<br>              &lt;div class=&quot;text&quot;&gt;<br>                男靴<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>          &lt;/td&gt;<br>        &lt;/tr&gt;<br>      &lt;/tbody&gt;<br>    &lt;/table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;TableCase&#x27;,<br>  components: &#123;&#125;,<br>  data() &#123;<br>    return &#123;<br>      goods: [<br>        &#123;<br>          id: 101,<br>          picture:<br>            &#x27;https://yanxuan-item.nosdn.127.net/f8c37ffa41ab1eb84bff499e1f6acfc7.jpg&#x27;,<br>          name: &#x27;梨皮朱泥三绝清代小品壶经典款紫砂壶&#x27;,<br>          tag: &#x27;茶具&#x27;,<br>        &#125;,<br>        &#123;<br>          id: 102,<br>          picture:<br>            &#x27;https://yanxuan-item.nosdn.127.net/221317c85274a188174352474b859d7b.jpg&#x27;,<br>          name: &#x27;全防水HABU旋钮牛皮户外徒步鞋山宁泰抗菌&#x27;,<br>          tag: &#x27;男鞋&#x27;,<br>        &#125;,<br>        &#123;<br>          id: 103,<br>          picture:<br>            &#x27;https://yanxuan-item.nosdn.127.net/cd4b840751ef4f7505c85004f0bebcb5.png&#x27;,<br>          name: &#x27;毛茸茸小熊出没，儿童羊羔绒背心73-90cm&#x27;,<br>          tag: &#x27;儿童服饰&#x27;,<br>        &#125;,<br>        &#123;<br>          id: 104,<br>          picture:<br>            &#x27;https://yanxuan-item.nosdn.127.net/56eb25a38d7a630e76a608a9360eec6b.jpg&#x27;,<br>          name: &#x27;基础百搭，儿童套头针织毛衣1-9岁&#x27;,<br>          tag: &#x27;儿童服饰&#x27;,<br>        &#125;,<br>      ],<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.table-case &#123;<br>  width: 1000px;<br>  margin: 50px auto;<br>  img &#123;<br>    width: 100px;<br>    height: 100px;<br>    object-fit: contain;<br>    vertical-align: middle;<br>  &#125;<br><br>  .my-table &#123;<br>    width: 100%;<br>    border-spacing: 0;<br>    img &#123;<br>      width: 100px;<br>      height: 100px;<br>      object-fit: contain;<br>      vertical-align: middle;<br>    &#125;<br>    th &#123;<br>      background: #f5f5f5;<br>      border-bottom: 2px solid #069;<br>    &#125;<br>    td &#123;<br>      border-bottom: 1px dashed #ccc;<br>    &#125;<br>    td,<br>    th &#123;<br>      text-align: center;<br>      padding: 10px;<br>      transition: all 0.5s;<br>      &amp;.red &#123;<br>        color: red;<br>      &#125;<br>    &#125;<br>    .none &#123;<br>      height: 100px;<br>      line-height: 100px;<br>      color: #999;<br>    &#125;<br>  &#125;<br>  .my-tag &#123;<br>    cursor: pointer;<br>    .input &#123;<br>      appearance: none;<br>      outline: none;<br>      border: 1px solid #ccc;<br>      width: 100px;<br>      height: 40px;<br>      box-sizing: border-box;<br>      padding: 10px;<br>      color: #666;<br>      &amp;::placeholder &#123;<br>        color: #666;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-my-tag组件封装-创建组件"><a href="#3-my-tag组件封装-创建组件" class="headerlink" title="3.my-tag组件封装-创建组件"></a>3.my-tag组件封装-创建组件</h3><p>MyTag.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;my-tag&quot;&gt;<br>  &lt;!--  &lt;input<br>      class=&quot;input&quot;<br>      type=&quot;text&quot;<br>      placeholder=&quot;输入标签&quot; <br>    /&gt; --&gt;<br>    &lt;div  <br>      class=&quot;text&quot;&gt;<br>       茶具<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br> <br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.my-tag &#123;<br>  cursor: pointer;<br>  .input &#123;<br>    appearance: none;<br>    outline: none;<br>    border: 1px solid #ccc;<br>    width: 100px;<br>    height: 40px;<br>    box-sizing: border-box;<br>    padding: 10px;<br>    color: #666;<br>    &amp;::placeholder &#123;<br>      color: #666;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  ...<br> &lt;tbody&gt;<br>       &lt;tr&gt;<br>          ....<br>          &lt;td&gt;<br>            &lt;MyTag&gt;&lt;/MyTag&gt;<br>          &lt;/td&gt;<br>       &lt;/tr&gt;<br> &lt;/tbody&gt;<br> ...<br>&lt;/template&gt;<br>&lt;script&gt;<br>import MyTag from &#x27;./components/MyTag.vue&#x27;<br>export default &#123;<br>  name: &#x27;TableCase&#x27;,<br>  components: &#123;<br>    MyTag,<br>  &#125;,<br> ....<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十、综合案例-MyTag组件控制显示隐藏"><a href="#十、综合案例-MyTag组件控制显示隐藏" class="headerlink" title="十、综合案例-MyTag组件控制显示隐藏"></a>十、综合案例-MyTag组件控制显示隐藏</h2><p>MyTag.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;my-tag&quot;&gt;<br>    &lt;input<br>      v-if=&quot;isEdit&quot;<br>      v-focus<br>      ref=&quot;inp&quot;<br>      class=&quot;input&quot;<br>      type=&quot;text&quot;<br>      placeholder=&quot;输入标签&quot; <br>      @blur=&quot;isEdit = false&quot; <br>    /&gt;<br>    &lt;div <br>      v-else<br>      @dblclick=&quot;handleClick&quot;<br>      class=&quot;text&quot;&gt;<br>       茶具<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      isEdit: false<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    handleClick () &#123;<br>      this.isEdit = true<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 封装全局指令 focus</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-comment">// 指令所在的dom元素，被插入到页面中时触发</span><br>  inserted (el) &#123;<br>    el.<span class="hljs-title function_">focus</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="十一、综合案例-MyTag组件进行v-model绑定"><a href="#十一、综合案例-MyTag组件进行v-model绑定" class="headerlink" title="十一、综合案例-MyTag组件进行v-model绑定"></a>十一、综合案例-MyTag组件进行v-model绑定</h2><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;MyTag v-model=&quot;tempText&quot;&gt;&lt;/MyTag&gt;<br>&lt;script&gt;<br>    export default &#123;<br>        data()&#123;<br>            tempText:&#x27;水杯&#x27;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>MyTag.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;template&gt;<br>  &lt;div class=&quot;my-tag&quot;&gt;<br>    &lt;input<br>      v-if=&quot;isEdit&quot;<br>      v-focus<br>      ref=&quot;inp&quot;<br>      class=&quot;input&quot;<br>      type=&quot;text&quot;<br>      placeholder=&quot;输入标签&quot;<br>      :value=&quot;value&quot;<br>      @blur=&quot;isEdit = false&quot;<br>      @keyup.enter=&quot;handleEnter&quot;<br>    /&gt;<br>    &lt;div <br>      v-else<br>      @dblclick=&quot;handleClick&quot;<br>      class=&quot;text&quot;&gt;<br>      &#123;&#123; value &#125;&#125;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    value: String<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br>      isEdit: false<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    handleClick () &#123;<br>      this.isEdit = true<br>    &#125;,<br>    handleEnter (e) &#123;<br>      // 非空处理<br>      if (e.target.value.trim() === &#x27;&#x27;) return alert(&#x27;标签内容不能为空&#x27;)<br>      this.$emit(&#x27;input&#x27;, e.target.value)<br>      // 提交完成，关闭输入状态<br>      this.isEdit = false<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure>



<h2 id="十二、综合案例-封装MyTable组件-动态渲染数据"><a href="#十二、综合案例-封装MyTable组件-动态渲染数据" class="headerlink" title="十二、综合案例-封装MyTable组件-动态渲染数据"></a>十二、综合案例-封装MyTable组件-动态渲染数据</h2><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;table-case&quot;&gt;<br>    &lt;MyTable :data=&quot;goods&quot;&gt;&lt;/MyTable&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyTable from &#x27;./components/MyTable.vue&#x27;<br>export default &#123;<br>  name: &#x27;TableCase&#x27;,<br>  components: &#123; <br>    MyTable<br>  &#125;,<br>  data()&#123;<br>    return &#123;<br>        ....<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure>

<p>MyTable.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;table class=&quot;my-table&quot;&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;th&gt;编号&lt;/th&gt;<br>        &lt;th&gt;名称&lt;/th&gt;<br>        &lt;th&gt;图片&lt;/th&gt;<br>        &lt;th width=&quot;100px&quot;&gt;标签&lt;/th&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr v-for=&quot;(item, index) in data&quot; :key=&quot;item.id&quot;&gt;<br>       &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;img<br>            :src=&quot;item.picture&quot;<br>          /&gt;<br>        &lt;/td&gt;<br>        &lt;td&gt;<br>          标签内容<br>         &lt;!-- &lt;MyTag v-model=&quot;item.tag&quot;&gt;&lt;/MyTag&gt; --&gt;<br>        &lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    data: &#123;<br>      type: Array,<br>      required: true<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br><br>.my-table &#123;<br>  width: 100%;<br>  border-spacing: 0;<br>  img &#123;<br>    width: 100px;<br>    height: 100px;<br>    object-fit: contain;<br>    vertical-align: middle;<br>  &#125;<br>  th &#123;<br>    background: #f5f5f5;<br>    border-bottom: 2px solid #069;<br>  &#125;<br>  td &#123;<br>    border-bottom: 1px dashed #ccc;<br>  &#125;<br>  td,<br>  th &#123;<br>    text-align: center;<br>    padding: 10px;<br>    transition: all .5s;<br>    &amp;.red &#123;<br>      color: red;<br>    &#125;<br>  &#125;<br>  .none &#123;<br>    height: 100px;<br>    line-height: 100px;<br>    color: #999;<br>  &#125;<br>&#125;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十三、综合案例-封装MyTable组件-自定义结构"><a href="#十三、综合案例-封装MyTable组件-自定义结构" class="headerlink" title="十三、综合案例-封装MyTable组件-自定义结构"></a>十三、综合案例-封装MyTable组件-自定义结构</h2><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;table-case&quot;&gt;<br>    &lt;MyTable :data=&quot;goods&quot;&gt;<br>      &lt;template #head&gt;<br>        &lt;th&gt;编号&lt;/th&gt;<br>        &lt;th&gt;名称&lt;/th&gt;<br>        &lt;th&gt;图片&lt;/th&gt;<br>        &lt;th width=&quot;100px&quot;&gt;标签&lt;/th&gt;<br>      &lt;/template&gt;<br><br>      &lt;template #body=&quot;&#123; item, index &#125;&quot;&gt;<br>        &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;img<br>            :src=&quot;item.picture&quot;<br>          /&gt;<br>        &lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;MyTag v-model=&quot;item.tag&quot;&gt;&lt;/MyTag&gt;<br>        &lt;/td&gt;<br>      &lt;/template&gt;<br>    &lt;/MyTable&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyTag from &#x27;./components/MyTag.vue&#x27;<br>import MyTable from &#x27;./components/MyTable.vue&#x27;<br>export default &#123;<br>  name: &#x27;TableCase&#x27;,<br>  components: &#123;<br>    MyTag,<br>    MyTable<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br>      ....<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br> <br></code></pre></td></tr></table></figure>

<p>MyTable.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;table class=&quot;my-table&quot;&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;slot name=&quot;head&quot;&gt;&lt;/slot&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr v-for=&quot;(item, index) in data&quot; :key=&quot;item.id&quot;&gt;<br>        &lt;slot name=&quot;body&quot; :item=&quot;item&quot; :index=&quot;index&quot; &gt;&lt;/slot&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    data: &#123;<br>      type: Array,<br>      required: true<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十四、单页应用程序介绍"><a href="#十四、单页应用程序介绍" class="headerlink" title="十四、单页应用程序介绍"></a>十四、单页应用程序介绍</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>单页应用程序：SPA【Single Page Application】是指所有的功能都在<strong>一个html页面</strong>上实现</p>
<h3 id="2-具体示例"><a href="#2-具体示例" class="headerlink" title="2.具体示例"></a>2.具体示例</h3><p>单页应用网站： 网易云音乐  <a href="https://music.163.com/">https://music.163.com/</a></p>
<p>多页应用网站：京东  <a href="https://jd.com/">https://jd.com/</a></p>
<h3 id="3-单页应用-VS-多页面应用"><a href="#3-单页应用-VS-多页面应用" class="headerlink" title="3.单页应用 VS 多页面应用"></a>3.单页应用 VS 多页面应用</h3><p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682441912977.png" alt="68244191297"></p>
<p>单页应用类网站：系统类网站 &#x2F; 内部网站 &#x2F; 文档类网站 &#x2F; 移动端站点</p>
<p>多页应用类网站：公司官网 &#x2F; 电商类网站 </p>
<h3 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h3><p>1.什么是单页面应用程序?</p>
<p>2.单页面应用优缺点?</p>
<p>3.单页应用场景？</p>
<h2 id="十五、路由介绍"><a href="#十五、路由介绍" class="headerlink" title="十五、路由介绍"></a>十五、路由介绍</h2><h3 id="1-思考"><a href="#1-思考" class="headerlink" title="1.思考"></a>1.思考</h3><p>单页面应用程序，之所以开发效率高，性能好，用户体验好</p>
<p>最大的原因就是：<strong>页面按需更新</strong></p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682442699775.png" alt="68244269977"></p>
<p>比如当点击【发现音乐】和【关注】时，<strong>只是更新下面部分内容</strong>，对于头部是不更新的</p>
<p>要按需更新，首先就需要明确：<strong>访问路径</strong>和 <strong>组件</strong>的对应关系！</p>
<p>访问路径 和 组件的对应关系如何确定呢？ <strong>路由</strong></p>
<h3 id="2-路由的介绍"><a href="#2-路由的介绍" class="headerlink" title="2.路由的介绍"></a>2.路由的介绍</h3><p>生活中的路由：设备和ip的映射关系</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682442945057.png" alt="68244294505"></p>
<p>Vue中的路由：<strong>路径和组件</strong>的<strong>映射</strong>关系</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682443040372.png" alt="68244304037"></p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><ul>
<li>什么是路由</li>
<li>Vue中的路由是什么</li>
</ul>
<h2 id="十六、路由的基本使用"><a href="#十六、路由的基本使用" class="headerlink" title="十六、路由的基本使用"></a>十六、路由的基本使用</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><p>认识插件 VueRouter，掌握 VueRouter 的基本使用步骤</p>
<h3 id="2-作用-1"><a href="#2-作用-1" class="headerlink" title="2.作用"></a>2.作用</h3><p><strong>修改</strong>地址栏路径时，<strong>切换显示</strong>匹配的<strong>组件</strong></p>
<h3 id="3-说明"><a href="#3-说明" class="headerlink" title="3.说明"></a>3.说明</h3><p>Vue 官方的一个路由插件，是一个第三方包</p>
<h3 id="4-官网"><a href="#4-官网" class="headerlink" title="4.官网"></a>4.官网</h3><p><a href="https://v3.router.vuejs.org/zh/">https://v3.router.vuejs.org/zh/</a></p>
<h3 id="5-VueRouter的使用（5-2）"><a href="#5-VueRouter的使用（5-2）" class="headerlink" title="5.VueRouter的使用（5+2）"></a>5.VueRouter的使用（5+2）</h3><p>固定5个固定的步骤（不用死背，熟能生巧）</p>
<ol>
<li><p>下载 VueRouter 模块到当前工程，版本3.6.5</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn add vue-router@3.6.5<br></code></pre></td></tr></table></figure>
</li>
<li><p>main.js中引入VueRouter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import VueRouter from &#x27;vue-router&#x27;<br></code></pre></td></tr></table></figure>
</li>
<li><p>安装注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">Vue.use(VueRouter)<br></code></pre></td></tr></table></figure>
</li>
<li><p>创建路由对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">const router = new VueRouter()<br></code></pre></td></tr></table></figure>
</li>
<li><p>注入，将路由对象注入到new Vue实例中，建立关联</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>  render: h =&gt; h(App),<br>  router:router<br>&#125;).$mount(&#x27;#app&#x27;)<br><br></code></pre></td></tr></table></figure></li>
</ol>
<p>当我们配置完以上5步之后 就可以看到浏览器地址栏中的路由 变成了 &#x2F;#&#x2F;的形式。表示项目的路由已经被Vue-Router管理了</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682479207453.png" alt="68247920745"></p>
<h3 id="6-代码示例"><a href="#6-代码示例" class="headerlink" title="6.代码示例"></a>6.代码示例</h3><p>main.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 路由的使用步骤 5 + 2<br>// 5个基础步骤<br>// 1. 下载 v3.6.5<br>// yarn add vue-router@3.6.5<br>// 2. 引入<br>// 3. 安装注册 Vue.use(Vue插件)<br>// 4. 创建路由对象<br>// 5. 注入到new Vue中，建立关联<br><br><br>import VueRouter from &#x27;vue-router&#x27;<br>Vue.use(VueRouter) // VueRouter插件初始化<br><br>const router = new VueRouter()<br><br>new Vue(&#123;<br>  render: h =&gt; h(App),<br>  router<br>&#125;).$mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure>



<h3 id="7-两个核心步骤"><a href="#7-两个核心步骤" class="headerlink" title="7.两个核心步骤"></a>7.两个核心步骤</h3><ol>
<li><p>创建需要的组件 (views目录)，配置路由规则</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682479639666.png" alt="68247963966"></p>
</li>
<li><p>配置导航，配置路由出口(路径匹配的组件显示的位置)</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;footer_wrap&quot;&gt;<br>  &lt;a href=&quot;#/find&quot;&gt;发现音乐&lt;/a&gt;<br>  &lt;a href=&quot;#/my&quot;&gt;我的音乐&lt;/a&gt;<br>  &lt;a href=&quot;#/friend&quot;&gt;朋友&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;top&quot;&gt;<br>  &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h3><ol>
<li>如何实现 路径改变，对应组件 切换,应该使用哪个插件?</li>
<li>Vue-Router的使用步骤是什么(5+2)?</li>
</ol>
<h2 id="十七、组件的存放目录问题"><a href="#十七、组件的存放目录问题" class="headerlink" title="十七、组件的存放目录问题"></a>十七、组件的存放目录问题</h2><p>注意： <strong>.vue文件</strong> 本质无区别</p>
<h3 id="1-组件分类"><a href="#1-组件分类" class="headerlink" title="1.组件分类"></a>1.组件分类</h3><p> .vue文件分为2类，都是 <strong>.vue文件（本质无区别）</strong></p>
<ul>
<li>页面组件 （配置路由规则时使用的组件）</li>
<li>复用组件（多个组件中都使用到的组件）</li>
</ul>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682445397959.png" alt="68244539795"></p>
<h3 id="2-存放目录"><a href="#2-存放目录" class="headerlink" title="2.存放目录"></a>2.存放目录</h3><p>分类开来的目的就是为了 <strong>更易维护</strong></p>
<ol>
<li><p>src&#x2F;views文件夹</p>
<p>页面组件 - 页面展示 - 配合路由用</p>
</li>
<li><p>src&#x2F;components文件夹</p>
<p>复用组件 - 展示数据 - 常用于复用</p>
</li>
</ol>
<h3 id="3-总结-1"><a href="#3-总结-1" class="headerlink" title="3.总结"></a>3.总结</h3><ul>
<li>组件分类有哪两类？分类的目的？</li>
<li>不同分类的组件应该放在什么文件夹？作用分别是什么？</li>
</ul>
<h2 id="十八、路由的封装抽离"><a href="#十八、路由的封装抽离" class="headerlink" title="十八、路由的封装抽离"></a>十八、路由的封装抽离</h2><p>问题：所有的路由配置都在main.js中合适吗？</p>
<p>目标：将路由模块抽离出来。  好处：<strong>拆分模块，利于维护</strong></p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682481410304.png" alt="68248141030"></p>
<p>路径简写：</p>
<p><strong>脚手架环境下</strong> @指代src目录，可以用于快速引入组件</p>
<p>总结：</p>
<ul>
<li>路由模块的封装抽离的好处是什么？</li>
<li>以后如何快速引入组件？</li>
</ul>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day7</title>
    <url>/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/</url>
    <content><![CDATA[<h2 id="一、Vuex-概述"><a href="#一、Vuex-概述" class="headerlink" title="一、Vuex 概述"></a>一、<a href="https://vuex.vuejs.org/zh/">Vuex</a> 概述</h2><p>目标：明确<a href="https://vuex.vuejs.org/zh/">Vuex</a>是什么，应用场景以及优势</p>
<h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h3><p>Vuex 是一个 Vue 的 状态管理工具，状态就是数据。</p>
<p>大白话：Vuex 是一个插件，可以帮我们管理 Vue 通用的数据 (多组件共享的数据)。例如：购物车数据   个人信息数</p>
<h3 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.使用场景"></a>2.使用场景</h3><ul>
<li><p>某个状态 在 很多个组件 来使用 (个人信息)</p>
</li>
<li><p>多个组件 共同维护 一份数据 (购物车)</p>
</li>
</ul>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683178186642.png" alt="68317818664"></p>
<h3 id="3-优势"><a href="#3-优势" class="headerlink" title="3.优势"></a>3.优势</h3><ul>
<li>共同维护一份数据，<strong>数据集中化管理</strong></li>
<li><strong>响应式变化</strong></li>
<li>操作简洁 (vuex提供了一些辅助函数)</li>
</ul>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683178293366.png" alt="68317829336"></p>
<h3 id="4-注意："><a href="#4-注意：" class="headerlink" title="4.注意："></a>4.注意：</h3><p>官方原文：</p>
<ul>
<li>不是所有的场景都适用于vuex，只有在必要的时候才使用vuex</li>
<li>使用了vuex之后，会附加更多的框架中的概念进来，增加了项目的复杂度  （数据的操作更便捷，数据的流动更清晰）</li>
</ul>
<p>Vuex就像《近视眼镜》, 你自然会知道什么时候需要用它~</p>
<h2 id="二、需求-多组件共享数据"><a href="#二、需求-多组件共享数据" class="headerlink" title="二、需求: 多组件共享数据"></a>二、需求: 多组件共享数据</h2><p>目标：基于脚手架创建项目，构建 vuex 多组件数据共享环境</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683178912695.png" alt="68317891269"></p>
<p>效果是三个组件共享一份数据:</p>
<ul>
<li>任意一个组件都可以修改数据</li>
<li>三个组件的数据是同步的</li>
</ul>
<h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">vue create vuex-demo<br></code></pre></td></tr></table></figure>

<h3 id="2-创建三个组件-目录如下"><a href="#2-创建三个组件-目录如下" class="headerlink" title="2.创建三个组件, 目录如下"></a>2.创建三个组件, 目录如下</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">|-components<br>|--Son1.vue<br>|--Son2.vue<br>|-App.vue<br></code></pre></td></tr></table></figure>

<h3 id="3-源代码如下"><a href="#3-源代码如下" class="headerlink" title="3.源代码如下"></a>3.源代码如下</h3><p><code>App.vue</code>在入口组件中引入 Son1 和 Son2 这两个子组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>根组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Son1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Son2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son1</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son1.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son2</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son2.vue&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;app&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">Son1</span>,</span><br><span class="language-javascript">    <span class="hljs-title class_">Son2</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<p><code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p><code>Son1.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Son1 子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    从vuex中获取的值: <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>值 + 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Son1Com&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;css&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box</span>&#123;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<p><code>Son2.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Son2 子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    从vuex中获取的值:<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>值 - 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Son2Com&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;css&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="三、vuex-的使用-创建仓库"><a href="#三、vuex-的使用-创建仓库" class="headerlink" title="三、vuex 的使用 - 创建仓库"></a>三、vuex 的使用 - 创建仓库</h2><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683212784179.png" alt="68321278417"></p>
<h3 id="1-安装-vuex"><a href="#1-安装-vuex" class="headerlink" title="1.安装 vuex"></a>1.安装 vuex</h3><p>安装vuex与vue-router类似，vuex是一个独立存在的插件，如果脚手架初始化没有选 vuex，就需要额外安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn add vuex@3 或者 npm i vuex@3<br></code></pre></td></tr></table></figure>

<h3 id="2-新建-store-index-js-专门存放-vuex"><a href="#2-新建-store-index-js-专门存放-vuex" class="headerlink" title="2.新建 store/index.js 专门存放 vuex"></a>2.新建 <code>store/index.js</code> 专门存放 vuex</h3><p>​	为了维护项目目录的整洁，在src目录下新建一个store目录其下放置一个index.js文件。 (和 <code>router/index.js</code> 类似)</p>
<p>​	<img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683212805824.png" alt="68321280582"></p>
<h3 id="3-创建仓库-store-index-js"><a href="#3-创建仓库-store-index-js" class="headerlink" title="3.创建仓库 store/index.js"></a>3.创建仓库 <code>store/index.js</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 导入 vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 导入 vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// vuex也是vue的插件, 需要use一下, 进行插件的安装初始化</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>()<br><br><span class="hljs-comment">// 导出仓库</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure>

<h3 id="4-在-main-js-中导入挂载到-Vue-实例上"><a href="#4-在-main-js-中导入挂载到-Vue-实例上" class="headerlink" title="4 在 main.js 中导入挂载到 Vue 实例上"></a>4 在 main.js 中导入挂载到 Vue 实例上</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>  store<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>此刻起, 就成功创建了一个 <strong>空仓库!!</strong></p>
<h3 id="5-测试打印Vuex"><a href="#5-测试打印Vuex" class="headerlink" title="5.测试打印Vuex"></a>5.测试打印Vuex</h3><p>App.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>)<br>&#125;<br></code></pre></td></tr></table></figure>





<h2 id="四、核心概念-state-状态"><a href="#四、核心概念-state-状态" class="headerlink" title="四、核心概念 - state 状态"></a>四、核心概念 - state 状态</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><p>明确如何给仓库 提供 数据，如何 使用 仓库的数据</p>
<h3 id="2-提供数据"><a href="#2-提供数据" class="headerlink" title="2.提供数据"></a>2.提供数据</h3><p>State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储。</p>
<p>打开项目中的store.js文件，在state对象中可以添加我们要共享的数据。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// state 状态, 即数据, 类似于vue组件中的data,</span><br>  <span class="hljs-comment">// 区别：</span><br>  <span class="hljs-comment">// 1.data 是组件自己的数据, </span><br>  <span class="hljs-comment">// 2.state 中的数据整个vue项目的组件都能访问到</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">101</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="3-访问Vuex中的数据"><a href="#3-访问Vuex中的数据" class="headerlink" title="3.访问Vuex中的数据"></a>3.访问Vuex中的数据</h3><p>问题: 如何在组件中获取count?</p>
<ol>
<li>通过$store直接访问  —&gt;  </li>
<li>通过辅助函数mapState 映射计算属性  —&gt;  </li>
</ol>
<h3 id="4-通过-store访问的语法"><a href="#4-通过-store访问的语法" class="headerlink" title="4.通过$store访问的语法"></a>4.通过$store访问的语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">获取 store：<br> <span class="hljs-number">1.</span><span class="hljs-title class_">Vue</span>模板中获取 <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span><br> <span class="hljs-number">2.</span>js文件中获取 <span class="hljs-keyword">import</span> 导入 store<br><br><br>模板中：     &#123;&#123; $store.<span class="hljs-property">state</span>.<span class="hljs-property">xxx</span> &#125;&#125;<br>组件逻辑中：  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">xxx</span><br><span class="hljs-variable constant_">JS</span>模块中：   store.<span class="hljs-property">state</span>.<span class="hljs-property">xxx</span><br></code></pre></td></tr></table></figure>



<h3 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5.代码实现"></a>5.代码实现</h3><h4 id="5-1模板中使用"><a href="#5-1模板中使用" class="headerlink" title="5.1模板中使用"></a>5.1模板中使用</h4><p>组件中可以使用  <strong>$store</strong> 获取到vuex中的store对象实例，可通过<strong>state</strong>属性属性获取<strong>count</strong>， 如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;h1&gt;state的数据 - &#123;&#123; $store.state.count &#125;&#125;&lt;/h1&gt;<br></code></pre></td></tr></table></figure>

<h4 id="5-2组件逻辑中使用"><a href="#5-2组件逻辑中使用" class="headerlink" title="5.2组件逻辑中使用"></a>5.2组件逻辑中使用</h4><p>将state属性定义在计算属性中 <a href="https://vuex.vuejs.org/zh/guide/state.html">https://vuex.vuejs.org/zh/guide/state.html</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;h1&gt;state的数据 - &#123;&#123; count &#125;&#125;&lt;/h1&gt;<br><br><span class="hljs-comment">// 把state中数据，定义在组件内的计算属性中</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>    count () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>

<h4 id="5-3-js文件中使用"><a href="#5-3-js文件中使用" class="headerlink" title="5.3 js文件中使用"></a>5.3 js文件中使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">//main.js<br><br>import store from &quot;@/store&quot;<br><br>console.log(store.state.count)<br></code></pre></td></tr></table></figure>

<p>每次都像这样一个个的提供计算属性, 太麻烦了,我们有没有简单的语法帮我们获取state中的值呢？</p>
<h2 id="五、通过辅助函数-mapState获取-state中的数据"><a href="#五、通过辅助函数-mapState获取-state中的数据" class="headerlink" title="五、通过辅助函数  - mapState获取 state中的数据"></a>五、通过辅助函数  - mapState获取 state中的数据</h2><blockquote>
<p>mapState是辅助函数，帮助我们把store中的数据映射到 组件的计算属性中, 它属于一种方便的用法</p>
</blockquote>
<p>用法 ：</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683214719574.png" alt="68321471957"> </p>
<h3 id="1-第一步：导入mapState-mapState是vuex中的一个函数"><a href="#1-第一步：导入mapState-mapState是vuex中的一个函数" class="headerlink" title="1.第一步：导入mapState (mapState是vuex中的一个函数)"></a>1.第一步：导入mapState (mapState是vuex中的一个函数)</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure>

<h3 id="2-第二步：采用数组形式引入state属性"><a href="#2-第二步：采用数组形式引入state属性" class="headerlink" title="2.第二步：采用数组形式引入state属性"></a>2.第二步：采用数组形式引入state属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>]) <br></code></pre></td></tr></table></figure>

<blockquote>
<p>上面代码的最终得到的是 <strong>类似于</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">count () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-第三步：利用展开运算符将导出的状态映射给计算属性"><a href="#3-第三步：利用展开运算符将导出的状态映射给计算属性" class="headerlink" title="3.第三步：利用展开运算符将导出的状态映射给计算属性"></a>3.第三步：利用<strong>展开运算符</strong>将导出的状态映射给计算属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt; state的数据：&#123;&#123; count &#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure>



<h2 id="六、开启严格模式及Vuex的单项数据流"><a href="#六、开启严格模式及Vuex的单项数据流" class="headerlink" title="六、开启严格模式及Vuex的单项数据流"></a>六、开启严格模式及Vuex的单项数据流</h2><h3 id="1-目标-1"><a href="#1-目标-1" class="headerlink" title="1.目标"></a>1.目标</h3><p>明确 vuex 同样遵循单向数据流，组件中不能直接修改仓库的数据</p>
<h3 id="2-直接在组件中修改Vuex中state的值"><a href="#2-直接在组件中修改Vuex中state的值" class="headerlink" title="2.直接在组件中修改Vuex中state的值"></a>2.直接在组件中修改Vuex中state的值</h3><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683215892288.png" alt="68321589228"></p>
<p>Son1.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">button @click=&quot;handleAdd&quot;&gt;值 + 1&lt;/button&gt;<br><br><br>methods:&#123;<br>	 handleAdd (n) &#123;<br>      // 错误代码(vue默认不会监测，监测需要成本)<br>       this.$store.state.count++<br>      // console.log(this.$store.state.count) <br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-开启严格模式"><a href="#3-开启严格模式" class="headerlink" title="3.开启严格模式"></a>3.开启严格模式</h3><p>通过 <code>strict: true</code> 可以开启严格模式,开启严格模式后，直接修改state中的值会报错</p>
<blockquote>
<p><strong>state数据的修改只能通过mutations，并且mutations必须是同步的</strong></p>
</blockquote>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683215821033.png" alt="68321471957"></p>
<h2 id="七、核心概念-mutations"><a href="#七、核心概念-mutations" class="headerlink" title="七、核心概念-mutations"></a>七、核心概念-mutations</h2><h3 id="1-定义mutations"><a href="#1-定义mutations" class="headerlink" title="1.定义mutations"></a>1.定义mutations</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-comment">// 定义mutations</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>     <br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="2-格式说明"><a href="#2-格式说明" class="headerlink" title="2.格式说明"></a>2.格式说明</h3><p>mutations是一个对象，对象中存放修改state的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 方法里参数 第一个参数是当前store的state属性</span><br>    <span class="hljs-comment">// payload 载荷 运输参数 调用mutaiions的时候 可以传递参数 传递载荷</span><br>    addCount (state) &#123;<br>      state.<span class="hljs-property">count</span> += <span class="hljs-number">1</span><br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure>

<h3 id="3-组件中提交-mutations"><a href="#3-组件中提交-mutations" class="headerlink" title="3.组件中提交 mutations"></a>3.组件中提交 mutations</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h3 id="4-练习"><a href="#4-练习" class="headerlink" title="4.练习"></a>4.练习</h3><p>1.在mutations中定义个点击按钮进行 +5 的方法</p>
<p>2.在mutations中定义个点击按钮进行 改变title 的方法</p>
<p>3.在组件中调用mutations修改state中的值</p>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><p>通过mutations修改state的步骤</p>
<p>1.定义 mutations 对象，对象中存放修改 state 的方法</p>
<p>2.组件中提交调用 mutations(通过$store.commit(‘mutations的方法名’))</p>
<h2 id="八、带参数的-mutations"><a href="#八、带参数的-mutations" class="headerlink" title="八、带参数的 mutations"></a>八、带参数的 mutations</h2><h3 id="1-目标："><a href="#1-目标：" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握 mutations 传参语法</p>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><p>看下面这个案例，每次点击不同的按钮，加的值都不同，每次都要定义不同的mutations处理吗？</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217004239.png" alt="68321700423"></p>
<p>提交 mutation 是可以传递参数的  <code>this.$store.commit(&#39;xxx&#39;,  参数)</code></p>
<h4 id="2-1-提供mutation函数（带参数）"><a href="#2-1-提供mutation函数（带参数）" class="headerlink" title="2.1 提供mutation函数（带参数）"></a>2.1 提供mutation函数（带参数）</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br>  ...<br>  addCount (state, count) &#123;<br>    state.<span class="hljs-property">count</span> = count<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>

<h4 id="2-2-提交mutation"><a href="#2-2-提交mutation" class="headerlink" title="2.2 提交mutation"></a>2.2 提交mutation</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">handle ( ) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>, <span class="hljs-number">10</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>小tips: 提交的参数只能是一个, 如果有多个参数要传, 可以传递一个对象</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>, &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">10</span><br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="九、练习-mutations的减法功能"><a href="#九、练习-mutations的减法功能" class="headerlink" title="九、练习-mutations的减法功能"></a>九、练习-mutations的减法功能</h2><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217248752.png" alt="68321724875"></p>
<h3 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h3><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217268256.png" alt="68321726825"></p>
<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>Son2.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;subCount(1)&quot;&gt;值 - 1&lt;/button&gt;<br>&lt;button @click=&quot;subCount(5)&quot;&gt;值 - 5&lt;/button&gt;<br>&lt;button @click=&quot;subCount(10)&quot;&gt;值 - 10&lt;/button&gt;<br><br>export default &#123;<br>    methods:&#123;<br>         subCount (n) &#123; <br>            this.$store.commit(&#x27;addCount&#x27;, n)<br>    &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>store&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>:&#123;<br>    subCount (state, n) &#123;<br>      state.<span class="hljs-property">count</span> -= n<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="十、练习-Vuex中的值和组件中的input双向绑定"><a href="#十、练习-Vuex中的值和组件中的input双向绑定" class="headerlink" title="十、练习-Vuex中的值和组件中的input双向绑定"></a>十、练习-Vuex中的值和组件中的input双向绑定</h2><h3 id="1-目标-2"><a href="#1-目标-2" class="headerlink" title="1.目标"></a>1.目标</h3><p>实时输入，实时更新，巩固 mutations 传参语法</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217697064.png" alt="68321769706"></p>
<h3 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217717788.png" alt="68321771778"></p>
<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;input :value=&quot;count&quot; @input=&quot;handleInput&quot; type=&quot;text&quot;&gt;<br><br>export default &#123;<br>  methods: &#123;<br>    handleInput (e) &#123;<br>      // 1. 实时获取输入框的值<br>      const num = +e.target.value<br>      // 2. 提交mutation，调用mutation函数<br>      this.$store.commit(&#x27;changeCount&#x27;, num)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>store&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123; <br>   changeCount (state, newCount) &#123;<br>      state.<span class="hljs-property">count</span> = newCount<br>   &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>



<h2 id="十一、辅助函数-mapMutations"><a href="#十一、辅助函数-mapMutations" class="headerlink" title="十一、辅助函数- mapMutations"></a>十一、辅助函数- mapMutations</h2><blockquote>
<p>mapMutations和mapState很像，它把位于mutations中的方法提取了出来，我们可以将它导入</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span>  &#123; mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;addCount&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>上面代码的含义是将mutations的方法导入了methods中，等价于</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>      <span class="hljs-comment">// commit(方法名, 载荷参数)</span><br>      addCount () &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>)<br>      &#125;<br> &#125;<br></code></pre></td></tr></table></figure>

<p>此时，就可以直接通过this.addCount调用了</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;button @click=<span class="hljs-string">&quot;addCount&quot;</span>&gt;值+<span class="hljs-number">1</span>&lt;/button&gt;<br></code></pre></td></tr></table></figure>

<p>但是请注意： Vuex中mutations中要求不能写异步代码，如果有异步的ajax请求，应该放置在actions中</p>
<h2 id="十二、核心概念-actions"><a href="#十二、核心概念-actions" class="headerlink" title="十二、核心概念 - actions"></a>十二、核心概念 - actions</h2><blockquote>
<p>state是存放数据的，mutations是同步更新数据 (便于监测数据的变化, 更新视图等, 方便于调试工具查看变化)，</p>
<p>actions则负责进行异步操作</p>
</blockquote>
<p><strong>说明：mutations必须是同步的</strong></p>
<p><strong>需求: 一秒钟之后, 要给一个数 去修改state</strong></p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683218603674.png" alt="68321860367"></p>
<h3 id="1-定义actions"><a href="#1-定义actions" class="headerlink" title="1.定义actions"></a><strong>1.定义actions</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br>  changeCount (state, newCount) &#123;<br>    state.<span class="hljs-property">count</span> = newCount<br>  &#125;<br>&#125;<br><br><br><span class="hljs-attr">actions</span>: &#123;<br>  setAsyncCount (context, num) &#123;<br>    <span class="hljs-comment">// 一秒后, 给一个数, 去修改 num</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;changeCount&#x27;</span>, num)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>

<h3 id="2-组件中通过dispatch调用"><a href="#2-组件中通过dispatch调用" class="headerlink" title="2.组件中通过dispatch调用"></a><strong>2.组件中通过dispatch调用</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">setAsyncCount () &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;setAsyncCount&#x27;</span>, <span class="hljs-number">666</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683441987572.png" alt="68344198757"></p>
<h2 id="十三、辅助函数-mapActions"><a href="#十三、辅助函数-mapActions" class="headerlink" title="十三、辅助函数 -mapActions"></a>十三、辅助函数 -mapActions</h2><p>1.目标：掌握辅助函数 mapActions，映射方法</p>
<blockquote>
<p>mapActions 是把位于 actions中的方法提取了出来，映射到组件methods中</p>
</blockquote>
<p>Son2.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-attr">methods</span>: &#123;<br>   ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;changeCountAction&#x27;</span>])<br>&#125;<br><br><span class="hljs-comment">//mapActions映射的代码 本质上是以下代码的写法</span><br><span class="hljs-comment">//methods: &#123;</span><br><span class="hljs-comment">//  changeCountAction (n) &#123;</span><br><span class="hljs-comment">//    this.$store.dispatch(&#x27;changeCountAction&#x27;, n)</span><br><span class="hljs-comment">//  &#125;,</span><br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure>

<p>直接通过 this.方法 就可以调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;changeCountAction(200)&quot;&gt;+异步&lt;/button&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十四、核心概念-getters"><a href="#十四、核心概念-getters" class="headerlink" title="十四、核心概念 - getters"></a>十四、核心概念 - getters</h2><blockquote>
<p>除了state之外，有时我们还需要从state中<strong>筛选出符合条件的一些数据</strong>，这些数据是依赖state的，此时会用到getters</p>
</blockquote>
<p>例如，state中定义了list，为1-10的数组，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">list</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>&#125;<br></code></pre></td></tr></table></figure>

<p>组件中，需要显示所有大于5的数据，正常的方式，是需要list在组件中进行再一步的处理，但是getters可以帮助我们实现它</p>
<h3 id="1-定义getters"><a href="#1-定义getters" class="headerlink" title="1.定义getters"></a>1.定义getters</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// getters函数的第一个参数是 state</span><br>  <span class="hljs-comment">// 必须要有返回值</span><br>   <span class="hljs-attr">filterList</span>:  <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span>  state.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">5</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="2-使用getters"><a href="#2-使用getters" class="headerlink" title="2.使用getters"></a>2.使用getters</h3><h4 id="2-1原始方式-store"><a href="#2-1原始方式-store" class="headerlink" title="2.1原始方式-$store"></a>2.1原始方式-$store</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;&#123;&#123; $store.getters.filterList &#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h4 id="2-2辅助函数-mapGetters"><a href="#2-2辅助函数-mapGetters" class="headerlink" title="2.2辅助函数 - mapGetters"></a>2.2辅助函数 - mapGetters</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;filterList&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;&#123;&#123; filterList &#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h2 id="十五、使用小结"><a href="#十五、使用小结" class="headerlink" title="十五、使用小结"></a>十五、使用小结</h2><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683442133911.png" alt="68344213391"></p>
<h2 id="十六、核心概念-module"><a href="#十六、核心概念-module" class="headerlink" title="十六、核心概念 - module"></a>十六、核心概念 - module</h2><h3 id="1-目标-3"><a href="#1-目标-3" class="headerlink" title="1.目标"></a>1.目标</h3><p>掌握核心概念 module 模块的创建</p>
<h3 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h3><p>由于使用<strong>单一状态树</strong>，应用的所有状态<strong>会集中到一个比较大的对象</strong>。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>
<p>这句话的意思是，如果把所有的状态都放在state中，当项目变得越来越大的时候，Vuex会变得越来越难以维护</p>
<p>由此，又有了Vuex的模块化</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683425758358.png" alt="68342575835"></p>
<h3 id="3-模块定义-准备-state"><a href="#3-模块定义-准备-state" class="headerlink" title="3.模块定义 - 准备 state"></a><strong>3.模块定义</strong> - 准备 state</h3><p>定义两个模块   <strong>user</strong> 和  <strong>setting</strong></p>
<p>user中管理用户的信息状态  userInfo  <code>modules/user.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">userInfo</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  state,<br>  mutations,<br>  actions,<br>  getters<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>setting中管理项目应用的  主题色 theme，描述 desc， <code>modules/setting.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;dark&#x27;</span><br>  <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;描述真呀真不错&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  state,<br>  mutations,<br>  actions,<br>  getters<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在<code>store/index.js</code>文件中的modules配置项中，注册这两个模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/user&#x27;</span><br><span class="hljs-keyword">import</span> setting <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/setting&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">modules</span>:&#123;<br>        user,<br>        setting<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>使用模块中的数据,  可以直接通过模块名访问 <code>$store.state.模块名.xxx</code>  &#x3D;&gt;  <code>$store.state.setting.desc</code></p>
<p>也可以通过 mapState 映射</p>
<h2 id="十七、获取模块内的state数据"><a href="#十七、获取模块内的state数据" class="headerlink" title="十七、获取模块内的state数据"></a>十七、获取模块内的state数据</h2><h3 id="1-目标：-1"><a href="#1-目标：-1" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握模块中 state 的访问语法</p>
<p>尽管已经分模块了，但其实子模块的状态，还是会挂到根级别的 state 中，属性名就是模块名</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683427841660.png" alt="68342784166"></p>
<h3 id="2-使用模块中的数据"><a href="#2-使用模块中的数据" class="headerlink" title="2.使用模块中的数据"></a>2.使用模块中的数据</h3><ol>
<li>直接通过模块名访问 $store.state.模块名.xxx</li>
<li>通过 mapState 映射：<ol>
<li>默认根级别的映射  mapState([ ‘xxx’ ])     </li>
<li>子模块的映射 ：mapState(‘模块名’, [‘xxx’])  -  需要开启命名空间 <strong>namespaced:true</strong></li>
</ol>
</li>
</ol>
<p><code>modules/user.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">userInfo</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>  &#125;,<br>  <span class="hljs-attr">myMsg</span>: <span class="hljs-string">&#x27;我的数据&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br>  updateMsg (state, msg) &#123;<br>    state.<span class="hljs-property">myMsg</span> = msg<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  state,<br>  mutations,<br>  actions,<br>  getters<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3.代码示例"></a>3.代码示例</h3><p>$store直接访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$store.<span class="hljs-property">state</span>.<span class="hljs-property">user</span>.<span class="hljs-property">userInfo</span>.<span class="hljs-property">name</span><br></code></pre></td></tr></table></figure>

<p>mapState辅助函数访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;user&#x27;</span>, [<span class="hljs-string">&#x27;userInfo&#x27;</span>]),<br>...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;setting&#x27;</span>, [<span class="hljs-string">&#x27;theme&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>]),<br></code></pre></td></tr></table></figure>



<h2 id="十八、获取模块内的getters数据"><a href="#十八、获取模块内的getters数据" class="headerlink" title="十八、获取模块内的getters数据"></a>十八、获取模块内的getters数据</h2><h3 id="1-目标：-2"><a href="#1-目标：-2" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握模块中 getters 的访问语</p>
<h3 id="2-语法："><a href="#2-语法：" class="headerlink" title="2.语法："></a>2.语法：</h3><p>使用模块中 getters 中的数据： </p>
<ol>
<li>直接通过模块名访问<code> $store.getters[&#39;模块名/xxx &#39;]</code></li>
<li>通过 mapGetters 映射      <ol>
<li>默认根级别的映射  <code>mapGetters([ &#39;xxx&#39; ]) </code></li>
<li>子模块的映射  <code>mapGetters(&#39;模块名&#39;, [&#39;xxx&#39;])</code> -  需要开启命名空间</li>
</ol>
</li>
</ol>
<h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3.代码演示"></a>3.代码演示</h3><p><code>modules/user.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-comment">// 分模块后，state指代子模块的state</span><br>  <span class="hljs-title class_">UpperCaseName</span> (state) &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">userInfo</span>.<span class="hljs-property">name</span>.<span class="hljs-title function_">toUpperCase</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Son1.vue 直接访问getters</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 测试访问模块中的getters - 原生 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; $store.getters[&#x27;user/UpperCaseName&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>Son2.vue 通过命名空间访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>:&#123;<br>  ...<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&#x27;user&#x27;</span>, [<span class="hljs-string">&#x27;UpperCaseName&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="十九、获取模块内的mutations方法"><a href="#十九、获取模块内的mutations方法" class="headerlink" title="十九、获取模块内的mutations方法"></a>十九、获取模块内的mutations方法</h2><h3 id="1-目标：-3"><a href="#1-目标：-3" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握模块中 mutation 的调用语法</p>
<h3 id="2-注意："><a href="#2-注意：" class="headerlink" title="2.注意："></a>2.注意：</h3><p>默认模块中的 mutation 和 actions 会被挂载到全局，<strong>需要开启命名空间</strong>，才会挂载到子模块。</p>
<h3 id="3-调用方式："><a href="#3-调用方式：" class="headerlink" title="3.调用方式："></a>3.调用方式：</h3><ol>
<li>直接通过 store 调用   $store.commit(‘模块名&#x2F;xxx ‘,  额外参数)</li>
<li>通过 mapMutations 映射    <ol>
<li>默认根级别的映射  mapMutations([ ‘xxx’ ])     </li>
<li>子模块的映射 mapMutations(‘模块名’, [‘xxx’])  -  需要开启命名空间</li>
</ol>
</li>
</ol>
<h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><p><code>modules/user.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mutations = &#123;<br>  setUser (state, newUserInfo) &#123;<br>    state.<span class="hljs-property">userInfo</span> = newUserInfo<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><code>modules/setting.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mutations = &#123;<br>  setTheme (state, newTheme) &#123;<br>    state.<span class="hljs-property">theme</span> = newTheme<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Son1.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;updateUser&quot;&gt;更新个人信息&lt;/button&gt; <br>&lt;button @click=&quot;updateTheme&quot;&gt;更新主题色&lt;/button&gt;<br><br><br>export default &#123;<br>  methods: &#123;<br>    updateUser () &#123;<br>      // $store.commit(&#x27;模块名/mutation名&#x27;, 额外传参)<br>      this.$store.commit(&#x27;user/setUser&#x27;, &#123;<br>        name: &#x27;xiaowang&#x27;,<br>        age: 25<br>      &#125;)<br>    &#125;, <br>    updateTheme () &#123;<br>      this.$store.commit(&#x27;setting/setTheme&#x27;, &#x27;pink&#x27;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>Son2.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;setUser(&#123; name: &#x27;xiaoli&#x27;, age: 80 &#125;)&quot;&gt;更新个人信息&lt;/button&gt;<br>&lt;button @click=&quot;setTheme(&#x27;skyblue&#x27;)&quot;&gt;更新主题&lt;/button&gt;<br><br>methods:&#123;<br>// 分模块的映射<br>...mapMutations(&#x27;setting&#x27;, [&#x27;setTheme&#x27;]),<br>...mapMutations(&#x27;user&#x27;, [&#x27;setUser&#x27;]),<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="二十、获取模块内的actions方法"><a href="#二十、获取模块内的actions方法" class="headerlink" title="二十、获取模块内的actions方法"></a>二十、获取模块内的actions方法</h2><h3 id="1-目标：-4"><a href="#1-目标：-4" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握模块中 action 的调用语法 (同理 - 直接类比 mutation 即可)</p>
<h3 id="2-注意：-1"><a href="#2-注意：-1" class="headerlink" title="2.注意："></a>2.注意：</h3><p>默认模块中的 mutation 和 actions 会被挂载到全局，<strong>需要开启命名空间</strong>，才会挂载到子模块。</p>
<h3 id="3-调用语法："><a href="#3-调用语法：" class="headerlink" title="3.调用语法："></a>3.调用语法：</h3><ol>
<li>直接通过 store 调用   $store.dispatch(‘模块名&#x2F;xxx ‘,  额外参数)</li>
<li>通过 mapActions 映射     <ol>
<li>默认根级别的映射  mapActions([ ‘xxx’ ])     </li>
<li>子模块的映射 mapActions(‘模块名’, [‘xxx’])  -  需要开启命名空间</li>
</ol>
</li>
</ol>
<h3 id="4-代码实现-1"><a href="#4-代码实现-1" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><p>需求：</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683431615694.png" alt="68343161569"></p>
<p><code>modules/user.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = &#123;<br>  setUserSecond (context, newUserInfo) &#123;<br>    <span class="hljs-comment">// 将异步在action中进行封装</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 调用mutation   context上下文，默认提交的就是自己模块的action和mutation</span><br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setUser&#x27;</span>, newUserInfo)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Son1.vue  直接通过store调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;updateUser2&quot;&gt;一秒后更新信息&lt;/button&gt;<br><br>methods:&#123;<br>    updateUser2 () &#123;<br>      // 调用action dispatch<br>      this.$store.dispatch(&#x27;user/setUserSecond&#x27;, &#123;<br>        name: &#x27;xiaohong&#x27;,<br>        age: 28<br>      &#125;)<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>



<p>Son2.vue mapActions映射</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;button @click=<span class="hljs-string">&quot;setUserSecond(&#123; name: &#x27;xiaoli&#x27;, age: 80 &#125;)&quot;</span>&gt;一秒后更新信息&lt;/button&gt;<br><br><span class="hljs-attr">methods</span>:&#123;<br>  ...<span class="hljs-title function_">mapActions</span>(<span class="hljs-string">&#x27;user&#x27;</span>, [<span class="hljs-string">&#x27;setUserSecond&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="二十一、Vuex模块化的使用小结"><a href="#二十一、Vuex模块化的使用小结" class="headerlink" title="二十一、Vuex模块化的使用小结"></a>二十一、Vuex模块化的使用小结</h2><h3 id="1-直接使用"><a href="#1-直接使用" class="headerlink" title="1.直接使用"></a>1.直接使用</h3><ol>
<li>state –&gt; $store.state.<strong>模块名</strong>.数据项名</li>
<li>getters –&gt; $store.getters[‘<strong>模块名</strong>&#x2F;属性名’]</li>
<li>mutations –&gt; $store.commit(‘<strong>模块名</strong>&#x2F;方法名’, 其他参数)</li>
<li>actions –&gt; $store.dispatch(‘<strong>模块名</strong>&#x2F;方法名’, 其他参数)</li>
</ol>
<h3 id="2-借助辅助方法使用"><a href="#2-借助辅助方法使用" class="headerlink" title="2.借助辅助方法使用"></a>2.借助辅助方法使用</h3><p>1.import { mapXxxx, mapXxx } from ‘vuex’</p>
<p>computed、methods: {</p>
<p>​     &#x2F;&#x2F; <strong>…mapState、…mapGetters放computed中；</strong></p>
<p>​    &#x2F;&#x2F;  <strong>…mapMutations、…mapActions放methods中；</strong></p>
<p>​    …mapXxxx(<strong>‘模块名’</strong>, [‘数据项|方法’]),</p>
<p>​    …mapXxxx(<strong>‘模块名’</strong>, { 新的名字: 原来的名字 }),</p>
<p>}</p>
<p>2.组件中直接使用 属性 <code>&#123;&#123; age &#125;&#125;</code> 或 方法 <code>@click=&quot;updateAge(2)&quot;</code></p>
<h2 id="二十二、综合案例-创建项目"><a href="#二十二、综合案例-创建项目" class="headerlink" title="二十二、综合案例 - 创建项目"></a>二十二、综合案例 - 创建项目</h2><ol>
<li><p>脚手架新建项目 (注意：<strong>勾选vuex</strong>)      </p>
<p>版本说明：</p>
<p>vue2   vue-router3   vuex3               </p>
<p>vue3  vue-router4  vuex4&#x2F;pinia</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">vue create vue-cart-demo<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>将原本src内容清空，替换成教学资料的《vuex-cart-准备代码》</li>
</ol>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683432959356.png" alt="68343295935"></p>
<p>需求：</p>
<ol>
<li>发请求动态渲染购物车，数据存vuex （存cart模块， 将来还会有user模块，article模块…）</li>
<li>数字框可以修改数据</li>
<li>动态计算总价和总数量</li>
</ol>
<h2 id="二十三、综合案例-构建vuex-cart模块"><a href="#二十三、综合案例-构建vuex-cart模块" class="headerlink" title="二十三、综合案例-构建vuex-cart模块"></a>二十三、综合案例-构建vuex-cart模块</h2><ol>
<li>新建 <code>store/modules/cart.js</code></li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  state () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">list</span>: []<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>挂载到 vuex 仓库上 <code>store/cart.js</code></li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">import</span> cart <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/cart&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    cart<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure>



<h2 id="二十四、综合案例-准备后端接口服务环境-了解"><a href="#二十四、综合案例-准备后端接口服务环境-了解" class="headerlink" title="二十四、综合案例-准备后端接口服务环境(了解)"></a>二十四、综合案例-准备后端接口服务环境(了解)</h2><ol>
<li>安装全局工具 json-server （全局工具仅需要安装一次）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">yarn global add json-server 或 npm i json-server  -g<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>代码根目录新建一个 db 目录</li>
<li>将资料 index.json 移入 db 目录</li>
<li>进入 db 目录，执行命令，启动后端接口服务 (使用–watch 参数 可以实时监听 json 文件的修改)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">json-server  --watch  index.json<br></code></pre></td></tr></table></figure>



<h2 id="二十五、综合案例-请求动态渲染数据"><a href="#二十五、综合案例-请求动态渲染数据" class="headerlink" title="二十五、综合案例-请求动态渲染数据"></a>二十五、综合案例-请求动态渲染数据</h2><h3 id="1-目标-4"><a href="#1-目标-4" class="headerlink" title="1.目标"></a>1.目标</h3><p>请求获取数据存入 vuex, 映射渲染</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683436471929.png" alt="68343647192"></p>
<ol>
<li>安装 axios</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">yarn add axios<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>准备actions 和 mutations</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  state () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">list</span>: []<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    updateList (state, payload) &#123;<br>      state.<span class="hljs-property">list</span> = payload<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-keyword">async</span> getList (ctx) &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/cart&#x27;</span>)<br>      ctx.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;updateList&#x27;</span>, res.<span class="hljs-property">data</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li><code>App.vue</code>页面中调用 action,  获取数据</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">CartHeader</span>,<br>    <span class="hljs-title class_">CartFooter</span>,<br>    <span class="hljs-title class_">CartItem</span><br>  &#125;,<br>  created () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;cart/getList&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;cart&#x27;</span>, [<span class="hljs-string">&#x27;list&#x27;</span>])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>动态渲染</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;!-- 商品 <span class="hljs-title class_">Item</span> 项组件 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">cart-item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span> <span class="hljs-attr">:item</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-item</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p><code>cart-item.vue</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;goods-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 左侧图片区域 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.thumb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 右侧商品区域 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 标题 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 单价 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span>￥&#123;&#123;item.price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btns&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-comment">&lt;!-- 按钮区域 --&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-light&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span>&#123;&#123;item.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-light&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;CartItem&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">item</span>: <span class="hljs-title class_">Object</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h2 id="二十六、综合案例-修改数量"><a href="#二十六、综合案例-修改数量" class="headerlink" title="二十六、综合案例-修改数量"></a>二十六、综合案例-修改数量</h2><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683437346997.png" alt="68343734699"></p>
<ol>
<li>注册点击事件</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;!-- 按钮区域 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-light&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onBtnClick(-1)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span>&#123;&#123;item.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-light&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onBtnClick(1)&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<ol start="2">
<li>页面中dispatch action</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">onBtnClick (step) &#123;<br>  <span class="hljs-keyword">const</span> newCount = <span class="hljs-variable language_">this</span>.<span class="hljs-property">item</span>.<span class="hljs-property">count</span> + step<br>  <span class="hljs-keyword">if</span> (newCount &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span><br><br>  <span class="hljs-comment">// 发送修改数量请求</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;cart/updateCount&#x27;</span>, &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">item</span>.<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">count</span>: newCount<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>提供action函数</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">async</span> updateCount (ctx, payload) &#123;<br>  <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">patch</span>(<span class="hljs-string">&#x27;http://localhost:3000/cart/&#x27;</span> + payload.<span class="hljs-property">id</span>, &#123;<br>    <span class="hljs-attr">count</span>: payload.<span class="hljs-property">count</span><br>  &#125;)<br>  ctx.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;updateCount&#x27;</span>, payload)<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>提供mutation处理函数</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">mutations</span>: &#123;<br>  ...,<br>  updateCount (state, payload) &#123;<br>    <span class="hljs-keyword">const</span> goods = state.<span class="hljs-property">list</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> === payload.<span class="hljs-property">id</span>)<br>    goods.<span class="hljs-property">count</span> = payload.<span class="hljs-property">count</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>



<h2 id="二十七、综合案例-底部总价展示"><a href="#二十七、综合案例-底部总价展示" class="headerlink" title="二十七、综合案例-底部总价展示"></a>二十七、综合案例-底部总价展示</h2><ol>
<li>提供getters</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-title function_">total</span>(<span class="hljs-params">state</span>) &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">p, c</span>) =&gt;</span> p + c.<span class="hljs-property">count</span>, <span class="hljs-number">0</span>);<br>  &#125;,<br>  totalPrice (state) &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">p, c</span>) =&gt;</span> p + c.<span class="hljs-property">count</span> * c.<span class="hljs-property">price</span>, <span class="hljs-number">0</span>);<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>动态渲染</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 中间的合计 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>共 &#123;&#123;total&#125;&#125; 件商品，合计：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span>￥&#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 右侧结算按钮 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success btn-settle&quot;</span>&gt;</span>结算<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;CartFooter&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&#x27;cart&#x27;</span>, [<span class="hljs-string">&#x27;total&#x27;</span>, <span class="hljs-string">&#x27;totalPrice&#x27;</span>])</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day6</title>
    <url>/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/</url>
    <content><![CDATA[<h2 id="一、声明式导航-导航链接"><a href="#一、声明式导航-导航链接" class="headerlink" title="一、声明式导航-导航链接"></a>一、声明式导航-导航链接</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>实现导航高亮效果</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682492044744.png" alt="68249204474"></p>
<p>如果使用a标签进行跳转的话，需要给当前跳转的导航加样式，同时要移除上一个a标签的样式，太麻烦！！！</p>
<h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h3><p>vue-router 提供了一个全局组件 router-link (取代 a 标签)</p>
<ul>
<li><strong>能跳转</strong>，配置 to 属性指定路径(<strong>必须</strong>) 。本质还是 a 标签 ，<strong>to 无需 #</strong></li>
<li><strong>能高亮</strong>，默认就会提供<strong>高亮类名</strong>，可以直接设置高亮样式</li>
</ul>
<p>语法： <router-link to="path的值">发现音乐</router-link></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;<br>  &lt;div class=&quot;footer_wrap&quot;&gt;<br>    &lt;router-link to=&quot;/find&quot;&gt;发现音乐&lt;/router-link&gt;<br>    &lt;router-link to=&quot;/my&quot;&gt;我的音乐&lt;/router-link&gt;<br>    &lt;router-link to=&quot;/friend&quot;&gt;朋友&lt;/router-link&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;top&quot;&gt;<br>    &lt;!-- 路由出口 → 匹配的组件所展示的位置 --&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-通过router-link自带的两个样式进行高亮"><a href="#3-通过router-link自带的两个样式进行高亮" class="headerlink" title="3.通过router-link自带的两个样式进行高亮"></a>3.通过router-link自带的两个样式进行高亮</h3><p>使用router-link跳转后，我们发现。当前点击的链接默认加了两个class的值 <code>router-link-exact-active</code>和<code>router-link-active</code></p>
<p>我们可以给任意一个class属性添加高亮样式即可实现功能</p>
<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><ul>
<li>router-link是什么？</li>
<li>router-link怎么用？</li>
<li>router-link的好处是什么？</li>
</ul>
<h2 id="二、声明式导航-两个类名"><a href="#二、声明式导航-两个类名" class="headerlink" title="二、声明式导航-两个类名"></a>二、声明式导航-两个类名</h2><p>当我们使用<router-link></router-link>跳转时，自动给当前导航加了<strong>两个类名</strong></p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682493121052.png" alt="68249312105"></p>
<h3 id="1-router-link-active"><a href="#1-router-link-active" class="headerlink" title="1.router-link-active"></a>1.router-link-active</h3><p><strong>模糊匹配（用的多）</strong></p>
<p>to&#x3D;”&#x2F;my”  可以匹配 &#x2F;my    &#x2F;my&#x2F;a    &#x2F;my&#x2F;b    ….  </p>
<p>只要是以&#x2F;my开头的路径 都可以和 to&#x3D;”&#x2F;my”匹配到</p>
<h3 id="2-router-link-exact-active"><a href="#2-router-link-exact-active" class="headerlink" title="2.router-link-exact-active"></a>2.router-link-exact-active</h3><p><strong>精确匹配</strong></p>
<p>to&#x3D;”&#x2F;my” 仅可以匹配  &#x2F;my</p>
<h3 id="3-在地址栏中输入二级路由查看类名的添加"><a href="#3-在地址栏中输入二级路由查看类名的添加" class="headerlink" title="3.在地址栏中输入二级路由查看类名的添加"></a>3.在地址栏中输入二级路由查看类名的添加</h3><h3 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h3><ul>
<li>router-link 会自动给当前导航添加两个类名，有什么区别呢？</li>
</ul>
<h2 id="三、声明式导航-自定义类名（了解）"><a href="#三、声明式导航-自定义类名（了解）" class="headerlink" title="三、声明式导航-自定义类名（了解）"></a>三、声明式导航-自定义类名（了解）</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h3><p>router-link的<strong>两个高亮类名 太长了</strong>，我们希望能定制怎么办</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682493610911.png" alt="68249361091"></p>
<h3 id="2-解决方案-1"><a href="#2-解决方案-1" class="headerlink" title="2.解决方案"></a>2.解决方案</h3><p>我们可以在创建路由对象时，额外配置两个配置项即可。 <code>linkActiveClass</code>和<code>linkExactActiveClass</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [...],<br>  <span class="hljs-attr">linkActiveClass</span>: <span class="hljs-string">&quot;类名1&quot;</span>,<br>  <span class="hljs-attr">linkExactActiveClass</span>: <span class="hljs-string">&quot;类名2&quot;</span><br>&#125;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682493729456.png" alt="68249372945"></p>
<h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3.代码演示"></a>3.代码演示</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建了一个路由对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    ...<br>  ], <br>  <span class="hljs-attr">linkActiveClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>, <span class="hljs-comment">// 配置模糊匹配的类名</span><br>  <span class="hljs-attr">linkExactActiveClass</span>: <span class="hljs-string">&#x27;exact-active&#x27;</span> <span class="hljs-comment">// 配置精确匹配的类名</span><br>&#125;)<br></code></pre></td></tr></table></figure>



<h3 id="4-总结-2"><a href="#4-总结-2" class="headerlink" title="4.总结"></a>4.总结</h3><p>如何自定义router-link的两个<strong>高亮类名</strong></p>
<h2 id="四、声明式导航-查询参数传参"><a href="#四、声明式导航-查询参数传参" class="headerlink" title="四、声明式导航-查询参数传参"></a>四、声明式导航-查询参数传参</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><p>在跳转路由时，进行传参</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682494423923.png" alt="68249442392"></p>
<p>比如：现在我们在搜索页点击了热门搜索链接，跳转到详情页，<strong>需要把点击的内容带到详情页</strong>，改怎么办呢？</p>
<h3 id="2-跳转传参"><a href="#2-跳转传参" class="headerlink" title="2.跳转传参"></a>2.跳转传参</h3><p>我们可以通过两种方式，在跳转的时候把所需要的参数传到其他页面中</p>
<ul>
<li>查询参数传参</li>
<li>动态路由传参</li>
</ul>
<h3 id="3-查询参数传参"><a href="#3-查询参数传参" class="headerlink" title="3.查询参数传参"></a>3.查询参数传参</h3><ul>
<li><p>如何传参？</p>
<p><router-link to="/path?参数名=值"></router-link></p>
</li>
<li><p>如何接受参数</p>
<p>固定用法：$router.query.参数名</p>
</li>
</ul>
<h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;div class=&quot;link&quot;&gt;<br>      &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;<br>      &lt;router-link to=&quot;/search&quot;&gt;搜索页&lt;/router-link&gt;<br>    &lt;/div&gt;<br><br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.link &#123;<br>  height: 50px;<br>  line-height: 50px;<br>  background-color: #495150;<br>  display: flex;<br>  margin: -8px -8px 0 -8px;<br>  margin-bottom: 50px;<br>&#125;<br>.link a &#123;<br>  display: block;<br>  text-decoration: none;<br>  background-color: #ad2a26;<br>  width: 100px;<br>  text-align: center;<br>  margin-right: 5px;<br>  color: #fff;<br>  border-radius: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home&quot;&gt;<br>    &lt;div class=&quot;logo-box&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;search-box&quot;&gt;<br>      &lt;input type=&quot;text&quot;&gt;<br>      &lt;button&gt;搜索一下&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;div class=&quot;hot-link&quot;&gt;<br>      热门搜索：<br>      &lt;router-link to=&quot;&quot;&gt;黑马程序员&lt;/router-link&gt;<br>      &lt;router-link to=&quot;&quot;&gt;前端培训&lt;/router-link&gt;<br>      &lt;router-link to=&quot;&quot;&gt;如何成为前端大牛&lt;/router-link&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;FindMusic&#x27;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.logo-box &#123;<br>  height: 150px;<br>  background: url(&#x27;@/assets/logo.jpeg&#x27;) no-repeat center;<br>&#125;<br>.search-box &#123;<br>  display: flex;<br>  justify-content: center;<br>&#125;<br>.search-box input &#123;<br>  width: 400px;<br>  height: 30px;<br>  line-height: 30px;<br>  border: 2px solid #c4c7ce;<br>  border-radius: 4px 0 0 4px;<br>  outline: none;<br>&#125;<br>.search-box input:focus &#123;<br>  border: 2px solid #ad2a26;<br>&#125;<br>.search-box button &#123;<br>  width: 100px;<br>  height: 36px;<br>  border: none;<br>  background-color: #ad2a26;<br>  color: #fff;<br>  position: relative;<br>  left: -2px;<br>  border-radius: 0 4px 4px 0;<br>&#125;<br>.hot-link &#123;<br>  width: 508px;<br>  height: 60px;<br>  line-height: 60px;<br>  margin: 0 auto;<br>&#125;<br>.hot-link a &#123;<br>  margin: 0 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>Search.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;search&quot;&gt;<br>    &lt;p&gt;搜索关键字: 黑马程序员&lt;/p&gt;<br>    &lt;p&gt;搜索结果: &lt;/p&gt;<br>    &lt;ul&gt;<br>      &lt;li&gt;.............&lt;/li&gt;<br>      &lt;li&gt;.............&lt;/li&gt;<br>      &lt;li&gt;.............&lt;/li&gt;<br>      &lt;li&gt;.............&lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;MyFriend&#x27;,<br>  created () &#123;<br>    // 在created中，获取路由参数<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.search &#123;<br>  width: 400px;<br>  height: 240px;<br>  padding: 0 20px;<br>  margin: 0 auto;<br>  border: 2px solid #c4c7ce;<br>  border-radius: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>router&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Search&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>) <span class="hljs-comment">// VueRouter插件初始化</span><br><br><span class="hljs-comment">// 创建了一个路由对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Search</span> &#125;<br>  ]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">...<br>import router from &#x27;./router/index&#x27;<br>...<br>new Vue(&#123;<br>  render: h =&gt; h(App),<br>  router<br>&#125;).$mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure>



<h2 id="五、声明式导航-动态路由传参"><a href="#五、声明式导航-动态路由传参" class="headerlink" title="五、声明式导航-动态路由传参"></a>五、声明式导航-动态路由传参</h2><h3 id="1-动态路由传参方式"><a href="#1-动态路由传参方式" class="headerlink" title="1.动态路由传参方式"></a>1.动态路由传参方式</h3><ul>
<li><p>配置动态路由</p>
<blockquote>
<p>动态路由后面的参数可以随便起名，但要有语义</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    ...,<br>    &#123; <br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search/:words&#x27;</span>, <br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Search</span> <br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>配置导航链接</p>
<p>to&#x3D;”&#x2F;path&#x2F;参数值”</p>
</li>
<li><p>对应页面组件<strong>接受参数</strong></p>
<p>$route.<strong>params</strong>.参数名</p>
<blockquote>
<p>params后面的参数名要和动态路由配置的参数保持一致</p>
</blockquote>
</li>
</ul>
<h3 id="2-查询参数传参-VS-动态路由传参"><a href="#2-查询参数传参-VS-动态路由传参" class="headerlink" title="2.查询参数传参 VS 动态路由传参"></a>2.查询参数传参 VS 动态路由传参</h3><ol>
<li><p>查询参数传参  (比较适合传<strong>多个参数</strong>) </p>
<ol>
<li>跳转：to&#x3D;”&#x2F;path?参数名&#x3D;值&amp;参数名2&#x3D;值”</li>
<li>获取：$route.query.参数名</li>
</ol>
</li>
<li><p>动态路由传参 (<strong>优雅简洁</strong>，传单个参数比较方便)</p>
<ol>
<li>配置动态路由：path: “&#x2F;path&#x2F;:参数名” </li>
<li>跳转：to&#x3D;”&#x2F;path&#x2F;参数值”</li>
<li>获取：$route.params.参数名</li>
</ol>
<p>注意：动态路由也可以传多个参数，但一般只传一个</p>
</li>
</ol>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>声明式导航跳转时, 有几种方式传值给路由页面？</p>
<ul>
<li>查询参数传参（多个参数）</li>
<li>动态路由传参（一个参数，优雅简洁）</li>
</ul>
<h2 id="六、动态路由参数的可选符-了解"><a href="#六、动态路由参数的可选符-了解" class="headerlink" title="六、动态路由参数的可选符(了解)"></a>六、动态路由参数的可选符(了解)</h2><h3 id="1-问题-1"><a href="#1-问题-1" class="headerlink" title="1.问题"></a>1.问题</h3><p>配了路由 path:”&#x2F;search&#x2F;:words”  为什么按下面步骤操作，会未匹配到组件，显示空白？</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682497238305.png" alt="68249723830"></p>
<h3 id="2-原因"><a href="#2-原因" class="headerlink" title="2.原因"></a>2.原因</h3><p>&#x2F;search&#x2F;:words  表示，<strong>必须要传参数</strong>。如果不传参数，也希望匹配，可以加个可选符”？”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br> 	...<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search/:words?&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Search</span> &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="七、Vue路由-重定向"><a href="#七、Vue路由-重定向" class="headerlink" title="七、Vue路由-重定向"></a>七、Vue路由-重定向</h2><h3 id="1-问题-2"><a href="#1-问题-2" class="headerlink" title="1.问题"></a>1.问题</h3><p>网页打开时， url 默认是 &#x2F; 路径，未匹配到组件时，会出现空白</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682497872821.png" alt="68249787282"></p>
<h3 id="2-解决方案-2"><a href="#2-解决方案-2" class="headerlink" title="2.解决方案"></a>2.解决方案</h3><p><strong>重定向</strong> → 匹配 &#x2F; 后, 强制跳转 &#x2F;home 路径</p>
<h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">path</span>: 匹配路径, <span class="hljs-attr">redirect</span>: 重定向到的路径 &#125;,<br>比如：<br>&#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span> ,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/home&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>



<h3 id="4-代码演示-1"><a href="#4-代码演示-1" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const router = new VueRouter(&#123;<br>  routes: [<br>    &#123; path: &#x27;/&#x27;, redirect: &#x27;/home&#x27;&#125;,<br> 	 ...<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="八、Vue路由-404"><a href="#八、Vue路由-404" class="headerlink" title="八、Vue路由-404"></a>八、Vue路由-404</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><p>当路径找不到匹配时，给个提示页面</p>
<h3 id="2-位置"><a href="#2-位置" class="headerlink" title="2.位置"></a>2.位置</h3><p>404的路由，虽然配置在任何一个位置都可以，但一般都<strong>配置在其他路由规则的最后面</strong></p>
<h3 id="3-语法-1"><a href="#3-语法-1" class="headerlink" title="3.语法"></a>3.语法</h3><p>path: “*”   (任意路径) – 前面不匹配就命中最后这个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">NotFind</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/NotFind&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    ...<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">NotFind</span> &#125; <span class="hljs-comment">//最后一个</span><br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4.代码示例"></a>4.代码示例</h3><p>NotFound.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;404 Not Found&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>router&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NotFound</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/NotFound&#x27;</span><br>...<br><br><span class="hljs-comment">// 创建了一个路由对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>     ...<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">NotFound</span> &#125;<br>  ]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure>



<h2 id="九、Vue路由-模式设置"><a href="#九、Vue路由-模式设置" class="headerlink" title="九、Vue路由-模式设置"></a>九、Vue路由-模式设置</h2><h3 id="1-问题-3"><a href="#1-问题-3" class="headerlink" title="1.问题"></a>1.问题</h3><p>路由的路径看起来不自然, 有#，能否切成真正路径形式?</p>
<ul>
<li>hash路由(默认)        例如:  <a href="http://localhost:8080/#/home">http://localhost:8080/#/home</a></li>
<li>history路由(常用)     例如: <a href="http://localhost:8080/home">http://localhost:8080/home</a>   (以后上线需要服务器端支持，开发环境webpack给规避掉了history模式的问题)</li>
</ul>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">mode</span>:<span class="hljs-string">&#x27;histroy&#x27;</span>, <span class="hljs-comment">//默认是hash</span><br>    <span class="hljs-attr">routes</span>:[]<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="十、编程式导航-两种路由跳转方式"><a href="#十、编程式导航-两种路由跳转方式" class="headerlink" title="十、编程式导航-两种路由跳转方式"></a>十、编程式导航-两种路由跳转方式</h2><h3 id="1-问题-4"><a href="#1-问题-4" class="headerlink" title="1.问题"></a>1.问题</h3><p>点击按钮跳转如何实现？</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682500481059.png" alt="68250048105"></p>
<h3 id="2-方案"><a href="#2-方案" class="headerlink" title="2.方案"></a>2.方案</h3><p>编程式导航：用JS代码来进行跳转</p>
<h3 id="3-语法-2"><a href="#3-语法-2" class="headerlink" title="3.语法"></a>3.语法</h3><p>两种语法：</p>
<ul>
<li>path 路径跳转 （简易方便）</li>
<li>name 命名路由跳转 (适合 path 路径长的场景)</li>
</ul>
<h3 id="4-path路径跳转语法"><a href="#4-path路径跳转语法" class="headerlink" title="4.path路径跳转语法"></a>4.path路径跳转语法</h3><p>特点：简易方便</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//简单写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;路由路径&#x27;</span>)<br><br><span class="hljs-comment">//完整写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;路由路径&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="5-代码演示-path跳转方式"><a href="#5-代码演示-path跳转方式" class="headerlink" title="5.代码演示 path跳转方式"></a>5.代码演示 path跳转方式</h3><h3 id="6-name命名路由跳转"><a href="#6-name命名路由跳转" class="headerlink" title="6.name命名路由跳转"></a>6.name命名路由跳转</h3><p>特点：适合 path 路径长的场景</p>
<p>语法：</p>
<ul>
<li><p>路由规则，必须配置name配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名&#x27;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/path/xxx&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-variable constant_">XXX</span> &#125;,<br></code></pre></td></tr></table></figure>
</li>
<li><p>通过name来进行跳转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-代码演示通过name命名路由跳转"><a href="#7-代码演示通过name命名路由跳转" class="headerlink" title="7.代码演示通过name命名路由跳转"></a>7.代码演示通过name命名路由跳转</h3><h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h3><p>编程式导航有几种跳转方式？</p>
<h2 id="十一、编程式导航-path路径跳转传参"><a href="#十一、编程式导航-path路径跳转传参" class="headerlink" title="十一、编程式导航-path路径跳转传参"></a>十一、编程式导航-path路径跳转传参</h2><h3 id="1-问题-5"><a href="#1-问题-5" class="headerlink" title="1.问题"></a>1.问题</h3><p>点击搜索按钮，跳转需要把文本框中输入的内容传到下一个页面如何实现？</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682502720585.png" alt="68250272058"></p>
<h3 id="2-两种传参方式"><a href="#2-两种传参方式" class="headerlink" title="2.两种传参方式"></a>2.两种传参方式</h3><p>1.查询参数 </p>
<p>2.动态路由传参</p>
<h3 id="3-传参"><a href="#3-传参" class="headerlink" title="3.传参"></a>3.传参</h3><p>两种跳转方式，对于两种传参方式都支持：</p>
<p>① path 路径跳转传参</p>
<p>② name 命名路由跳转传参</p>
<h3 id="4-path路径跳转传参（query传参）"><a href="#4-path路径跳转传参（query传参）" class="headerlink" title="4.path路径跳转传参（query传参）"></a>4.path路径跳转传参（query传参）</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//简单写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/路径?参数名1=参数值1&amp;参数2=参数值2&#x27;</span>)<br><span class="hljs-comment">//完整写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/路径&#x27;</span>,<br>  <span class="hljs-attr">query</span>: &#123;<br>    参数名<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;参数值1&#x27;</span>,<br>    参数名<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;参数值2&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>接受参数的方式依然是：$route.query.参数名</p>
<h3 id="5-path路径跳转传参（动态路由传参）"><a href="#5-path路径跳转传参（动态路由传参）" class="headerlink" title="5.path路径跳转传参（动态路由传参）"></a>5.path路径跳转传参（动态路由传参）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//简单写法<br>this.$router.push(&#x27;/路径/参数值&#x27;)<br>//完整写法<br>this.$router.push(&#123;<br>  path: &#x27;/路径/参数值&#x27;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>接受参数的方式依然是：$route.params.参数值</p>
<p><strong>注意：</strong>path不能配合params使用</p>
<h2 id="十二、编程式导航-name命名路由传参"><a href="#十二、编程式导航-name命名路由传参" class="headerlink" title="十二、编程式导航-name命名路由传参"></a>十二、编程式导航-name命名路由传参</h2><h3 id="1-name-命名路由跳转传参-query传参"><a href="#1-name-命名路由跳转传参-query传参" class="headerlink" title="1.name 命名路由跳转传参 (query传参)"></a>1.name 命名路由跳转传参 (query传参)</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名字&#x27;</span>,<br>  <span class="hljs-attr">query</span>: &#123;<br>    参数名<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;参数值1&#x27;</span>,<br>    参数名<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;参数值2&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="2-name-命名路由跳转传参-动态路由传参"><a href="#2-name-命名路由跳转传参-动态路由传参" class="headerlink" title="2.name 命名路由跳转传参 (动态路由传参)"></a>2.name 命名路由跳转传参 (动态路由传参)</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名字&#x27;</span>,<br>  <span class="hljs-attr">params</span>: &#123;<br>    参数名: <span class="hljs-string">&#x27;参数值&#x27;</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="3-总结-1"><a href="#3-总结-1" class="headerlink" title="3.总结"></a>3.总结</h3><p>编程式导航，如何跳转传参？</p>
<p>1.path路径跳转</p>
<ul>
<li><p>query传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/路径?参数名1=参数值1&amp;参数2=参数值2&#x27;</span>)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/路径&#x27;</span>,<br>  <span class="hljs-attr">query</span>: &#123;<br>    参数名<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;参数值1&#x27;</span>,<br>    参数名<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;参数值2&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>动态路由传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/路径/参数值&#x27;</span>)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/路径/参数值&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li>
</ul>
<p>2.name命名路由跳转</p>
<ul>
<li><p>query传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名字&#x27;</span>,<br>  <span class="hljs-attr">query</span>: &#123;<br>    参数名<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;参数值1&#x27;</span>,<br>    参数名<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;参数值2&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>动态路由传参 (需要配动态路由)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名字&#x27;</span>,<br>  <span class="hljs-attr">params</span>: &#123;<br>    参数名: <span class="hljs-string">&#x27;参数值&#x27;</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="十三、面经基础版-案例效果分析"><a href="#十三、面经基础版-案例效果分析" class="headerlink" title="十三、面经基础版-案例效果分析"></a>十三、面经基础版-案例效果分析</h2><h3 id="1-面经效果演示"><a href="#1-面经效果演示" class="headerlink" title="1.面经效果演示"></a>1.面经效果演示</h3><h3 id="2-功能分析"><a href="#2-功能分析" class="headerlink" title="2.功能分析"></a>2.功能分析</h3><ul>
<li>通过演示效果发现，主要的功能页面有两个，一个是<strong>列表页</strong>，一个是<strong>详情页</strong>，并且在列表页点击时可以跳转到详情页</li>
<li>底部导航可以来回切换，并且切换时，只有上面的主题内容在动态渲染</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682559784643.png" alt="68255978464"></p>
<h3 id="3-实现思路分析：配置路由-功能实现"><a href="#3-实现思路分析：配置路由-功能实现" class="headerlink" title="3.实现思路分析：配置路由+功能实现"></a>3.实现思路分析：配置路由+功能实现</h3><p>1.配置路由</p>
<ul>
<li>首页和面经详情页，两个一级路由</li>
<li>首页内嵌套4个可切换的页面（嵌套二级路由）</li>
</ul>
<p>2.实现功能</p>
<ul>
<li>首页请求渲染</li>
<li><strong>跳转传参</strong> 到 详情页，详情页动态渲染</li>
<li>组件缓存，性能优化</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682560255356.png" alt="68256025535"></p>
<h2 id="十四、面经基础版-一级路由配置"><a href="#十四、面经基础版-一级路由配置" class="headerlink" title="十四、面经基础版-一级路由配置"></a>十四、面经基础版-一级路由配置</h2><p>1.把文档中准备的素材拷贝到项目中</p>
<p>2.针对router&#x2F;index.js文件 进行一级路由配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Layout.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ArticleDetail</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/ArticleDetail.vue&#x27;</span><br>...<br><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/detail&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">ArticleDetail</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="十五、面经基础版-二级路由配置"><a href="#十五、面经基础版-二级路由配置" class="headerlink" title="十五、面经基础版-二级路由配置"></a>十五、面经基础版-二级路由配置</h2><p>二级路由也叫嵌套路由，当然也可以嵌套三级、四级…</p>
<h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h3><p>当在页面中点击链接跳转，只是部分内容切换时，我们可以使用嵌套路由</p>
<h3 id="2-语法-1"><a href="#2-语法-1" class="headerlink" title="2.语法"></a>2.语法</h3><ul>
<li>在一级路由下，配置children属性即可</li>
<li>配置二级路由的出口</li>
</ul>
<p> 1.在一级路由下，配置children属性</p>
<p> <strong>注意</strong>:一级的路由path 需要加 <code>/</code>   二级路由的path不需要加 <code>/</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>      <span class="hljs-attr">children</span>:[<br>        <span class="hljs-comment">//children中的配置项 跟一级路由中的配置项一模一样 </span><br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-attr">component</span>:xxxx.<span class="hljs-property">vue</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-attr">component</span>:xxxx.<span class="hljs-property">vue</span>&#125;,<br>      ]<br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>技巧：二级路由应该配置到哪个一级路由下呢？</p>
<p><strong>这些二级路由对应的组件渲染到哪个一级路由下，children就配置到哪个路由下边</strong></p>
<p>2.配置二级路由的出口 <router-view></router-view></p>
<p><strong>注意：</strong> 配置了嵌套路由，一定配置对应的路由出口，否则不会渲染出对应的组件</p>
<p>Layout.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;h5-wrapper&quot;&gt;<br>    &lt;div class=&quot;content&quot;&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/div&gt;<br>  ....<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><p>router&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Article</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Article.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Collect</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Collect.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Like</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Like.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/User.vue&#x27;</span><br>...<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>      <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/article&#x27;</span>,<br>      <span class="hljs-attr">children</span>:[<br>        &#123;<br>          <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/article&#x27;</span>,<br>          <span class="hljs-attr">component</span>:<span class="hljs-title class_">Article</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/collect&#x27;</span>,<br>          <span class="hljs-attr">component</span>:<span class="hljs-title class_">Collect</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/like&#x27;</span>,<br>          <span class="hljs-attr">component</span>:<span class="hljs-title class_">Like</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>,<br>          <span class="hljs-attr">component</span>:<span class="hljs-title class_">User</span><br>        &#125;<br>      ]<br>    &#125;,<br>    ....<br>  ]<br>&#125;)<br><br></code></pre></td></tr></table></figure>

<p>Layout.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;h5-wrapper&quot;&gt;<br>    &lt;div class=&quot;content&quot;&gt;<br>      &lt;!-- 内容部分 --&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/div&gt;<br>    &lt;nav class=&quot;tabbar&quot;&gt;<br>      &lt;a href=&quot;#/article&quot;&gt;面经&lt;/a&gt;<br>      &lt;a href=&quot;#/collect&quot;&gt;收藏&lt;/a&gt;<br>      &lt;a href=&quot;#/like&quot;&gt;喜欢&lt;/a&gt;<br>      &lt;a href=&quot;#/user&quot;&gt;我的&lt;/a&gt;<br>    &lt;/nav&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十六、面经基础版-二级导航高亮"><a href="#十六、面经基础版-二级导航高亮" class="headerlink" title="十六、面经基础版-二级导航高亮"></a>十六、面经基础版-二级导航高亮</h2><h3 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1.实现思路"></a>1.实现思路</h3><ul>
<li>将a标签替换成 <router-link></router-link>组件，配置to属性，不用加 #</li>
<li>结合高亮类名实现高亮效果 (推荐模糊匹配：router-link-active)</li>
</ul>
<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>Layout.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">....<br>    &lt;nav class=&quot;tabbar&quot;&gt;<br>      &lt;router-link to=&quot;/article&quot;&gt;面经&lt;/router-link&gt;<br>      &lt;router-link to=&quot;/collect&quot;&gt;收藏&lt;/router-link&gt;<br>      &lt;router-link to=&quot;/like&quot;&gt;喜欢&lt;/router-link&gt;<br>      &lt;router-link to=&quot;/user&quot;&gt;我的&lt;/router-link&gt;<br>    &lt;/nav&gt;<br><br>&lt;style&gt;<br>   a.router-link-active &#123;<br>      color: orange;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十七、面经基础版-首页请求渲染"><a href="#十七、面经基础版-首页请求渲染" class="headerlink" title="十七、面经基础版-首页请求渲染"></a>十七、面经基础版-首页请求渲染</h2><h3 id="1-步骤分析"><a href="#1-步骤分析" class="headerlink" title="1.步骤分析"></a>1.步骤分析</h3><p>1.安装axios </p>
<p>2.看接口文档，确认请求方式，请求地址，请求参数</p>
<p>3.created中发送请求，获取数据，存储到data中</p>
<p>4.页面动态渲染</p>
<h3 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>1.安装axios</p>
<p><code>yarn add axios </code>  <code>npm i axios</code></p>
<p>2.接口文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">请求地址: https://mock.boxuegu.com/mock/3083/articles<br>请求方式: get<br></code></pre></td></tr></table></figure>

<p>3.created中发送请求，获取数据，存储到data中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">data() &#123;<br>   return &#123;<br>     articelList: [],<br>   &#125;<br> &#125;,<br> async created() &#123;<br>   const &#123;  data: &#123; result: &#123; rows &#125; &#125;&#125; = await axios.get(&#x27;https://mock.boxuegu.com/mock/3083/articles&#x27;)<br>   this.articelList = rows<br> &#125;,<br></code></pre></td></tr></table></figure>

<p>4.页面动态渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;article-page&quot;&gt;<br>    &lt;div class=&quot;article-item&quot; v-for=&quot;item in articelList&quot; :key=&quot;item.id&quot;&gt;<br>      &lt;div class=&quot;head&quot;&gt;<br>        &lt;img :src=&quot;item.creatorAvatar&quot; alt=&quot;&quot; /&gt;<br>        &lt;div class=&quot;con&quot;&gt;<br>          &lt;p class=&quot;title&quot;&gt;&#123;&#123; item.stem &#125;&#125;&lt;/p&gt;<br>          &lt;p class=&quot;other&quot;&gt;&#123;&#123; item.creatorName &#125;&#125; | &#123;&#123; item.createdAt &#125;&#125;&lt;/p&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;body&quot;&gt;<br>        &#123;&#123;item.content&#125;&#125;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;foot&quot;&gt;点赞 &#123;&#123;item.likeCount&#125;&#125; | 浏览 &#123;&#123;item.views&#125;&#125;&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十八、面经基础版-查询参数传参"><a href="#十八、面经基础版-查询参数传参" class="headerlink" title="十八、面经基础版-查询参数传参"></a>十八、面经基础版-查询参数传参</h2><h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1.说明"></a>1.说明</h3><p>跳转详情页需要把当前点击的文章id传给详情页，获取数据</p>
<ul>
<li>查询参数传参  this.$router.push(‘&#x2F;detail?参数1&#x3D;参数值&amp;参数2&#x3D;参数值’) </li>
<li>动态路由传参  先改造路由 在传参  this.$router.push(‘&#x2F;detail&#x2F;参数值’)</li>
</ul>
<h3 id="2-查询参数传参实现"><a href="#2-查询参数传参实现" class="headerlink" title="2.查询参数传参实现"></a>2.查询参数传参实现</h3><p>Article.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;article-page&quot;&gt;<br>    &lt;div class=&quot;article-item&quot; <br>      v-for=&quot;item in articelList&quot; :key=&quot;item.id&quot; <br>      @click=&quot;$router.push(`/detail?id=$&#123;item.id&#125;`)&quot;&gt;<br>     ...<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p>ArticleDetail.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created()&#123;<br>  console.log(this.$route.query.id)<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="十九、面经基础版-动态路由传参"><a href="#十九、面经基础版-动态路由传参" class="headerlink" title="十九、面经基础版-动态路由传参"></a>十九、面经基础版-动态路由传参</h2><h3 id="1-实现步骤"><a href="#1-实现步骤" class="headerlink" title="1.实现步骤"></a>1.实现步骤</h3><ul>
<li>改造路由</li>
<li>动态传参</li>
<li>在详情页获取参数</li>
</ul>
<h3 id="2-代码实现-2"><a href="#2-代码实现-2" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>改造路由</p>
<p>router&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<br>  &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/detail/:id&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">ArticleDetail</span><br>  &#125;<br></code></pre></td></tr></table></figure>

<p>Article.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;article-item&quot; <br>     v-for=&quot;item in articelList&quot; :key=&quot;item.id&quot; <br>     @click=&quot;$router.push(`/detail/$&#123;item.id&#125;`)&quot;&gt;<br>       ....<br> &lt;/div&gt;<br></code></pre></td></tr></table></figure>

<p>ArticleDetail.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created()&#123;<br>  console.log(this.$route.params.id)<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="3-额外优化功能点-点击回退跳转到上一页"><a href="#3-额外优化功能点-点击回退跳转到上一页" class="headerlink" title="3.额外优化功能点-点击回退跳转到上一页"></a>3.额外优化功能点-点击回退跳转到上一页</h3><p>ArticleDetail.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;article-detail-page&quot;&gt;<br>    &lt;nav class=&quot;nav&quot;&gt;&lt;span class=&quot;back&quot; @click=&quot;$router.back()&quot;&gt;&amp;lt;&lt;/span&gt; 面经详情&lt;/nav&gt;<br>     ....<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<h2 id="二十、面经基础版-详情页渲染"><a href="#二十、面经基础版-详情页渲染" class="headerlink" title="二十、面经基础版-详情页渲染"></a>二十、面经基础版-详情页渲染</h2><h3 id="1-实现步骤分析"><a href="#1-实现步骤分析" class="headerlink" title="1.实现步骤分析"></a>1.实现步骤分析</h3><ul>
<li>导入axios</li>
<li>查看接口文档</li>
<li>在created中发送请求</li>
<li>页面动态渲染</li>
</ul>
<h3 id="2-代码实现-3"><a href="#2-代码实现-3" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>接口文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">请求地址: https://mock.boxuegu.com/mock/3083/articles/:id<br>请求方式: get<br></code></pre></td></tr></table></figure>



<p>在created中发送请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">data() &#123;<br>   return &#123;<br>     articleDetail:&#123;&#125;<br>   &#125;<br> &#125;,<br> async created() &#123;<br>   const id = this.$route.params.id<br>   const &#123;data:&#123;result&#125;&#125; = await axios.get(<br>     `https://mock.boxuegu.com/mock/3083/articles/$&#123;id&#125;`<br>   )<br>   this.articleDetail = result<br> &#125;,<br></code></pre></td></tr></table></figure>



<p>页面动态渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;article-detail-page&quot;&gt;<br>    &lt;nav class=&quot;nav&quot;&gt;<br>      &lt;span class=&quot;back&quot; @click=&quot;$router.back()&quot;&gt;&amp;lt;&lt;/span&gt; 面经详情<br>    &lt;/nav&gt;<br>    &lt;header class=&quot;header&quot;&gt;<br>      &lt;h1&gt;&#123;&#123;articleDetail.stem&#125;&#125;&lt;/h1&gt;<br>      &lt;p&gt;&#123;&#123;articleDetail.createAt&#125;&#125; | &#123;&#123;articleDetail.views&#125;&#125; 浏览量 | &#123;&#123;articleDetail.likeCount&#125;&#125; 点赞数&lt;/p&gt;<br>      &lt;p&gt;<br>        &lt;img<br>          :src=&quot;articleDetail.creatorAvatar&quot;<br>          alt=&quot;&quot;<br>        /&gt;<br>        &lt;span&gt;&#123;&#123;articleDetail.creatorName&#125;&#125;&lt;/span&gt;<br>      &lt;/p&gt;<br>    &lt;/header&gt;<br>    &lt;main class=&quot;body&quot;&gt;<br>      &#123;&#123;articleDetail.content&#125;&#125;<br>    &lt;/main&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure>



<h2 id="二十一、面经基础版-缓存组件"><a href="#二十一、面经基础版-缓存组件" class="headerlink" title="二十一、面经基础版-缓存组件"></a>二十一、面经基础版-缓存组件</h2><h3 id="1-问题-6"><a href="#1-问题-6" class="headerlink" title="1.问题"></a>1.问题</h3><p>从面经列表 点到 详情页，又点返回，数据重新加载了 →  <strong>希望回到原来的位置</strong></p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682578630060.png" alt="68257863006"></p>
<h3 id="2-原因-1"><a href="#2-原因-1" class="headerlink" title="2.原因"></a>2.原因</h3><p>当路由被<strong>跳转</strong>后，原来所看到的组件就<strong>被销毁</strong>了（会执行组件内的beforeDestroy和destroyed生命周期钩子），<strong>重新返回</strong>后组件又被<strong>重新创建</strong>了（会执行组件内的beforeCreate,created,beforeMount,Mounted生命周期钩子），<strong>所以数据被加载了</strong></p>
<h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h3><p>利用keep-alive把原来的组件给缓存下来</p>
<h3 id="4-什么是keep-alive"><a href="#4-什么是keep-alive" class="headerlink" title="4.什么是keep-alive"></a>4.什么是keep-alive</h3><p>keep-alive 是 Vue 的内置组件，当它包裹动态组件时，<strong>会缓存不活动的组件实例，而不是销毁</strong>它们。</p>
<p>keep-alive 是一个抽象组件：它自身不会渲染成一个 DOM 元素，也不会出现在父组件中。</p>
<p><strong>优点：</strong></p>
<p>在组件切换过程中把切换出去的组件保留在内存中，防止重复渲染DOM，</p>
<p>减少加载时间及性能消耗，提高用户体验性。</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;h5-wrapper&quot;&gt;<br>    &lt;keep-alive&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/keep-alive&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<p><strong>问题：</strong></p>
<p>缓存了所有被切换的组件</p>
<h3 id="5-keep-alive的三个属性"><a href="#5-keep-alive的三个属性" class="headerlink" title="5.keep-alive的三个属性"></a>5.keep-alive的三个属性</h3><p>① include  ： 组件名数组，只有匹配的组件<strong>会被缓存</strong></p>
<p>② exclude ： 组件名数组，任何匹配的组件都<strong>不会被缓存</strong></p>
<p>③ max       ： 最多可以<strong>缓存多少</strong>组件实例</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;h5-wrapper&quot;&gt;<br>    &lt;keep-alive :include=&quot;[&#x27;LayoutPage&#x27;]&quot;&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/keep-alive&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<h3 id="6-额外的两个生命周期钩子"><a href="#6-额外的两个生命周期钩子" class="headerlink" title="6.额外的两个生命周期钩子"></a>6.额外的两个生命周期钩子</h3><p><strong>keep-alive的使用会触发两个生命周期函数</strong></p>
<p><strong>activated</strong> 当组件被激活（使用）的时候触发 →  进入这个页面的时候触发</p>
<p><strong>deactivated</strong> 当组件不被使用的时候触发      →  离开这个页面的时候触发</p>
<p>组件<strong>缓存后</strong>就<strong>不会执行</strong>组件的<strong>created, mounted, destroyed</strong> 等钩子了</p>
<p>所以其提供了<strong>actived 和deactived</strong>钩子，帮我们实现业务需求。</p>
<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><p>1.keep-alive是什么</p>
<p>2.keep-alive的优点</p>
<p>3.keep-alive的三个属性 (了解)</p>
<p>4.keep-alive的使用会触发两个生命周期函数(了解)</p>
<h2 id="二十二、VueCli-自定义创建项目"><a href="#二十二、VueCli-自定义创建项目" class="headerlink" title="二十二、VueCli 自定义创建项目"></a>二十二、VueCli 自定义创建项目</h2><p>1.安装脚手架 (已安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm i @vue/cli -g<br></code></pre></td></tr></table></figure>

<p>2.创建项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">vue create hm-exp-mobile<br></code></pre></td></tr></table></figure>

<ul>
<li>选项</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span> <span class="hljs-variable constant_">CLI</span> v5<span class="hljs-number">.0</span><span class="hljs-number">.8</span><br>? <span class="hljs-title class_">Please</span> pick a <span class="hljs-attr">preset</span>:<br>  <span class="hljs-title class_">Default</span> ([<span class="hljs-title class_">Vue</span> <span class="hljs-number">3</span>] babel, eslint)<br>  <span class="hljs-title class_">Default</span> ([<span class="hljs-title class_">Vue</span> <span class="hljs-number">2</span>] babel, eslint)<br>&gt; <span class="hljs-title class_">Manually</span> select features     选自定义<br></code></pre></td></tr></table></figure>

<ul>
<li>手动选择功能</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941856172.png" alt="68294185617"></p>
<ul>
<li>选择vue的版本</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">  <span class="hljs-number">3.</span>x<br>&gt; <span class="hljs-number">2.</span>x<br></code></pre></td></tr></table></figure>

<ul>
<li>是否使用history模式</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941888453.png" alt="image-20201025150602129"></p>
<ul>
<li>选择css预处理</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941900018.png" alt="image-20220629175133593"></p>
<ul>
<li>选择eslint的风格 （eslint 代码规范的检验工具，检验代码是否符合规范）</li>
<li>比如：const age &#x3D; 18;   &#x3D;&gt;  报错！多加了分号！后面有工具，一保存，全部格式化成最规范的样子</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941918562.png" alt="68294191856"></p>
<ul>
<li>选择校验的时机 （直接回车）</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941935794.png" alt="68294193579"></p>
<ul>
<li>选择配置文件的生成方式 （直接回车）</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941947985.png" alt="68294194798"></p>
<ul>
<li>是否保存预设，下次直接使用？  &#x3D;&gt;   不保存，输入 N</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941961551.png" alt="68294196155"></p>
<ul>
<li>等待安装，项目初始化完成</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941974763.png" alt="68294197476"></p>
<ul>
<li>启动项目</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm run serve<br></code></pre></td></tr></table></figure>



<h2 id="二十三、ESlint代码规范及手动修复"><a href="#二十三、ESlint代码规范及手动修复" class="headerlink" title="二十三、ESlint代码规范及手动修复"></a>二十三、ESlint代码规范及手动修复</h2><p>代码规范：一套写代码的约定规则。例如：赋值符号的左右是否需要空格？一句结束是否是要加;？… </p>
<blockquote>
<p> 没有规矩不成方圆  </p>
</blockquote>
<p>ESLint:是一个代码检查工具，用来检查你的代码是否符合指定的规则(你和你的团队可以自行约定一套规则)。在创建项目时，我们使用的是 <a href="https://standardjs.com/readme-zhcn.html">JavaScript Standard Style</a> 代码风格的规则。</p>
<h4 id="1-JavaScript-Standard-Style-规范说明"><a href="#1-JavaScript-Standard-Style-规范说明" class="headerlink" title="1.JavaScript Standard Style 规范说明"></a>1.JavaScript Standard Style 规范说明</h4><p>建议把：<a href="https://standardjs.com/rules-zhcn.html">https://standardjs.com/rules-zhcn.html</a> 看一遍，然后在写的时候,  遇到错误就查询解决。</p>
<p>下面是这份规则中的一小部分：</p>
<ul>
<li><em>字符串使用单引号</em> – 需要转义的地方除外</li>
<li><em>无分号</em> – <a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding">这</a><a href="http://inimino.org/~inimino/blog/javascript_semicolons">没什么不好。</a><a href="https://www.youtube.com/watch?v=gsfbh17Ax9I">不骗你！</a></li>
<li><em>关键字后加空格</em> <code>if (condition) &#123; ... &#125;</code></li>
<li><em>函数名后加空格</em> <code>function name (arg) &#123; ... &#125;</code></li>
<li>坚持使用全等 <code>===</code> 摒弃 <code>==</code> 一但在需要检查 <code>null || undefined</code> 时可以使用 <code>obj == null</code></li>
<li>……</li>
</ul>
<h4 id="2-代码规范错误"><a href="#2-代码规范错误" class="headerlink" title="2.代码规范错误"></a>2.代码规范错误</h4><p>如果你的代码不符合standard的要求，eslint会跳出来刀子嘴，豆腐心地提示你。</p>
<p>下面我们在main.js中随意做一些改动：添加一些空行，空格。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./styles/index.less&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span> ( &#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>  router<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure>

<p>按下保存代码之后：</p>
<p>你将会看在控制台中输出如下错误：</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682942554314.png" alt="68294255431"></p>
<blockquote>
<p>eslint 是来帮助你的。心态要好，有错，就改。</p>
</blockquote>
<h4 id="3-手动修正"><a href="#3-手动修正" class="headerlink" title="3.手动修正"></a>3.手动修正</h4><p>根据错误提示来一项一项手动修正。</p>
<p>如果你不认识命令行中的语法报错是什么意思，你可以根据错误代码（func-call-spacing, space-in-parens,…..）去 ESLint 规则列表中查找其具体含义。</p>
<p>打开 <a href="https://zh-hans.eslint.org/docs/latest/rules/">ESLint 规则表</a>，使用页面搜索（Ctrl + F）这个代码，查找对该规则的一个释义。</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682942792219.png" alt="68294279221"></p>
<h2 id="二十四、通过eslint插件来实现自动修正"><a href="#二十四、通过eslint插件来实现自动修正" class="headerlink" title="二十四、通过eslint插件来实现自动修正"></a>二十四、通过eslint插件来实现自动修正</h2><blockquote>
<ol>
<li>eslint会自动高亮错误显示</li>
<li>通过配置，eslint会自动帮助我们修复错误</li>
</ol>
</blockquote>
<ul>
<li>如何安装</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682942920986.png" alt="68294292098"></p>
<ul>
<li>如何配置</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 当保存的时候，eslint自动帮我们修复错误</span><br><span class="hljs-string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;source.fixAll&quot;</span>: <span class="hljs-literal">true</span><br>&#125;,<br><span class="hljs-comment">// 保存代码，不自动格式化</span><br><span class="hljs-string">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<ul>
<li>注意：eslint的配置文件必须在根目录下，这个插件才能才能生效。打开项目必须以根目录打开，一次打开一个项目</li>
<li>注意：使用了eslint校验之后，把vscode带的那些格式化工具全禁用了 Beatify</li>
</ul>
<p>settings.json 参考</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&#123;<br>    <span class="hljs-string">&quot;window.zoomLevel&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;workbench.iconTheme&quot;</span>: <span class="hljs-string">&quot;vscode-icons&quot;</span>,<br>    <span class="hljs-string">&quot;editor.tabSize&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 当保存的时候，eslint自动帮我们修复错误</span><br>    <span class="hljs-string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;source.fixAll&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 保存代码，不自动格式化</span><br>    <span class="hljs-string">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day8</title>
    <url>/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/</url>
    <content><![CDATA[<h1 id="认识Vue3"><a href="#认识Vue3" class="headerlink" title="认识Vue3"></a>认识Vue3</h1><h2 id="1-Vue2-选项式-API-vs-Vue3-组合式API"><a href="#1-Vue2-选项式-API-vs-Vue3-组合式API" class="headerlink" title="1. Vue2 选项式 API vs Vue3 组合式API"></a>1. Vue2 选项式 API vs Vue3 组合式API</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  data()&#123;<br>    return &#123;<br>      count:0<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    addCount()&#123;<br>      this.count++<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>const count = ref(0)<br>const addCount = ()=&gt; count.value++<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>特点：</p>
<ol>
<li>代码量变少</li>
<li>分散式维护变成集中式维护</li>
</ol>
<h2 id="2-Vue3的优势"><a href="#2-Vue3的优势" class="headerlink" title="2. Vue3的优势"></a>2. Vue3的优势</h2><p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/01.png" alt="image.png"></p>
<h1 id="使用create-vue搭建Vue3项目"><a href="#使用create-vue搭建Vue3项目" class="headerlink" title="使用create-vue搭建Vue3项目"></a>使用create-vue搭建Vue3项目</h1><h2 id="1-认识create-vue"><a href="#1-认识create-vue" class="headerlink" title="1. 认识create-vue"></a>1. 认识create-vue</h2><blockquote>
<p>create-vue是Vue官方新的脚手架工具，底层切换到了 vite （下一代前端工具链），为开发提供极速响应</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/2.png" alt="image.png"></p>
<h2 id="2-使用create-vue创建项目"><a href="#2-使用create-vue创建项目" class="headerlink" title="2. 使用create-vue创建项目"></a>2. 使用create-vue创建项目</h2><blockquote>
<p>前置条件 - 已安装16.0或更高版本的Node.js</p>
</blockquote>
<p>执行如下命令，这一指令将会安装并执行 create-vue</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm init vue@latest<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/3.png" alt="image.png"></p>
<h1 id="熟悉项目和关键文件"><a href="#熟悉项目和关键文件" class="headerlink" title="熟悉项目和关键文件"></a>熟悉项目和关键文件</h1><p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/4.png" alt="image.png"></p>
<h1 id="组合式API-setup选项"><a href="#组合式API-setup选项" class="headerlink" title="组合式API - setup选项"></a>组合式API - setup选项</h1><h2 id="1-setup选项的写法和执行时机"><a href="#1-setup选项的写法和执行时机" class="headerlink" title="1. setup选项的写法和执行时机"></a>1. setup选项的写法和执行时机</h2><p>写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>  export default &#123;<br>    setup()&#123;<br>      <br>    &#125;,<br>    beforeCreate()&#123;<br>      <br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>执行时机</p>
<blockquote>
<p>在beforeCreate钩子之前执行</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/5.png" alt="image.png"></p>
<h2 id="2-setup中写代码的特点"><a href="#2-setup中写代码的特点" class="headerlink" title="2. setup中写代码的特点"></a>2. setup中写代码的特点</h2><blockquote>
<p>在setup函数中写的数据和方法需要在末尾以对象的方式return，才能给模版使用</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>  export default &#123;<br>    setup()&#123;<br>      const message = &#x27;this is message&#x27;<br>      const logMessage = ()=&gt;&#123;<br>        console.log(message)<br>      &#125;<br>      // 必须return才可以<br>      return &#123;<br>        message,<br>        logMessage<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="3-语法糖"><a href="#3-语法糖" class="headerlink" title="3. &lt;script setup&gt;语法糖"></a>3. &lt;script setup&gt;语法糖</h2><blockquote>
<p>script标签添加 setup标记，不需要再写导出语句，默认会添加导出语句</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  const message = &#x27;this is message&#x27;<br>  const logMessage = ()=&gt;&#123;<br>    console.log(message)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h1 id="组合式API-reactive和ref函数"><a href="#组合式API-reactive和ref函数" class="headerlink" title="组合式API - reactive和ref函数"></a>组合式API - reactive和ref函数</h1><h2 id="1-reactive"><a href="#1-reactive" class="headerlink" title="1. reactive"></a>1. reactive</h2><blockquote>
<p>接受对象类型数据的参数传入并返回一个响应式的对象</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br> // 导入<br> import &#123; reactive &#125; from &#x27;vue&#x27;<br> // 执行函数 传入参数 变量接收<br> const state = reactive(&#123;<br>   msg:&#x27;this is msg&#x27;<br> &#125;)<br> const setSate = ()=&gt;&#123;<br>   // 修改数据更新视图<br>   state.msg = &#x27;this is new msg&#x27;<br> &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &#123;&#123; state.msg &#125;&#125;<br>  &lt;button @click=&quot;setState&quot;&gt;change msg&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<h2 id="2-ref"><a href="#2-ref" class="headerlink" title="2. ref"></a>2. ref</h2><blockquote>
<p>接收简单类型或者对象类型的数据传入并返回一个响应式的对象</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br> // 导入<br> import &#123; ref &#125; from &#x27;vue&#x27;<br> // 执行函数 传入参数 变量接收<br> const count = ref(0)<br> const setCount = ()=&gt;&#123;<br>   // 修改数据更新视图必须加上.value<br>   count.value++<br> &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;button @click=&quot;setCount&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<h2 id="3-reactive-对比-ref"><a href="#3-reactive-对比-ref" class="headerlink" title="3. reactive 对比 ref"></a>3. reactive 对比 ref</h2><ol>
<li>都是用来生成响应式数据</li>
<li>不同点<ol>
<li>reactive不能处理简单类型的数据</li>
<li>ref参数类型支持更好，但是必须通过.value做访问修改</li>
<li>ref函数内部的实现依赖于reactive函数</li>
</ol>
</li>
<li>在实际工作中的推荐<ol>
<li>推荐使用ref函数，减少记忆负担，小兔鲜项目都使用ref</li>
</ol>
</li>
</ol>
<h1 id="组合式API-computed"><a href="#组合式API-computed" class="headerlink" title="组合式API - computed"></a>组合式API - computed</h1><blockquote>
<p>计算属性基本思想和Vue2保持一致，组合式API下的计算属性只是修改了API写法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>// 导入<br>import &#123;ref, computed &#125; from &#x27;vue&#x27;<br>// 原始数据<br>const count = ref(0)<br>// 计算属性<br>const doubleCount = computed(()=&gt;count.value * 2)<br><br>// 原始数据<br>const list = ref([1,2,3,4,5,6,7,8])<br>// 计算属性list<br>const filterList = computed(item=&gt;item &gt; 2)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h1 id="组合式API-watch"><a href="#组合式API-watch" class="headerlink" title="组合式API - watch"></a>组合式API - watch</h1><blockquote>
<p>侦听一个或者多个数据的变化，数据变化时执行回调函数，俩个额外参数 immediate控制立刻执行，deep开启深度侦听</p>
</blockquote>
<h2 id="1-侦听单个数据"><a href="#1-侦听单个数据" class="headerlink" title="1. 侦听单个数据"></a>1. 侦听单个数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const count = ref(0)<br>  // 2. 调用watch 侦听变化<br>  watch(count, (newValue, oldValue)=&gt;&#123;<br>    console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="2-侦听多个数据"><a href="#2-侦听多个数据" class="headerlink" title="2. 侦听多个数据"></a>2. 侦听多个数据</h2><blockquote>
<p>侦听多个数据，第一个参数可以改写成数组的写法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const count = ref(0)<br>  const name = ref(&#x27;cp&#x27;)<br>  // 2. 调用watch 侦听变化<br>  watch([count, name], ([newCount, newName],[oldCount,oldName])=&gt;&#123;<br>    console.log(`count或者name变化了，[newCount, newName],[oldCount,oldName])<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="3-immediate"><a href="#3-immediate" class="headerlink" title="3. immediate"></a>3. immediate</h2><blockquote>
<p>在侦听器创建时立即出发回调，响应式数据变化之后继续执行回调</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const count = ref(0)<br>  // 2. 调用watch 侦听变化<br>  watch(count, (newValue, oldValue)=&gt;&#123;<br>    console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`)<br>  &#125;,&#123;<br>    immediate: true<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="4-deep"><a href="#4-deep" class="headerlink" title="4. deep"></a>4. deep</h2><blockquote>
<p>通过watch监听的ref对象默认是浅层侦听的，直接修改嵌套的对象属性不会触发回调执行，需要开启deep</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const state = ref(&#123; count: 0 &#125;)<br>  // 2. 监听对象state<br>  watch(state, ()=&gt;&#123;<br>    console.log(&#x27;数据变化了&#x27;)<br>  &#125;)<br>  const changeStateByCount = ()=&gt;&#123;<br>    // 直接修改不会引发回调执行<br>    state.value.count++<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const state = ref(&#123; count: 0 &#125;)<br>  // 2. 监听对象state 并开启deep<br>  watch(state, ()=&gt;&#123;<br>    console.log(&#x27;数据变化了&#x27;)<br>  &#125;,&#123;deep:true&#125;)<br>  const changeStateByCount = ()=&gt;&#123;<br>    // 此时修改可以触发回调<br>    state.value.count++<br>  &#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure>

<h1 id="组合式API-生命周期函数"><a href="#组合式API-生命周期函数" class="headerlink" title="组合式API - 生命周期函数"></a>组合式API - 生命周期函数</h1><h2 id="1-选项式对比组合式"><a href="#1-选项式对比组合式" class="headerlink" title="1. 选项式对比组合式"></a>1. 选项式对比组合式</h2><p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/6.png" alt="image.png"></p>
<h2 id="2-生命周期函数基本使用"><a href="#2-生命周期函数基本使用" class="headerlink" title="2. 生命周期函数基本使用"></a>2. 生命周期函数基本使用</h2><blockquote>
<ol>
<li>导入生命周期函数</li>
<li>执行生命周期函数，传入回调</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;scirpt setup&gt;<br>import &#123; onMounted &#125; from &#x27;vue&#x27;<br>onMounted(()=&gt;&#123;<br>  // 自定义逻辑<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="3-执行多次"><a href="#3-执行多次" class="headerlink" title="3. 执行多次"></a>3. 执行多次</h2><blockquote>
<p>生命周期函数执行多次的时候，会按照顺序依次执行</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;scirpt setup&gt;<br>import &#123; onMounted &#125; from &#x27;vue&#x27;<br>onMounted(()=&gt;&#123;<br>  // 自定义逻辑<br>&#125;)<br><br>onMounted(()=&gt;&#123;<br>  // 自定义逻辑<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h1 id="组合式API-父子通信"><a href="#组合式API-父子通信" class="headerlink" title="组合式API - 父子通信"></a>组合式API - 父子通信</h1><h2 id="1-父传子"><a href="#1-父传子" class="headerlink" title="1. 父传子"></a>1. 父传子</h2><blockquote>
<p>基本思想</p>
<ol>
<li>父组件中给子组件绑定属性</li>
<li>子组件内部通过props选项接收数据</li>
</ol>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/7.png" alt="image.png"></p>
<h2 id="2-子传父"><a href="#2-子传父" class="headerlink" title="2. 子传父"></a>2. 子传父</h2><blockquote>
<p>基本思想</p>
<ol>
<li>父组件中给子组件标签通过@绑定事件</li>
<li>子组件内部通过 emit 方法触发事件</li>
</ol>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/8.png" alt="image.png"></p>
<h1 id="组合式API-模版引用"><a href="#组合式API-模版引用" class="headerlink" title="组合式API - 模版引用"></a>组合式API - 模版引用</h1><blockquote>
<p>概念：通过 ref标识 获取真实的 dom对象或者组件实例对象</p>
</blockquote>
<h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h2><blockquote>
<p>实现步骤：</p>
<ol>
<li>调用ref函数生成一个ref对象</li>
<li>通过ref标识绑定ref对象到标签</li>
</ol>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/9.png" alt="image.png"></p>
<h2 id="2-defineExpose"><a href="#2-defineExpose" class="headerlink" title="2. defineExpose"></a>2. defineExpose</h2><blockquote>
<p>默认情况下在 &lt;script setup&gt;语法糖下组件内部的属性和方法是不开放给父组件访问的，可以通过defineExpose编译宏指定哪些属性和方法容许访问<br>说明：指定testMessage属性可以被访问到</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/10.png" alt="image.png"></p>
<h1 id="组合式API-provide和inject"><a href="#组合式API-provide和inject" class="headerlink" title="组合式API - provide和inject"></a>组合式API - provide和inject</h1><h2 id="1-作用和场景"><a href="#1-作用和场景" class="headerlink" title="1. 作用和场景"></a>1. 作用和场景</h2><blockquote>
<p>顶层组件向任意的底层组件传递数据和方法，实现跨层组件通信</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/11.png" alt="image.png"></p>
<h2 id="2-跨层传递普通数据"><a href="#2-跨层传递普通数据" class="headerlink" title="2. 跨层传递普通数据"></a>2. 跨层传递普通数据</h2><blockquote>
<p>实现步骤</p>
<ol>
<li>顶层组件通过 <code>provide</code> 函数提供数据</li>
<li>底层组件通过 <code>inject</code> 函数提供数据</li>
</ol>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/12.png" alt="image.png"></p>
<h2 id="3-跨层传递响应式数据"><a href="#3-跨层传递响应式数据" class="headerlink" title="3. 跨层传递响应式数据"></a>3. 跨层传递响应式数据</h2><blockquote>
<p>在调用provide函数时，第二个参数设置为ref对象</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/13.png" alt="image.png"></p>
<h2 id="4-跨层传递方法"><a href="#4-跨层传递方法" class="headerlink" title="4. 跨层传递方法"></a>4. 跨层传递方法</h2><blockquote>
<p>顶层组件可以向底层组件传递方法，底层组件调用方法修改顶层组件的数据</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/14.png" alt="image.png"></p>
<h1 id="Vue3-3-新特性-defineOptions"><a href="#Vue3-3-新特性-defineOptions" class="headerlink" title="Vue3.3 新特性-defineOptions"></a>Vue3.3 新特性-defineOptions</h1><p>背景说明：</p>
<p>有 &lt;script setup&gt; 之前，如果要定义 props, emits 可以轻而易举地添加一个与 setup 平级的属性。 </p>
<p>但是用了 &lt;script setup&gt; 后，就没法这么干了 setup 属性已经没有了，自然无法添加与其平级的属性。</p>
<hr>
<p>为了解决这一问题，引入了 defineProps 与 defineEmits 这两个宏。但这只解决了 props 与 emits 这两个属性。</p>
<p>如果我们要定义组件的 name 或其他自定义的属性，还是得回到最原始的用法——再添加一个普通的 &lt;script&gt; 标签。</p>
<p>这样就会存在两个 &lt;script&gt;标签。让人无法接受。</p>
<hr>
<p>所以在 Vue 3.3 中新引入了 defineOptions 宏。顾名思义，主要是用来定义 Options API 的选项。可以用 defineOptions 定义任意的选项， props, emits, expose, slots 除外（因为这些可以使用 defineXXX 来做到）</p>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/image-20230704082955748.png" alt="image-20230704082955748"></p>
<h1 id="Vue3-3新特性-defineModel"><a href="#Vue3-3新特性-defineModel" class="headerlink" title="Vue3.3新特性-defineModel"></a>Vue3.3新特性-defineModel</h1><p>在Vue3中，自定义组件上使用v-model, 相当于传递一个modelValue属性，同时触发 update:modelValue 事件</p>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/image-20230704083027349.png" alt="image-20230704083027349"></p>
<p>我们需要先定义 props，再定义 emits 。其中有许多重复的代码。如果需要修改此值，还需要手动调用 emit 函数。</p>
<p>于是乎 defineModel 诞生了。</p>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/image-20230704083056549.png" alt="image-20230704083056549"></p>
<p>生效需要配置 vite.config.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; fileURLToPath, <span class="hljs-variable constant_">URL</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:url&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(&#123;<br>      <span class="hljs-attr">script</span>: &#123;<br>        <span class="hljs-attr">defineModel</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;./src&#x27;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>))<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue八股文1</title>
    <url>/2023/09/11/vue%E9%9D%A2%E8%AF%95%E9%A2%981/</url>
    <content><![CDATA[<h1 id="2023前端面试题整理一-Vue篇"><a href="#2023前端面试题整理一-Vue篇" class="headerlink" title="2023前端面试题整理一(Vue篇)"></a>2023前端面试题整理一(Vue篇)</h1><h3 id="简述-MVVM-框架"><a href="#简述-MVVM-框架" class="headerlink" title="简述 MVVM 框架"></a>简述 MVVM 框架</h3><p>Model: 代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑。</p>
<p>View: 代表 UI 组件，它负责将数据模型转化成 UI 展现出来。</p>
<p>ViewModel: 监听数据模型的改变和控制视图行为、处理用户交互，简单理解就是一个同步 View 和 Model 的对象，连接 Model 和 View。</p>
<h3 id="vue2-和-vue3-区别"><a href="#vue2-和-vue3-区别" class="headerlink" title="vue2 和 vue3 区别"></a>vue2 和 vue3 区别</h3><p>1.写法上的区别:vue2 使用的是options(选项)Api,vue3 的是composition Api(当然 vue3 也兼容composition api)。options Api中methods，compute，data等 api 都是分散的。而composition api中的代码是根据逻辑功能来组织的,我们可以将一个功能所定义的methods，compute，data等 api 会放在一起,让我们可以更灵活地组合组件逻辑。</p>
<p>2.vue2 将响应式数据放到 data 函数中,而 vue3 则是使用ref和reactive将数据声明为响应式</p>
<p>3.响应式实现方式:vue2 中是通过Object.defineProperty对数据劫持实现的,vue3 中则是使用Proxy对数据代理实现的。</p>
<p>4.生命周期区别:vue3 中将beforeCreate和created合并到了setup函数中</p>
<p>5.根节点: vue3 组件允许多个根节点,而 vue2 只允许一个</p>
<p>6.内置组件: vue3 新增了传送组件Teleport和异步依赖处理组件Suspense</p>
<h3 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a>v-if 和 v-show</h3><p>1.v-if表示一个 dom 元素是否被创建，而v-show则是控制这个 dom 元素的display属性是否为none</p>
<p>2.一般在频繁切换状态的地方使用v-show,v-if则更适合条件不经常改变的场景，因为它切换开销相对较大</p>
<h3 id="v-for-和-v-if-优先级"><a href="#v-for-和-v-if-优先级" class="headerlink" title="v-for 和 v-if 优先级"></a>v-for 和 v-if 优先级</h3><p>1.开发过程中一般不建议同时将 v-for 和 v-if 放在一个标签中使用</p>
<p>2.Vue2 中 v-for 的优先级会更高，所以会先执行循环，再进行 v-if 判断，所以这样就会导致无论需不需展示这个元素，都会先遍历整个列表</p>
<p>3.在 Vue3 中 v-if 的优先级会更高，但是当我们遍历一个数组的时候，根据数组中的某个元素进行 v-if 判断的时候就会报错，因为 v-if 会先执行此时还没有拿到这个数组。所以 Vue3 中会报错</p>
<h3 id="介绍-Vue-插槽用法"><a href="#介绍-Vue-插槽用法" class="headerlink" title="介绍 Vue 插槽用法"></a>介绍 Vue 插槽用法</h3><p>插槽slot可以理解为占坑，当使用一个组件的时候，在组件标签里的对应的内容就会替换掉这个组件中的slot标签。插槽分为默认插槽，具名插槽，作用域插槽。</p>
<p><em>默认插槽</em></p>
<p>子组件中用slot标签来确定渲染位置，父组件使用它时直接在子组件的标签内写入内容即可</p>
<p>&#x2F;&#x2F;子组件</p>
<p><template>   <slot></slot></template></p>
<p>&#x2F;&#x2F;父组件</p>
<p>&lt;Child&gt;&lt;div&gt;默认插槽&lt;&#x2F;div&gt;&lt;&#x2F;Child&gt;</p>
<p><em>具名插槽</em></p>
<p>顾名思义就是具有名字的插槽，子组件中可以用name熟悉对slot命名，父组件在使用的时候通过template中的v-slot:name或者#name来定义这个插槽中的内容</p>
<p>&#x2F;&#x2F;子组件&lt;template&gt; &lt;slot name&#x3D;”content”&gt;&lt;&#x2F;slot&gt;&lt;&#x2F;template&gt;</p>
<p>&#x2F;&#x2F;父组件&lt;Child&gt;   &lt;template v-slot:content&gt;具名插槽内容&lt;&#x2F;template&gt;&lt;&#x2F;Child&gt;</p>
<p><em>作用域插槽</em></p>
<p>子组件中的slot可以通过类似组件属性传递的方式将子组件的值传递给父组件中这个子组件的插槽内容中（子组件标签内），在父组件使用子组件的时候要用v-slot的值进行接收这些参数，默认插槽可以将其直接写在子组件标签上，具名插槽则写在template上。而传过来的值只能在子组件标签中或者template标签中使用。所以在父组件作用域中获取到了子组件作用域中的变量，可以认为作用域插槽延伸了子组件数据的作用范围，因此叫做作用域插槽</p>
<h3 id="常见的事件修饰符及其作用"><a href="#常见的事件修饰符及其作用" class="headerlink" title="常见的事件修饰符及其作用"></a>常见的事件修饰符及其作用</h3><p>●.stop：等同于 JavaScript 中的 event.stopPropagation() ，防止事件冒泡；</p>
<p>●.prevent ：等同于 JavaScript 中的 event.preventDefault() ，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；</p>
<p>●.capture ：将事件改成捕获模式,由外到内触发</p>
<p>●.self ：只会触发自己范围内的事件，不包含子元素；</p>
<p>●.once ：只会触发一次。</p>
<h3 id="v-model-如何实现的"><a href="#v-model-如何实现的" class="headerlink" title="v-model 如何实现的"></a>v-model 如何实现的</h3><p>v-model 其实是一个语法糖,比如&lt;input v-model&#x3D;”message” &#x2F;&gt;等同于&lt;input  :value&#x3D;”message”  @input&#x3D;”message&#x3D;$event.target.value”&gt;</p>
<p>Vue2 中给 data 中的对象属性添加一个新的属性时会发生什么？如何解决？</p>
<p>Vue2 中对象添加新属性绑定的视图不会更新,因为 Vue2 中 Object.defineProperty 劫持不到 data 对象中新增的属性,可以使用this.$set(this.obj, ‘b’, ‘obj.b’)解决$set()方法相当于手动的去把 obj.b 处理成一个响应式的属性，此时视图也会跟着改变了。</p>
<h3 id="Vue-插件用法"><a href="#Vue-插件用法" class="headerlink" title="Vue 插件用法"></a>Vue 插件用法</h3><p>面试一般会问你如何写一个 vue 插件,所以没写过 vue 插件的最好去亲自体验一下回答:vue实例会有一个use函数,它接受的是一个带有install函数的对象和一个可选的选项对象,当我们使用 vue.use(plugin)或者app.use(plugin)会调用我们插件的install属性的函数,并且将当前组件的实例传进来.所以在插件中就可以对这个实例进行一些操作来实现我们插件的功能</p>
<h3 id="Vue-自定义指令"><a href="#Vue-自定义指令" class="headerlink" title="Vue 自定义指令"></a>Vue 自定义指令</h3><p>vue 官方提供了 v-text、v-for、v-model、v-if 等常用的指令。除此之外 vue 还允许开发者自定义指令。面试经常会问什么是自定义指令?你用自定义指令做过哪些功能?</p>
<p><em>Q1:什么是自定义指令?</em></p>
<p>1.自定义指令包含局部指令和全局指令,在模板中使用指令前必须先使用directives选项注册。局部指令指在某个组件中注册,而全局则是将指令注册到全局,通常在 main.js 中注册。</p>
<p>2.自定义指令由一个包含类似组件生命周期钩子的对象来定义。它的生命周期钩子包含created,beforeMount,mounted,beforeUpdate,updated,beforeUnmount,unmounted,</p>
<p>3.常用的钩子为mounted 和  updated,它接受el,binding等参数.binding参数的值一般包含绑定到这个元素上的信息,比如下面这个指令&lt;div v-example:foo.bar&#x3D;”baz”&gt;它的 binding 会是这个对象{   arg: ‘foo’,   modifiers: { bar: true },   value: &#x2F;* <code>baz</code> 的值 <em>&#x2F;,   oldValue: &#x2F;</em> 上一次更新时 <code>baz</code> 的值 *&#x2F;}</p>
<p><em>Q2:你用自定义指令做过哪些功能?</em></p>
<p>1.数据埋点,通过绑定自定义事件传入点击当前元素需要埋点的事件名,在指令中监听当前元素的点击事件后调用后台接口将事件名传入</p>
<p>2.权限控制,通过绑定自定义事件传入控制当前元素的权限字段,在指令中获取到当前元素根据权限字段来控制该元素的状态(显示,隐藏等)</p>
<h3 id="computed-和-watch"><a href="#computed-和-watch" class="headerlink" title="computed 和 watch"></a>computed 和 watch</h3><p>1.computed是计算属性,依赖其它属性值,用于解决模板中放入过多的逻辑会让模板过重且难以维护的问题.watch是侦听器,当我们需要根据一个属性的变化而做出一些处理的时候,可以使用watch来对这个属性进行监听</p>
<p>2.computed具有缓存的特点,即当它所依赖的属性发生改变的时候它才会重新执行内部逻辑.如下代码</p>
<template>
    <div></div>
    <div></div>
    <div></div>
</template>

<script setup>
    import { computed, ref, watch } from "vue";
    const a = ref(1)
    const b = ref(2)
    let addSum = computed(() => {
        console.log('内部逻辑执行')   return a.value + b.value})
</script>



<p>页面多次使用addSum,但是只会打印一次”内部逻辑执行”</p>
<p>1.watch在页面首次加载的时候默认不会执行,需要设置immediate:true首次才会执行监听</p>
<p>2.watch默认只监听一层数据,不监听多层数据里属性的变化,需要设置deep:true才会进行深度监听</p>
<h3 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h3><p>Vue2(选项式 API)Vue3(setup)描述beforeCreate-实例创建前created-实例创建后beforeMountonBeforeMountDOM 挂载前调用mountedonMountedDOM 挂载完成调用beforeUpdateonBeforeUpdate数据更新之前被调用updatedonUpdated数据更新之后被调用beforeDestroyonBeforeUnmount组件销毁前调用destroyedonUnmounted组件销毁完成调用</p>
<p>vue 父子组件生命周期执行顺序</p>
<p>这个相对于上一个问题稍微复杂一点,可以试着理解记忆或者直接记住吧</p>
<p><em>渲染过程</em></p>
<p>父beforeCreate –&gt; 父created –&gt; 父beforeMount –&gt; 子beforeCreate –&gt; 子created –&gt; 子beforeMount –&gt; 子mounted  –&gt; 父mounted</p>
<p><em>更新过程</em></p>
<p>父beforeUpdate –&gt; 子beforeUpdate –&gt; 子updated –&gt; 父updated</p>
<p><em>销毁过程</em></p>
<p>父beforeDestroy –&gt; 子beforeDestroy –&gt; 子destroyed –&gt; 父destroyed注意如果子组件是异步组件的话它们的执行顺序会发生改变，会先执行完父组件的生命周期然后再执行子组件的生命周期</p>
<h3 id="vue-导航-路由守卫"><a href="#vue-导航-路由守卫" class="headerlink" title="vue 导航(路由守卫)"></a>vue 导航(路由守卫)</h3><p>路由守卫分为全局路由守卫，路由独享守卫，组件路由守卫</p>
<p>●<em>全局路由守卫</em></p>
<p>1.beforeEach,接收to、from、next三个参数，每个路由跳转前都会触发，登录验证时用的比较多2.beforeResolve，和beforeEach类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后调用</p>
<p>3.afterEach，在路由跳转完成后调用，接收 to、from 两个参数</p>
<p>●<em>路由独享守卫</em></p>
<p>beforeEnter,一般配置在路由配置文件中（router&#x2F;index.js），对进入某个路由之前进行相关操作</p>
<p>●<em>组件路由守卫</em></p>
<p>接收to、from、next三个参数</p>
<p>1.beforeRouteEnter,进入该组件之前调用，无法获取到 vue 实例</p>
<p>2.beforeRouteUpdate，在当前路由改变，但是该组件被复用时调用</p>
<p>3.beforeRouteLeave, 在离开当前组件时调用</p>
<p><strong>Vue-Router 的懒加载如何实现</strong></p>
<p>使用箭头函数+import 动态加载</p>
<p>const router &#x3D; new VueRouter({</p>
<p> routes: [{ path: “&#x2F;list”, component: () &#x3D;&gt; import(“@&#x2F;components&#x2F;list.vue”) }],</p>
<p>});</p>
<h3 id="路由的-hash-和-history-模式的区别"><a href="#路由的-hash-和-history-模式的区别" class="headerlink" title="路由的 hash 和 history 模式的区别"></a>路由的 hash 和 history 模式的区别</h3><p>Vue-Router 有两种模式：hash 模式和 history 模式。默认的路由模式是 hash 模式。</p>
<p><em>1.hash</em> 模式</p>
<p>简介： hash 模式是开发中默认的模式，它的 URL 带着一个#，例如：<a href="http://www.abc.com/#/vue%EF%BC%8C%E5%AE%83%E7%9A%84hash%E5%80%BC%E5%B0%B1%E6%98%AF#/vue%E3%80%82%E7%89%B9%E7%82%B9%EF%BC%9Ahash">www.abc.com/#/vue，它的hash值就是#/vue。特点：hash</a> 值会出现在 URL 里面，但是不会出现在 HTTP 请求中，对后端完全没有影响。所以改变 hash 值，不会重新加载页面。这种模式的浏览器支持度很好，低版本的 IE 浏览器也支持这种模式。hash 路由被称为是前端路由，已经成为 SPA（单页面应用）的标配。原理： hash 模式的主要原理就是 onhashchange()事件：window.onhashchange &#x3D; function (event)</p>
<p> { console.log(event.oldURL, event.newURL); </p>
<p>let hash &#x3D; location.hash.slice(1);};</p>
<p><em>2.history</em> 模式</p>
<p>简介： history 模式的 URL 中没有#，它使用的是传统的路由分发模式，即用户在输入一个 URL 时，服务器会接收这个请求，并解析这个 URL，然后做出相应的逻辑处理。 特点： 当使用 history 模式时，URL 就像这样：abc.com&#x2F;user&#x2F;id。相比 hash 模式更加好看。但是，history 模式需要后台配置支持。如果后台没有正确配置，访问时会返回 404。 API： history api 可以分为两大部分，切换历史状态和修改历史状态：</p>
<p>修改历史状态：包括了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法，这两个方法应用于浏览器的历史记录栈，提供了对历史记录进行修改的功能。只是当他们进行修改时，虽然修改了 url，但浏览器不会立即向后端发送请求。如果要做到改变 url 但又不刷新页面的效果，就需要前端用上这两个 API。</p>
<p>切换历史状态： 包括 forward()、back()、go()三个方法，对应浏览器的前进，后退，跳转操作。虽然 history 模式丢弃了丑陋的#。但是，它也有自己的缺点，就是在刷新页面的时候，如果没有相应的路由或资源，就会刷出 404 来。</p>
<h3 id="nexttick-原理"><a href="#nexttick-原理" class="headerlink" title="nexttick 原理"></a>nexttick 原理</h3><p>关于 nextTick 会问到它的用法,然后是它的原理,然后还可能问到 JS 的事件循环机制。</p>
<p><em>Q1:vue 中的 nextTick 是干什么用的?</em></p>
<p>这个其实比较简单,用过都知道它是干嘛的,vue 官方的解释是:在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。这是什么意思呢,其实 vue 中修改 data 不会立刻触发 dom 更新;而是把需要更新的 Watcher 加入到 queueWatcher 队列中,然后在合适的时机在 nextTick 中调用这些 Watcher 的更新函数进行 dom 更新,所以在 data 刚被修改的时候,我们是获取不到更新后的 dom 的,这时候便需要调用 nextTick 函数在它的回调函数中获取到变化后的 dom</p>
<p><em>Q2:nextTick 原理</em></p>
<p>1.nextTick 原理是借助浏览器事件循环来完成的,因为每次事件循环之间都有一次视图渲染,nextTick 尽量在视图渲染之前完成 dom 更新,所以 nextTick 优先使用的是 promise(微任务)实现</p>
<p>2.每次执行 nextTick 时会将传入的回调函数放入一个队列中(callbacks 数组),然后当在本次事件循环的同步代码执行完毕后开启一个微任务(promise 或者 MutationObserver)去依次执行这个 callbacks 中的回调函数。</p>
<p>3.但是当浏览器不支持 promise 的时候在 vue2 中会进行进行降级处理,依次使用setImmediate、setTimeout开启一个宏任务执行 callbacks</p>
<p>4.当一个 data 数据更新时对应的 watcher 便会调用一次 nextTick,将它对应的 dom 更新操作作为回调函数放入 callbacks 中,所以当我们想获取这个 data 更新后的 dom 需要在其值变化后也调用 nextTick 将回调函数传入排在上个更新 dom 的回调函数后面,所以我们可以在这个 nextTick 的回调函数中获取到更新后的 data</p>
<h3 id="Vue-组件传参"><a href="#Vue-组件传参" class="headerlink" title="Vue 组件传参"></a>Vue 组件传参</h3><p>这里大概归纳了一下 vue2 和 vue3 的传参方式</p>
<p>Vue2Vue3父传子propsprops子传父$emitemits父传子$attrsattrs子传父$listeners无(合并到 attrs 方式)父传子provide&#x2F;injectprovide&#x2F;inject子组件访问父组件$parent无父组件访问子组件$children无父组件访问子组件$refexpose&amp;ref兄弟组件传值EventBusmitt</p>
<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>1.Vuex 是 Vue 中的全局状态管理框架，它可以管理应用的所有组件的状态。并不是每个项目都需要引入 Vuex 的，当我们的项目有很多个页面，并且这些页面共享着多个数据状态，此时我们可以引入 Vuex。</p>
<p>2.Vuex 有三个核心的概念，state,mutations,actions,其中state为存放数据的地方，mutations中的函数作用则是用来修改state，actions中一般是用了处理一些异步操作的函数。</p>
<p>3.Vuex 除了上面三个概念还有getters,moudles，getters就像 Vue 中的计算属性computed一样用来描述依赖响应式状态 state 中的复杂逻辑。moudles则是可以将 store 分割成模块（module），每个模块都拥有自己的state,mutations,actions等，在大型应用中经常用到</p>
<p>4.场景：当我们异步获取结果并赋值给 state 的时候，比如数据请求，我们可以在actions中进行数据请求，拿到结果通过它的dispatch方法调用mutations中修改state的函数，从而将结果赋值给了state</p>
<h3 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h3><p>pinia其实就是 Vuex5，它和 Vuex 的主要区别有以下几点</p>
<p>1.Pinia 使用更简单，更符合开发者的开发习惯</p>
<p>2.pinia中没有了mutations,状态state的修改可以直接进行修改，或者在actions中修改，或者使用它的$patch方法进行修改</p>
<p>3.pinia中没有了modules,如果想使用多个 store，直接使用defineStore定义多个 store 传入不同的 id 即可</p>
<p>4.更好的 TS 支持，不需要创建自定义的复杂包装器来支持 TS篇幅有限</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>websoket</title>
    <url>/2023/10/11/websoket/</url>
    <content><![CDATA[<h2 id="什么是WebSocket？"><a href="#什么是WebSocket？" class="headerlink" title="什么是WebSocket？"></a>什么是WebSocket？</h2><p>WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议，它的出现是为了解决 Web 应用中实时通信的需求。传统的 HTTP 协议是基于请求-响应模式的，即客户端发送请求，服务器响应请求，然后连接关闭。然而，有些场景需要保持长时间的连接，以实现实时性较高的数据交换，这就是 WebSocket 出现的背景。</p>
<p>WebSocket 具有以下特点：</p>
<ol>
<li><strong>全双工通信</strong>：WebSocket 允许客户端和服务器在连接建立后双向传输数据，不像传统的 HTTP 请求-响应模式那样需要等待服务器的响应。</li>
<li><strong>持久连接</strong>：一旦建立 WebSocket 连接，它将保持打开状态，允许在连接的生命周期内随时传输数据，避免了频繁地建立和关闭连接的开销。</li>
<li><strong>低延迟</strong>：WebSocket 的连接一旦建立，数据可以实时传输，无需等待额外的握手和请求。</li>
<li><strong>双方通知</strong>：服务器可以主动向客户端发送数据，而不需要客户端首先请求。这对于实时更新和通知非常有用。</li>
<li><strong>减少网络流量</strong>：WebSocket 通过在连接保持打开的情况下传输数据，可以减少 HTTP 请求的开销，从而减少网络流量。</li>
</ol>
<h2 id="什么场景可以用WebSocket"><a href="#什么场景可以用WebSocket" class="headerlink" title="什么场景可以用WebSocket"></a>什么场景可以用WebSocket</h2><p>WebSocket 适用于需要实时、高效、双向通信的场景，特别是在 Web 应用中。以下是一些适合使用 WebSocket 的场景：</p>
<ol>
<li><strong>实时聊天应用</strong>：WebSocket 可以使聊天应用实现实时消息传递，从而用户可以即时收到新消息，无需手动刷新页面。</li>
<li><strong>实时协作工具</strong>：协作工具可以使用 WebSocket 实现多用户同时编辑文档，实时更新内容。</li>
<li><strong>在线游戏</strong>：多人在线游戏通常需要实时的玩家间通信，WebSocket 可以提供低延迟的双向通信，使游戏状态和动作可以及时传递。</li>
<li><strong>实时更新</strong>：当应用需要实时更新数据，如股票市场价格、新闻、天气等，WebSocket 可以将更新直接推送给客户端，而不需要客户端不断地轮询服务器。</li>
<li><strong>通知和提醒</strong>：应用可以使用 WebSocket 发送实时通知和提醒，如社交媒体的新消息提醒。</li>
<li><strong>在线交互式应用</strong>：需要实时反馈和即时用户输入响应的应用，如实时投票应用、即时问答平台等。</li>
<li><strong>数据监控和控制</strong>：监控系统和远程控制系统需要实时更新数据和状态，WebSocket 可以满足这些需求。</li>
</ol>
<h2 id="WebSocket工作原理"><a href="#WebSocket工作原理" class="headerlink" title="WebSocket工作原理"></a>WebSocket工作原理</h2><ol>
<li><p><strong>握手阶段</strong>：</p>
</li>
<li><ul>
<li>客户端通过发送一个 HTTP 请求到服务器，包含了一些特殊的头部，如 <code>Upgrade: websocket</code> 和 <code>Connection: Upgrade</code>。</li>
<li>如果服务器支持 WebSocket，它会响应一个 HTTP 101 切换协议的状态码，并同样包含 <code>Upgrade</code> 和 <code>Connection</code> 头部。</li>
</ul>
</li>
<li><p><strong>建立连接</strong>：</p>
</li>
<li><ul>
<li>一旦握手成功，HTTP 连接就会升级为 WebSocket 连接。</li>
<li>这意味着客户端和服务器之间的连接将保持开放状态，双方可以随时传输数据，而无需频繁地建立和关闭连接。</li>
</ul>
</li>
<li><p><strong>数据传输</strong>：</p>
</li>
<li><ul>
<li>一旦连接建立，客户端和服务器可以在任何时候发送数据。</li>
<li>数据被分成一个个消息（message）进行传输。消息可以是文本或二进制数据。</li>
<li>由于是全双工通信，客户端和服务器可以同时发送和接收消息。</li>
</ul>
</li>
<li><p><strong>关闭连接</strong>：</p>
</li>
<li><ul>
<li>任何一方都可以随时发起关闭连接的请求。</li>
<li>关闭连接的请求是通过发送一个特殊的关闭帧（frame）来实现的。</li>
<li>另一方接收到关闭帧后，也会发送一个关闭帧进行确认，并最终关闭连接。</li>
</ul>
</li>
</ol>
<p>WebSocket 的优势在于它相对于传统的轮询或长轮询技术来说更加高效。在传统的 HTTP 请求中，每次请求都会带有一定的开销，而 WebSocket 的连接是长期保持的，避免了不必要的开销，从而在实时通信场景下更具优势。</p>
<h2 id="前端如何使用WebSocket"><a href="#前端如何使用WebSocket" class="headerlink" title="前端如何使用WebSocket"></a>前端如何使用WebSocket</h2><p>在前端使用 WebSocket 可以通过 JavaScript 中的 <code>WebSocket</code> 对象来建立和管理 WebSocket 连接。以下是一个基本的步骤示例：</p>
<ol>
<li><p><strong>创建 WebSocket 连接</strong>： 使用 <code>new WebSocket(url)</code> 来创建一个 WebSocket 连接。<code>url</code> 参数是 WebSocket 服务器的地址。</p>
<p>- </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const socket = new WebSocket(&#x27;ws://your-websocket-server.com&#x27;);<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>监听事件</strong>： 一旦连接建立，WebSocket 对象会触发一系列事件，你可以监听这些事件来处理连接状态和数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">socket.addEventListener(&#x27;open&#x27;, (event) =&gt; &#123;  <br>console.log(&#x27;WebSocket connection opened.&#x27;);<br>&#125;);<br>socket.addEventListener(&#x27;message&#x27;, (event) =&gt; &#123;  <br>console.log(&#x27;Received message:&#x27;, event.data);<br>&#125;);<br>socket.addEventListener(&#x27;error&#x27;, (event) =&gt; &#123;  <br>console.error(&#x27;WebSocket error:&#x27;, event);<br>&#125;);<br>socket.addEventListener(&#x27;close&#x27;, (event) =&gt; &#123;<br>console.log(&#x27;WebSocket connection closed:&#x27;, event);<br>&#125;);<br></code></pre></td></tr></table></figure>
</li>
<li><ul>
<li><code>open</code> 事件：连接成功建立时触发。</li>
<li><code>message</code> 事件：当从服务器接收到消息时触发。</li>
<li><code>error</code> 事件：在连接错误时触发。</li>
<li><code>close</code> 事件：在连接关闭时触发。</li>
</ul>
</li>
<li><p><strong>发送和接收数据</strong>： 使用 <code>send(data)</code> 方法将数据发送到服务器，并在接收到消息时可以在 <code>message</code> 事件的回调中处理数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 发送数据socket.send(&#x27;Hello, server!&#x27;);<br>// 接收数据在 message 事件中处理socket.addEventListener(&#x27;message&#x27;, (event) =&gt; &#123;  <br>const receivedData = event.data;<br>console.log(&#x27;Received data:&#x27;, receivedData);&#125;);<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>关闭连接</strong>： 使用 <code>close(code, reason)</code> 方法来关闭连接，其中 <code>code</code> 是可选的状态码，<code>reason</code> 是可选的关闭原因描述。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 关闭连接socket.close();<br></code></pre></td></tr></table></figure></li>
</ol>
<p>以上就是在前端使用 WebSocket 的基本步骤。要使用 WebSocket，只需在适当的时机创建连接并监听事件，然后可以通过 <code>send</code> 方法发送数据。注意，WebSocket 连接通常在安全的 HTTPS 环境下工作，但也可以在开发环境中使用不安全的 HTTP。同时，WebSocket 服务器端也需要支持 WebSocket 协议。</p>
<h2 id="常用的请求头与响应头"><a href="#常用的请求头与响应头" class="headerlink" title="常用的请求头与响应头"></a>常用的请求头与响应头</h2><p><strong>WebSocket 握手请求头字段</strong>：</p>
<ol>
<li><code>Upgrade</code>：标识请求将升级为 WebSocket 连接。</li>
<li><code>Connection</code>：标识请求将保持连接，值为 <code>Upgrade</code>。</li>
<li><code>Sec-WebSocket-Key</code>：包含一个基于随机数的密钥，用于计算握手响应的 <code>Sec-WebSocket-Accept</code> 值。</li>
<li><code>Sec-WebSocket-Version</code>：指定支持的 WebSocket 协议版本，如 <code>13</code>。</li>
<li><code>Sec-WebSocket-Extensions</code>：指定支持的扩展，如压缩等。</li>
<li><code>Sec-WebSocket-Protocol</code>：指定客户端请求的子协议，用于多个子协议的支持。</li>
</ol>
<p><strong>WebSocket 握手响应头字段</strong>：</p>
<ol>
<li><code>Upgrade</code>：标识响应将升级为 WebSocket 连接。</li>
<li><code>Connection</code>：标识响应将保持连接，值为 <code>Upgrade</code>。</li>
<li><code>Sec-WebSocket-Accept</code>：包含基于客户端的 <code>Sec-WebSocket-Key</code> 计算的响应密钥。</li>
<li><code>Sec-WebSocket-Extensions</code>：指定服务器支持的扩展。</li>
<li><code>Sec-WebSocket-Protocol</code>：指定实际使用的子协议。</li>
</ol>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>在 WebSocket 协议中，有一组标准的状态码用于表示连接和关闭的状态。这些状态码通过数字表示，每个状态码都有特定的含义。以下是一些常见的 WebSocket 状态码：</p>
<ol>
<li><p><strong>连接状态码</strong>：</p>
</li>
<li><ul>
<li><code>1000</code>：正常关闭。表示连接已经完成关闭。</li>
<li><code>1001</code>：终端关闭。表示终端或用户主动关闭连接。</li>
<li><code>1006</code>：无法连接。表示连接由于某种原因无法建立。</li>
</ul>
</li>
<li><p><strong>保留状态码</strong>：</p>
</li>
<li><ul>
<li><code>1002</code>：协议错误。表示服务器收到了一个无效的帧或违反了协议规定。</li>
<li><code>1003</code>：数据类型错误。表示服务器无法接受客户端发送的数据类型。</li>
<li><code>1004</code>：保留。此状态码当前未使用。</li>
<li><code>1005</code>：保留。此状态码当前未使用。</li>
</ul>
</li>
<li><p><strong>错误状态码</strong>：</p>
</li>
<li><ul>
<li><code>1007</code>：数据错误。表示服务器在接收到数据时遇到数据格式错误或不一致。</li>
<li><code>1008</code>：消息过大。表示接收到的消息太大，服务器无法处理。</li>
<li><code>1009</code>：数据过大。表示服务器在处理消息时接收到过大的数据。</li>
<li><code>1010</code>：扩展错误。表示客户端在扩展握手中出现错误。</li>
<li><code>1011</code>：服务错误。表示服务器由于遇到不可恢复的错误而关闭连接。</li>
</ul>
</li>
<li><p><strong>保留状态码</strong>：</p>
</li>
<li><ul>
<li><code>1012</code>：保留。此状态码当前未使用。</li>
<li><code>1013</code>：保留。此状态码当前未使用。</li>
</ul>
</li>
<li><p><strong>应用程序状态码</strong>：</p>
</li>
<li><ul>
<li><code>3000-3999</code>：这个范围的状态码是供应用程序自定义使用的，用于特定的应用需求。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
  </entry>
  <entry>
    <title>xss攻击</title>
    <url>/2023/12/07/xss%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>跨站脚本攻击 (Cross-Site Scripting，XSS) 是一种常见的安全漏洞，它允许攻击者将恶意JS代码注入到网页中，使其在用户的浏览器中执行。XSS 攻击的目标是窃取用户的信息、会话令牌或操纵用户界面。</p>
<h6 id="XSS-攻击分为三种类型"><a href="#XSS-攻击分为三种类型" class="headerlink" title="XSS 攻击分为三种类型"></a>XSS 攻击分为三种类型</h6><p>1.存储型 XSS (持久型) : </p>
<p>攻击者将恶意代码存储在服务器上，当其他用户访问包含恶意代码的页面时，浏览器请求数据，脚本从服务器上传回并执行。<br>2.反射型 XSS (非持久型) : </p>
<p>攻击者将恶意代码作为参数发送给服务器，服务器将其反射到页面中，如果用户点击恶意链接，浏览器请求数据，脚本从服务器上传回并执行。<br>3.DOM型XSS : </p>
<p>攻击发生在客户端，攻击者通过修改页面的 DOM 结构来触发执行恶意代码窃取用户敏感信息，</p>
<h6 id="如何避免-XSS-攻击"><a href="#如何避免-XSS-攻击" class="headerlink" title="如何避免 XSS 攻击"></a>如何避免 XSS 攻击</h6><p>1.输入验证和过滤: 对用户输入的数据进行验证只允许预期的数据类型，使用白名单过滤输入中的特殊字符和标签<br>2.输出编码: 在将用户输入展示到页面上时，使用适当的编码来转义特殊字符，如<code>&lt;</code>、<code>&gt;</code>、<code>&#39;&#39;</code>等。<br>3.使用 CSP (Content Security Policy) : CSP 是种设置浏览器策略的机制，限制页面加载的资源，防止注入恶意脚本<br>4.Cookie 安全: 在设置 Cookie 时，使用 Httponly标志，防止JavaScript 访问敏感 Cookie<br>5.使用框架的防御机制: 许多 Web 开发框架都提供了内置的安全机制，如 React的JSX、Angular的模板语法，能够自动防御 XSS 攻击</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>事件冒泡,捕获,委托</title>
    <url>/2024/01/21/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1-%E6%8D%95%E8%8E%B7-%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><blockquote>
<p><strong>JavaScript是一种广泛使用的脚本语言，用于为网页添加交互性。JavaScript的事件机制是实现用户交互的重要组成部分，它允许我们对用户的交互做出响应。在处理事件时，我们需要了解事件的传播方式以及如何使用事件委托来提高性能。</strong></p>
</blockquote>
<h1 id="二、什么是事件捕获和事件冒泡"><a href="#二、什么是事件捕获和事件冒泡" class="headerlink" title="二、什么是事件捕获和事件冒泡"></a>二、什么是事件捕获和事件冒泡</h1><p>事件机制是指当特定的操作(如点击按钮、移动鼠标等)在DOM元素上发生时，会触发相应的事件。JavaScript通过监听事件并绑定对应的处理函数来响应用户的操作，对用户的交互做出响应。</p>
<p>在JavaScript中，事件是以<code>事件流</code>的形式出现的，事件流顺序分为捕获和冒泡两种方式。 事件流分为三个阶段：1.捕获阶段 2.目标阶段 3.冒泡阶段。</p>
<p>事件捕获和事件冒泡是处理DOM事件的两种不同的机制。</p>
<h1 id="三、事件捕获和冒泡的顺序"><a href="#三、事件捕获和冒泡的顺序" class="headerlink" title="三、事件捕获和冒泡的顺序"></a>三、事件捕获和冒泡的顺序</h1><p><code>事件捕获的顺序是从最外层的元素开始，逐级向内部元素传播，直到达到目标元素</code>。 例如：window -&gt; document -&gt; html -&gt; body -&gt; div。</p>
<p><code>事件冒泡的顺序是从目标元素开始，逐级向外层元素传播，直到达到最外层的元素</code>。 例如：div -&gt; body -&gt; html -&gt; document -&gt; window。</p>
<p><img src="/2024/01/21/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1-%E6%8D%95%E8%8E%B7-%E5%A7%94%E6%89%98/3fda5474285843749e6a4678b94e218ftplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="1.jpg"></p>
<h1 id="四、addEventListener"><a href="#四、addEventListener" class="headerlink" title="四、addEventListener"></a>四、addEventListener</h1><p>在JavaScript中，我们可以使用addEventListener方法来绑定捕获和冒泡事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">js<br>复制代码element.<span class="hljs-title function_">addEventListener</span>(event, handler, useCapture);<br></code></pre></td></tr></table></figure>

<p>其中，event表示要绑定的事件类型，function表示事件触发时要执行的函数，useCapture是一个可选的参数，用于指定事件是使用捕获还是冒泡阶段进行处理。</p>
<p>当useCapture为false或未提供时，事件将在冒泡阶段进行处理；当useCapture为true时，事件将在捕获阶段进行处理。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blueBox&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yellowBox&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;greenBox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript"> <span class="hljs-keyword">let</span> blueBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;blueBox&#x27;</span>);</span><br><span class="language-javascript"> <span class="hljs-keyword">let</span> yellowBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;yellowBox&#x27;</span>);</span><br><span class="language-javascript"> <span class="hljs-keyword">let</span> greenBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;greenBox&#x27;</span>);</span><br><span class="language-javascript"> blueBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;blueBox&#x27;</span>)</span><br><span class="language-javascript"> &#125;)</span><br><span class="language-javascript"> yellowBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yellowBox&#x27;</span>)</span><br><span class="language-javascript"> &#125;)</span><br><span class="language-javascript"> greenBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;greenBox&#x27;</span>);</span><br><span class="language-javascript"> &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2024/01/21/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1-%E6%8D%95%E8%8E%B7-%E5%A7%94%E6%89%98/3ea2abd7bf02468f94179d36040d2988tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="QQ截图20230623223044.jpg"></p>
<p>当点击绿色方块时，输出greenBox、yellowBox、blueBox，因为绿色包含在黄色里，黄色和绿色被包含蓝色中。addEventListener不写第三个参数时，事件将在冒泡阶段进行处理，从目标元素开始，逐级向外层元素传播，直到达到最外层的元素，也就是绿色、黄色、蓝色。</p>
<p>同理，点击黄色时，输出yellowBox、blueBox。点击蓝色时，输出blueBox。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">blueBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;blueBox&#x27;</span>)<br>&#125;, <span class="hljs-literal">true</span>);<br>yellowBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yellowBox&#x27;</span>)<br>&#125;)<br>greenBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;greenBox&#x27;</span>);<br>&#125;, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure>

<p>如上代码所示，将blueBox和greenBox的第三个参数设成true，点击绿色(greenBox)，将输出blueBox、greenBox、yellowBox，因为blueBox和greenBox的事件将在捕获阶段进行处理，yellowBox的事件将在冒泡阶段进行处理。捕获的顺序是从最外层的元素开始，逐级向内部元素传播，直到达到目标元素，也就是蓝色、绿色，之后才是冒泡事件yellowBox。</p>
<p>如果将第三个参数全部设成true，点击绿色(greenBox)，将输出blueBox、yellowBox、greenBox，因为事件将在捕获阶段进行处理，事件捕获的顺序是从最外层的元素开始，逐级向内部元素传播，直到达到目标元素，也就是蓝色、黄色、绿色。</p>
<h1 id="五、阻止事件传播"><a href="#五、阻止事件传播" class="headerlink" title="五、阻止事件传播"></a>五、阻止事件传播</h1><h2 id="1-event-stopPropagation"><a href="#1-event-stopPropagation" class="headerlink" title="1.event.stopPropagation()"></a>1.event.stopPropagation()</h2><p><code>调用该方法会阻止事件继续传播，但不会阻止其他事件处理程序被触发</code>。也就是说，如果一个元素上绑定了多个事件处理程序，调用该方法只会阻止事件传播到更高层级的元素，而不会阻止同一元素上的其他事件处理程序被触发。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">blueBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;blueBox&#x27;</span>)<br> &#125;, <span class="hljs-literal">true</span>);<br> yellowBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yellowBox&#x27;</span>)<br> &#125;)<br> greenBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;greenBox&#x27;</span>);<br>     event.<span class="hljs-title function_">stopPropagation</span>();<br> &#125;, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure>

<p>在上面的示例中，当点击绿色方块时，调用event.stopPropagation()会阻止事件继续传播到外层元素，所以会阻止冒泡到黄色，而蓝色是在捕获阶段执行的，不会阻止，<code>所以输出&quot;blueBox和greenBox&quot;</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">blueBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;blueBox&#x27;</span>)<br>&#125;);<br>yellowBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yellowBox&#x27;</span>);<br>&#125;);<br>yellowBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yellowBox222&#x27;</span>);<br>&#125;);<br>greenBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;greenBox&#x27;</span>);<br>  event.<span class="hljs-title function_">stopPropagation</span>();<br>&#125;);<br>greenBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;greenBox222&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;greenBox333&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>该方法不会阻止同一元素上的其他事件处理程序被触发，在上述代码中，输出结果是greenBox、greenBox222、greenBox333。</p>
<h2 id="2-event-stopImmediatePropagation"><a href="#2-event-stopImmediatePropagation" class="headerlink" title="2.event.stopImmediatePropagation()"></a>2.event.stopImmediatePropagation()</h2><p><code>调用该方法会阻止事件继续传播，并且会阻止同一元素上的其他事件处理程序被触发</code>。也就是说，如果一个元素上绑定了多个事件处理程序，调用该方法会立即停止事件传播，并且不会触发同一元素上的其他事件处理程序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">blueBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;blueBox&#x27;</span>)<br>&#125;);<br>yellowBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yellowBox&#x27;</span>);<br>&#125;);<br>yellowBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yellowBox222&#x27;</span>);<br>&#125;);<br>greenBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;greenBox&#x27;</span>);<br>  event.<span class="hljs-title function_">stopImmediatePropagation</span>();<br>&#125;);<br>greenBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;greenBox222&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;greenBox333&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>在上面的示例中，当点击绿色方块(greenBox)时，调用event.stopImmediatePropagation()会阻止事件继续传播到外层元素，并且还会阻止自身的其他事件的触发，<code>只会输出&quot;greenBox&quot;</code>，而不会输出其他内容。</p>
<h1 id="六、事件委托"><a href="#六、事件委托" class="headerlink" title="六、事件委托"></a>六、事件委托</h1><p>事件委托也称为事件代理(Event Delegation)，事件委托是一种将事件处理程序绑定到一个父元素上，而不是将事件处理程序绑定到每个子元素上的技术。通过事件委托，可以减少事件处理程序的数量，提高性能和代码的可维护性。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-keyword">let</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="language-javascript">     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; li.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">       li[i].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(li[i].<span class="hljs-property">innerHTML</span>)</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/2024/01/21/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1-%E6%8D%95%E8%8E%B7-%E5%A7%94%E6%89%98/f20425fd3ca2474cbc1df0698b5d2d47tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="QQ截图20230624075441.jpg"></p>
<p>如上述代码所示，点击某一数字，就会输出对应内容。节点少的时候还好，如果节点多达上千上万个，就需要声明相当多的事件函数，比较消耗内存。而且如果列表经常发生动态变更，也会导致大量监听事件的移除和绑定。</p>
<p>在这种情况下，事件委托就可以体现它的优势了。</p>
<p><strong>事件委托正是利用事件流的冒泡特性，将本来要绑定到多个元素的事件函数，委托到了其祖先元素上</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//事件代理  节约内存 提升性能(不需要注销子节点)</span><br><span class="hljs-keyword">let</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;ul&quot;</span>);<br>ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">innerHTML</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>我们通过将事件处理程序绑定到父元素ul上，当点击列表项时，通过 event 对象拿到必要的信息，会打印出被点击的列表项的内容。如此这般，不管li有多少，更新多频繁，我们<code>只需要维护一个函数就够了</code>。</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树层序遍历</title>
    <url>/2024/01/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h3 id="力扣-102-二叉树的层序遍历"><a href="#力扣-102-二叉树的层序遍历" class="headerlink" title="力扣-102.二叉树的层序遍历"></a>力扣-102.二叉树的层序遍历</h3><p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/2024/01/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/tree1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：root = [3,9,20,null,null,15,7]<br>输出：[[3],[9,20],[15,7]]<br></code></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：root = [1]<br>输出：[[1]]<br></code></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：root = []<br>输出：[]<br></code></pre></td></tr></table></figure>

<h4 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * Definition for a binary tree node.<br> * function TreeNode(val, left, right) &#123;<br> *     this.val = (val===undefined ? 0 : val)<br> *     this.left = (left===undefined ? null : left)<br> *     this.right = (right===undefined ? null : right)<br> * &#125;<br> */<br>/**<br> * @param &#123;TreeNode&#125; root<br> * @return &#123;number[][]&#125;<br> */<br>var levelOrder = function(root) &#123;<br>    let queue = [root]<br>    let res = []<br>    if(root &amp;&amp; root.val!=null)//坑：最开始写root&amp;&amp;root.val当root.val=0时push不进去<br>    res.push([root.val])<br>    let curnum = 1<br>    let nextnum = 0<br>    let tmp = []<br>    while(queue[0])&#123;<br>        tmp = tmp.length&gt;0 ? tmp : []<br>        if(queue[0].left)&#123;<br>            queue.push(queue[0].left)<br>            tmp.push(queue[0].left.val)<br>            nextnum++<br>        &#125;<br>        if(queue[0].right)&#123;<br>            queue.push(queue[0].right)<br>            tmp.push(queue[0].right.val)<br>            nextnum++<br>        &#125;<br>        queue.shift()<br>        curnum--<br>        if(curnum === 0)&#123;<br>            if(tmp.length&gt;0)<br>            res.push(tmp)<br>            tmp = []<br>            curnum = nextnum<br>            nextnum = 0 <br>        &#125;<br>    &#125;<br>    return res<br>&#125;;<br></code></pre></td></tr></table></figure>

<h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>用队列实现二叉树的广度优先遍历</p>
<p>用两个变量分别记录两层节点的数量，curnum记录当前层中位于队列中节点的数量，nextnum记录下一层中位于队列中节点的数量</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>手撕</tag>
      </tags>
  </entry>
  <entry>
    <title>从浏览器输入url到请求返回发生了什么</title>
    <url>/2023/12/04/%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%88%B0%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h6 id="从浏览器地址栏输入-URL-到请求返回可以大致分为以下几个步骤"><a href="#从浏览器地址栏输入-URL-到请求返回可以大致分为以下几个步骤" class="headerlink" title="从浏览器地址栏输入 URL 到请求返回可以大致分为以下几个步骤:"></a>从浏览器地址栏输入 URL 到请求返回可以大致分为以下几个步骤:</h6><p>1.DNS 解析: 浏览器根据 URL 中的域名部分，通过DNS 解析将域名转换为对应的 IP 地址</p>
<p>2.建立 TCP 连接: 浏览器与服务器之间建立 TCP 连接，通过三次握手确保连接的可靠性。</p>
<p>3.发送 HTTP 请求:浏览器发送HTTP 请求，包括请求行、请求头和请求体，其中请求行包含请求的方法、URL和 HTTP 协议版本。</p>
<p>4.服务器处理请求: 服务器接收到请求后，根据请求的路径和参数执行相应的逻辑处理，读取数据库或者其他资源</p>
<p>5.服务器返回响应: 服务器生成响应数据，包括响应头和响应体，其中响应头包含响应的状态码和其他信息。</p>
<p>6.接收响应数据: 浏览器接收到服务器返回的响应数据，开始解析和处理响应。</p>
<p>7.渲染页面: 如果响应是一个 HTML 页面，浏览器会根据 HTML、CSS 和JavaScript 等资源进行页面的渲染和展示。</p>
<p>8.断开tcp连接：当所有响应数据都接受完成后，浏览器和服务器直接会断开tcp连接，释放资源。</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>伪类和伪元素</title>
    <url>/2023/12/05/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p>CSS 伪类和伪元素是用于选择和样式化文档中的特定元素或元素的一部分的方法，它们在使用方式和效果上有一些重要的区别</p>
<h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><h6 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h6><p>CSS中的一种选择器，用于选择HTML元素的特定状态，而不是选择元素本身。伪类可以根据用户交互、元素的位置、链接状态等条件来选择元素，从而允许你应用不同的样式或行为，通常以冒号 : 开头。</p>
<h6 id="常见的伪类及其主要作用"><a href="#常见的伪类及其主要作用" class="headerlink" title="常见的伪类及其主要作用:"></a>常见的伪类及其主要作用:</h6><ol>
<li><code>:hover</code>：用于选择用户<strong>鼠标悬停</strong>在元素上时的状态。通常用于创建悬停效果，如改变链接的颜色或显示工具提示。</li>
<li><code>:active</code>：用于选择用户点击元素时的状态。通常用于创建点击效果，如按钮按下时的变化。</li>
<li><code>:focus</code>：用于选择元素获得焦点时的状态，通常用于表单元素，如文本框或按钮，以突出显示当前激活的元素。</li>
<li><code>:first-child</code>：选择父元素的第一个子元素。这可用于设置第一个子元素的特定样式。</li>
<li><code>:nth-child(n)</code>：选择父元素的第n个子元素。你可以使用这个伪类来选择元素列表中的某个特定元素。</li>
<li><code>:not(selector)</code>：选择不匹配给定选择器的元素。这允许你排除某些元素以应用样式。</li>
<li><code>:visited</code>：选择已访问的链接元素，通常用于改变已访问链接的样式。</li>
<li><code>:link</code>：选择未访问的链接元素，通常用于改变未访问链接的样式。</li>
</ol>
<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><h6 id="概念-1"><a href="#概念-1" class="headerlink" title="概念:"></a>概念:</h6><p>CSS中的一种选择器，用于选择元素的特定部分，而不是整个元素本身。伪元素允许你在已选择的元素内部创建或修改内容，而无需在文档结构中添加额外的HTML元素，通常以双冒号 :: 开头。</p>
<h6 id="常见的伪元素及其主要作用："><a href="#常见的伪元素及其主要作用：" class="headerlink" title="常见的伪元素及其主要作用："></a>常见的伪元素及其主要作用：</h6><ol>
<li><code>::before</code>：用于在所选元素的内容之前插入生成的内容。这通常用于在元素前面添加一些装饰性的内容，比如图标或文本。</li>
<li><code>::after</code>：用于在所选元素的内容之后插入生成的内容。类似于<code>::before</code>，它也经常用于添加额外的装饰性元素。</li>
<li><code>::first-line</code>：用于选择所选元素的第一行文本。你可以使用它来为文本的第一行应用特定的样式。</li>
<li><code>::first-letter</code>：用于选择所选元素的第一个字母或字符。通常用于创建首字母大写或特殊的样式。</li>
<li><code>::selection</code>：用于选择用户选择的文本部分（鼠标拖选时）。你可以使用它来自定义选中文本的样式。</li>
</ol>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>利用ChatGpt生成前端页面</title>
    <url>/2023/11/13/%E5%88%A9%E7%94%A8ChatGpt%E7%94%9F%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>在前端开发中，构建一个优秀的页面需要耗费大量的时间和精力。为了让开发者能够更加高效地构建页面，我们可以利用人工智能技术来生成页面代码。在学校开设的互联网程序设计课程中，老师布置了使用ChatGPT来生成一个简单的前端页面的作业，在此分享一些相关的代码和技巧。</p>
<h3 id="一、ChatGPT是什么？"><a href="#一、ChatGPT是什么？" class="headerlink" title="一、ChatGPT是什么？"></a><strong>一、ChatGPT是什么？</strong></h3><p>ChatGPT是一种基于人工智能的自然语言生成模型，它可以生成高质量的文本内容。ChatGPT基于GPT-3算法，并通过大量的文本语料库训练得出。使用ChatGPT生成文本内容非常方便，您只需要输入一些关键词或者主题，就能够快速生成相关的文本内容。</p>
<h3 id="二、使用ChatGPT生成前端页面"><a href="#二、使用ChatGPT生成前端页面" class="headerlink" title="二、使用ChatGPT生成前端页面"></a><strong>二、使用ChatGPT生成前端页面</strong></h3><h4 id="2-1-生成HTML文件"><a href="#2-1-生成HTML文件" class="headerlink" title="2.1 生成HTML文件"></a><strong>2.1 生成HTML文件</strong></h4><p>在此我们要生成一个电商的首页，可以通过ChatGPT的问答，让其直接帮助我们生成页面。下面给大家举个示例：</p>
<p><img src="/2023/11/13/%E5%88%A9%E7%94%A8ChatGpt%E7%94%9F%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/640-16998893419451.png" alt="图片"></p>
<p>以下是ChatGPT生成的HTML代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;title&gt;电商首页&lt;/title&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;header&gt;<br>    &lt;h1&gt;电商首页&lt;/h1&gt;<br>    &lt;div class=&quot;search-bar&quot;&gt;<br>        &lt;input type=&quot;text&quot; placeholder=&quot;搜索...&quot;&gt;<br>        &lt;button type=&quot;submit&quot;&gt;搜索&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;nav&gt;<br>      &lt;ul&gt;<br>        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;产品&lt;/a&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;关于我们&lt;/a&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;联系我们&lt;/a&gt;&lt;/li&gt;<br>      &lt;/ul&gt;<br>    &lt;/nav&gt;<br>  &lt;/header&gt;<br>  &lt;main&gt;<br>    &lt;section class=&quot;featured-products&quot;&gt;<br>      &lt;h2&gt;推荐产品&lt;/h2&gt;<br>      &lt;ul&gt;<br>        &lt;li&gt;<br>          &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;product1.jpg&quot; alt=&quot;产品1&quot;&gt;&lt;/a&gt;<br>          &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;产品1&lt;/a&gt;&lt;/h3&gt;<br>          &lt;p&gt;产品1的简要描述&lt;/p&gt;<br>          &lt;span&gt;¥99.00&lt;/span&gt;<br>        &lt;/li&gt;<br>        &lt;li&gt;<br>          &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;product2.jpg&quot; alt=&quot;产品2&quot;&gt;&lt;/a&gt;<br>          &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;产品2&lt;/a&gt;&lt;/h3&gt;<br>          &lt;p&gt;产品2的简要描述&lt;/p&gt;<br>          &lt;span&gt;¥199.00&lt;/span&gt;<br>        &lt;/li&gt;<br>        &lt;li&gt;<br>          &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;product3.jpg&quot; alt=&quot;产品3&quot;&gt;&lt;/a&gt;<br>          &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;产品3&lt;/a&gt;&lt;/h3&gt;<br>          &lt;p&gt;产品3的简要描述&lt;/p&gt;<br>          &lt;span&gt;¥299.00&lt;/span&gt;<br>        &lt;/li&gt;<br>      &lt;/ul&gt;<br>    &lt;/section&gt;<br>    &lt;section class=&quot;featured-categories&quot;&gt;<br>      &lt;h2&gt;推荐分类&lt;/h2&gt;<br>      &lt;ul&gt;<br>        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;分类1&lt;/a&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;分类2&lt;/a&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;分类3&lt;/a&gt;&lt;/li&gt;<br>        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;分类4&lt;/a&gt;&lt;/li&gt;<br>      &lt;/ul&gt;<br>    &lt;/section&gt;<br>  &lt;/main&gt;<br>  &lt;footer&gt;<br>    &lt;p&gt;版权所有 © 2023 电商公司&lt;/p&gt;<br>  &lt;/footer&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>

<p>此时的页面效果：<img src="/2023/11/13/%E5%88%A9%E7%94%A8ChatGpt%E7%94%9F%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/640-16998895418176.png" alt="图片"></p>
<p>该示例包括一个简单的导航栏、一个搜索栏、一个推荐产品区域和一个推荐分类区域。请注意，此示例并不完整。还需要一个名为style.css的样式表文件来添加样式。</p>
<h4 id="2-2-生成CSS文件"><a href="#2-2-生成CSS文件" class="headerlink" title="2.2 生成CSS文件"></a><strong>2.2 生成CSS文件</strong></h4><p>上面已经生成了HTML页面，但此时没有CSS样式表，那么网页将会呈现出一种非常朴素的样式,甚至有些难以看。那么此时我们让ChatGPT帮助我们生成一个配套的CSS样式表。</p>
<p><img src="/2023/11/13/%E5%88%A9%E7%94%A8ChatGpt%E7%94%9F%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/640-169988961906313.png" alt="图片"></p>
<p>以下是ChatGPT生成的CSS样式代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"><br>/* Reset CSS */<br>* &#123;<br>    margin: 0;<br>    padding: 0;<br>    box-sizing: border-box;<br>  &#125;<br>  <br>  /* Header */<br>  header &#123;<br>    display: flex;<br>    align-items: center;<br>    padding: 20px;<br>    background-color: #fff;<br>    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);<br>  &#125;<br>  <br>  nav &#123;<br>    margin-bottom: 20px;<br>  &#125;<br>  <br>  nav ul &#123;<br>    list-style: none;<br>    display: flex;<br>    justify-content: center;<br>  &#125;<br>  <br>  nav ul li &#123;<br>    margin-right: 20px;<br>  &#125;<br>  <br>  nav ul li:last-child &#123;<br>    margin-right: 0;<br>  &#125;<br>  <br>  nav ul li a &#123;<br>    text-decoration: none;<br>    color: #333;<br>    font-weight: bold;<br>  &#125;<br>  <br>  nav ul li a:hover &#123;<br>    color: #f60;<br>  &#125;<br>  <br>  h1 &#123;<br>    margin-bottom: 20px;<br>    font-size: 36px;<br>    text-align: center;<br>  &#125;<br>  <br>  .search-bar &#123;<br>    display: flex;<br>    margin-bottom: 20px;<br>    margin-left: auto;<br>    margin-right: 20px;<br>  &#125;<br>  <br>  .search-bar input[type=&quot;text&quot;] &#123;<br>    flex-grow: 1;<br>    border: 1px solid #ccc;<br>    padding: 10px;<br>  &#125;<br>  <br>  .search-bar button[type=&quot;submit&quot;] &#123;<br>    background-color: #f60;<br>    color: #fff;<br>    border: none;<br>    padding: 10px 20px;<br>    cursor: pointer;<br>  &#125;<br>  <br>  /* Main */<br>  main &#123;<br>    max-width: 1200px;<br>    margin: 0 auto;<br>    padding: 20px;<br>  &#125;<br>  <br>  .featured-products &#123;<br>    margin-bottom: 40px;<br>  &#125;<br>  <br>  .featured-products h2 &#123;<br>    margin-bottom: 20px;<br>    font-size: 24px;<br>  &#125;<br>  <br>  .featured-products ul &#123;<br>    list-style: none;<br>    display: flex;<br>    justify-content: space-between;<br>  &#125;<br>  <br>  .featured-products li &#123;<br>    flex-basis: calc(33.33% - 20px);<br>    text-align: center;<br>  &#125;<br>  <br>  .featured-products li img &#123;<br>    width: 100%;<br>  &#125;<br>  <br>  .featured-products li h3 &#123;<br>    margin: 10px 0;<br>    font-size: 18px;<br>  &#125;<br>  <br>  .featured-products li p &#123;<br>    margin: 10px 0;<br>    color: #666;<br>  &#125;<br>  <br>  .featured-products li span &#123;<br>    font-size: 24px;<br>    font-weight: bold;<br>    color: #f60;<br>  &#125;<br>  <br>  .featured-categories &#123;<br>    margin-bottom: 40px;<br>  &#125;<br>  <br>  .featured-categories h2 &#123;<br>    margin-bottom: 20px;<br>    font-size: 24px;<br>  &#125;<br>  <br>  .featured-categories ul &#123;<br>    list-style: none;<br>    display: flex;<br>    justify-content: center;<br>  &#125;<br>  <br>  .featured-categories li &#123;<br>    margin-right: 20px;<br>  &#125;<br>  <br>  .featured-categories li:last-child &#123;<br>    margin-right: 0;<br>  &#125;<br>  <br>  .featured-categories li a &#123;<br>    text-decoration: none;<br>    color: #f60;<br>    font-weight: bold;<br>    border: 2px solid #f60;<br>    padding: 10px 20px;<br>    border-radius: 30px;<br>  &#125;<br>  <br>  .featured-categories li a:hover &#123;<br>    background-color: #f60;<br>    color: #fff;<br>  &#125;<br>  <br>  /* Footer */<br>  footer &#123;<br>    padding: 20px;<br>    background-color: #f7f7f7;<br>    text-align: center;<br>  &#125;<br>  <br>  footer p &#123;<br>    color: #666;<br>  &#125;<br></code></pre></td></tr></table></figure>

<p>此时的页面效果：</p>
<p><img src="/2023/11/13/%E5%88%A9%E7%94%A8ChatGpt%E7%94%9F%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/640-169988965872816.png" alt="图片"></p>
<p>该示例包括全局样式、页头样式、主要内容样式和页脚样式。将以上代码保存到一个名为style.css的文件中，并将该文件与HTML页面放置在同一目录下，即可实现样式和页面的关联。</p>
<p>此时页面上的图片并没有实际的图片去展示，此时我们可以使用网络路径图片，来进行页面的展示。</p>
<p><img src="/2023/11/13/%E5%88%A9%E7%94%A8ChatGpt%E7%94%9F%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/640-169988965872917.png" alt="图片"></p>
<h4 id="2-3-添加轮播图"><a href="#2-3-添加轮播图" class="headerlink" title="2.3 添加轮播图"></a><strong>2.3 添加轮播图</strong></h4><p>很多实际的电商首页有轮播图的展示，此时我们也想给当前的电商首页添加个轮播图，来瞅瞅ChatGPT给我们的建议：</p>
<p><img src="/2023/11/13/%E5%88%A9%E7%94%A8ChatGpt%E7%94%9F%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/640-169988969304022.png" alt="图片"></p>
<p>以下是ChatGPT生成的JS代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 获取轮播图容器和图像元素<br>var slider = document.querySelector(&quot;.slider&quot;);<br>var images = slider.querySelectorAll(&quot;img&quot;);<br><br>// 设置轮播图容器的宽度以适应图像元素<br>slider.style.width = 100 + &quot;%&quot;;<br><br>// 设置每个图像元素的宽度以适应轮播图容器<br>for (var i = 0; i &lt; images.length; i++) &#123;<br>  images[i].style.width = 100 + &quot;%&quot;;<br>&#125;<br><br>// 设置计数器以跟踪当前显示的图像元素<br>var counter = 0;<br><br>// 设置计时器以控制轮播图的动画效果<br>setInterval(function () &#123;<br>  // 将当前图像元素移动到左侧<br>  images[counter].style.left = &quot;-100%&quot;;<br><br>  // 将下一个图像元素移动到中央位置<br>  counter = (counter + 1) % images.length;<br>  images[counter].style.left = &quot;0&quot;;<br>&#125;, 2000);<br><br></code></pre></td></tr></table></figure>

<p>此时的页面效果：</p>
<p><img src="/2023/11/13/%E5%88%A9%E7%94%A8ChatGpt%E7%94%9F%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/640-169988974415425.gif" alt="图片"></p>
<p>请注意，这只是一个简单的轮播图示例，还有许多其他的实现方法和库可以使用。</p>
<p>同时ChatGPT仍会对轮播图的改进，提供更多的思路。</p>
<p><img src="/2023/11/13/%E5%88%A9%E7%94%A8ChatGpt%E7%94%9F%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/640-169988974415426.png" alt="图片"></p>
<p>在此我们初见雏形的前端页面就已经生成了，所有的代码都由ChatGPT生成，我们只需要将其组装起来，就可以看到一个简易的电商首页了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了如何使用ChatGPT生成前端页面，并提供了相应的代码和技巧。通过使用ChatGPT，您可以更加高效地，构建页面，节省时间和精力，并且还能够为您提供一些灵感。但是，生成的页面可能并不总是完美的，所以您需要根据自己的需求进行一些修改和调整。希望本文能够帮助您更好地利用人工智能技术来优化前端开发。</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
  </entry>
  <entry>
    <title>常用的http请求头和响应头</title>
    <url>/2023/12/06/%E5%B8%B8%E7%94%A8%E7%9A%84http%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%92%8C%E5%93%8D%E5%BA%94%E5%A4%B4/</url>
    <content><![CDATA[<h3 id="常用的http请求头"><a href="#常用的http请求头" class="headerlink" title="常用的http请求头"></a>常用的http请求头</h3><h3 id="1-Accept"><a href="#1-Accept" class="headerlink" title="1.Accept"></a><strong>1.Accept</strong></h3><ul>
<li><strong>Accept: text&#x2F;html</strong> 浏览器可以接受服务器回发的类型为 text&#x2F;html。</li>
<li><strong>Accept: *&#x2F;*</strong>  代表浏览器可以处理所有类型,(一般浏览器发给服务器都是发这个)。</li>
</ul>
<h3 id="2-Accept-Encoding"><a href="#2-Accept-Encoding" class="headerlink" title="2.Accept-Encoding"></a>2.Accept-Encoding</h3><ul>
<li><strong>Accept-Encoding: gzip, deflate</strong> 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate），（注意：这不是只字符编码）。</li>
</ul>
<h3 id="3-Accept-Language"><a href="#3-Accept-Language" class="headerlink" title="3.Accept-Language"></a>3.Accept-Language</h3><ul>
<li><strong>Accept-Language:zh-CN,zh;q&#x3D;0.9</strong> 浏览器申明自己接收的语言。</li>
</ul>
<h3 id="4-Connection"><a href="#4-Connection" class="headerlink" title="4.Connection"></a>4.Connection</h3><ul>
<li><strong>Connection: keep-alive</strong> 当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。</li>
<li><strong>Connection: close</strong> 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</li>
</ul>
<h3 id="5-Host（发送请求时，该报头域是必需的）"><a href="#5-Host（发送请求时，该报头域是必需的）" class="headerlink" title="5.Host（发送请求时，该报头域是必需的）"></a>5.Host（发送请求时，该报头域是必需的）</h3><ul>
<li><strong>Host:<a href="http://www.baidu.com/">www.baidu.com</a></strong> 请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的。</li>
</ul>
<h3 id="6-Referer"><a href="#6-Referer" class="headerlink" title="6.Referer"></a>6.Referer</h3><ul>
<li><strong>Referer:<a href="https://www.baidu.com/?tn=62095104_8_oem_dg">https://www.baidu.com/?tn=62095104_8_oem_dg</a></strong> 当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。</li>
</ul>
<h3 id="7-User-Agent"><a href="#7-User-Agent" class="headerlink" title="7.User-Agent"></a>7.User-Agent</h3><ul>
<li><strong>User-Agent:Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.110 Safari&#x2F;537.36</strong> 告诉HTTP服务器， 客户端使用的操作系统和浏览器的名称和版本。</li>
</ul>
<h3 id="8-Cache-Control"><a href="#8-Cache-Control" class="headerlink" title="8.Cache-Control"></a>8.Cache-Control</h3><ul>
<li><strong>Cache-Control:private</strong> 默认为private 响应只能够作为私有的缓存，不能再用户间共享</li>
<li>**<code>\**Cache-Control:public\** </code>**响应会被缓存，并且在多用户间共享。正常情况, 如果要求HTTP认证,响应会自动设置为 private.</li>
<li><strong>Cache-Control:must-revalidate</strong> 响应在特定条件下会被重用，以满足接下来的请求，但是它必须到服务器端去验证它是不是仍然是最新的。</li>
<li><strong>Cache-Control:no-cache</strong> 响应不会被缓存,而是实时向服务器端请求资源。</li>
<li><strong>Cache-Control:max-age&#x3D;10</strong> 设置缓存最大的有效时间，但是这个参数定义的是时间大小（比如：60）而不是确定的时间点。单位是[秒 seconds]。</li>
<li>**<code>Cache-Control:no-store </code>**在任何条件下，响应都不会被缓存，并且不会被写入到客户端的磁盘里，这也是基于安全考虑的某些敏感的响应才会使用这个。</li>
</ul>
<h3 id="9-Cookie"><a href="#9-Cookie" class="headerlink" title="9.Cookie"></a>9.Cookie</h3><p>Cookie是用来存储一些用户信息以便让服务器辨别用户身份的（大多数需要登录的网站上面会比较常见），比如cookie会存储一些用户的用户名和密码，当用户登录后就会在客户端产生一个cookie来存储相关信息，这样浏览器通过读取cookie的信息去服务器上验证并通过后会判定你是合法用户，从而允许查看相应网页。当然cookie里面的数据不仅仅是上述范围，还有很多信息可以存储是cookie里面，比如sessionid等。</p>
<h3 id="10-Range（用于断点续传）"><a href="#10-Range（用于断点续传）" class="headerlink" title="10.Range（用于断点续传）"></a>10.Range（用于断点续传）</h3><ul>
<li><strong>Range:bytes&#x3D;0-5</strong> 指定第一个字节的位置和最后一个字节的位置。用于告诉服务器自己想取对象的哪部分。</li>
</ul>
<h2 id="常用的http响应头"><a href="#常用的http响应头" class="headerlink" title="常用的http响应头"></a>常用的http响应头</h2><h3 id="1-Cache-Control（对应请求中的Cache-Control）"><a href="#1-Cache-Control（对应请求中的Cache-Control）" class="headerlink" title="1.Cache-Control（对应请求中的Cache-Control）"></a>1.Cache-Control（对应请求中的Cache-Control）</h3><ul>
<li><strong>Cache-Control:private</strong> 默认为private  响应只能够作为私有的缓存，不能再用户间共享</li>
<li><em><strong>*Cache-Control:public*</strong></em> 浏览器和缓存服务器都可以缓存页面信息。</li>
<li><strong>Cache-Control:must-revalidate</strong>  对于客户机的每次请求，代理服务器必须想服务器验证缓存是否过时。</li>
<li><strong>Cache-Control:no-cache</strong>  浏览器和缓存服务器都不应该缓存页面信息。</li>
<li><strong>Cache-Control:max-age&#x3D;10</strong> 是通知浏览器10秒之内不要烦我，自己从缓冲区中刷新。</li>
<li><strong>Cache-Control:no-store</strong> 请求和响应的信息都不应该被存储在对方的磁盘系统中。</li>
</ul>
<h3 id="2-Content-Type"><a href="#2-Content-Type" class="headerlink" title="2.Content-Type"></a>2.Content-Type</h3><ul>
<li><strong>Content-Type：text&#x2F;html;charset&#x3D;UTF-8</strong> 告诉客户端，资源文件的类型，还有字符编码，客户端通过utf-8对资源进行解码，然后对资源进行html解析。通常我们会看到有些网站是乱码的，往往就是服务器端没有返回正确的编码。</li>
</ul>
<h3 id="3-Content-Encoding"><a href="#3-Content-Encoding" class="headerlink" title="3.Content-Encoding"></a>3.Content-Encoding</h3><ul>
<li><strong>Content-Encoding:gzip</strong> 告诉客户端，服务端发送的资源是采用gzip编码的，客户端看到这个信息后，应该采用gzip对资源进行解码。</li>
</ul>
<h3 id="4-Date"><a href="#4-Date" class="headerlink" title="4.Date"></a>4.Date</h3><ul>
<li><strong>Date: Tue, 03 Apr 2018 03:52:28 GMT</strong> 这个是服务端发送资源时的服务器时间，GMT是格林尼治所在地的标准时间。http协议中发送的时间都是GMT的，这主要是解决在互联网上，不同时区在相互请求资源的时候，时间混乱问题。</li>
</ul>
<h3 id="5-Server"><a href="#5-Server" class="headerlink" title="5.Server"></a>5.Server</h3><ul>
<li><strong>Server：Tengine&#x2F;1.4.6</strong> 这个是服务器和相对应的版本，只是告诉客户端服务器信息<strong>。</strong></li>
</ul>
<h3 id="6-Transfer-Encoding"><a href="#6-Transfer-Encoding" class="headerlink" title="6.Transfer-Encoding"></a>6.Transfer-Encoding</h3><ul>
<li><strong>Transfer-Encoding：chunked</strong> 这个响应头告诉客户端，服务器发送的资源的方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。</li>
</ul>
<h3 id><a href="#" class="headerlink" title></a></h3><h3 id="7-Expires"><a href="#7-Expires" class="headerlink" title="7.Expires"></a>7.Expires</h3><ul>
<li><strong>Expires:Sun, 1 Jan 2000 01:00:00 GMT</strong> 这个响应头也是跟缓存有关的，告诉客户端在这个时间前，可以直接访问缓存副本，很显然这个值会存在问题，因为客户端和服务器的时间不一定会都是相同的，如果时间不同就会导致问题。所以这个响应头是没有Cache-Control：max-age&#x3D;*这个响应头准确的，因为max-age&#x3D;date中的date是个相对时间，不仅更好理解，也更准确。</li>
</ul>
<h3 id="8-Last-Modified"><a href="#8-Last-Modified" class="headerlink" title="8.Last-Modified"></a>8.Last-Modified</h3><ul>
<li><strong>Last-Modified: Dec, 26 Dec 2015 17:30:00 GMT</strong> 所请求的对象的最后修改日期(按照 RFC 7231 中定义的“超文本传输协议日期”格式来表示)</li>
</ul>
<h3 id="9-Connection"><a href="#9-Connection" class="headerlink" title="9.Connection"></a>9.Connection</h3><ul>
<li><strong>Connection：keep-alive</strong> 这个字段作为回应客户端的Connection：keep-alive，告诉客户端服务器的tcp连接也是一个长连接，客户端可以继续使用这个tcp连接发送http请求。</li>
</ul>
<h3 id="10-Etag"><a href="#10-Etag" class="headerlink" title="10.Etag"></a><strong>10.Etag</strong></h3><ul>
<li><strong>ETag: “737060cd8c284d8af7ad3082f209582d”</strong> 就是一个对象（比如URL）的标志值，就一个对象而言，比如一个html文件，如果被修改了，其Etag也会别修改，所以，ETag的作用跟Last-Modified的作用差不多，主要供WEB服务器判断一个对象是否改变了。比如前一次请求某个html文件时，获得了其 ETag，当这次又请求这个文件时，浏览器就会把先前获得ETag值发送给WEB服务器，然后WEB服务器会把这个ETag跟该文件的当前ETag进行对比，然后就知道这个文件有没有改变了。</li>
</ul>
<h3 id="11-Refresh"><a href="#11-Refresh" class="headerlink" title="11.Refresh"></a>11.Refresh</h3><ul>
<li><strong>Refresh: 5; url&#x3D;<a href="http://baidu.com/">http://baidu.com</a></strong> 用于重定向，或者当一个新的资源被创建时。默认会在5秒后刷新重定向。</li>
</ul>
<h3 id="12-Access-Control-Allow-Origin"><a href="#12-Access-Control-Allow-Origin" class="headerlink" title="12.Access-Control-Allow-Origin"></a>12.Access-Control-Allow-Origin</h3><ul>
<li><strong>Access-Control-Allow-Origin: *</strong>  <em>号代表所有网站可以跨域资源共享，如果当前字段为</em>那么Access-Control-Allow-Credentials就不能为true</li>
<li><strong>Access-Control-Allow-Origin: <a href="http://www.baidu.com/">www.baidu.com</a></strong> 指定哪些网站可以跨域资源共享</li>
</ul>
<h3 id="13-Access-Control-Allow-Methods"><a href="#13-Access-Control-Allow-Methods" class="headerlink" title="13.Access-Control-Allow-Methods"></a>13.Access-Control-Allow-Methods</h3><ul>
<li><strong>Access-Control-Allow-Methods：GET,POST,PUT,DELETE</strong> 允许哪些方法来访问</li>
</ul>
<h3 id="14-Access-Control-Allow-Credentials"><a href="#14-Access-Control-Allow-Credentials" class="headerlink" title="14.Access-Control-Allow-Credentials"></a>14.Access-Control-Allow-Credentials</h3><ul>
<li><strong>Access-Control-Allow-Credentials: true</strong> 是否允许发送cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。如果access-control-allow-origin为*，当前字段就不能为true</li>
</ul>
<h3 id="15-Content-Range"><a href="#15-Content-Range" class="headerlink" title="15.Content-Range"></a><strong>15.Content-Range</strong></h3><ul>
<li><strong>Content-Range: bytes 0-5&#x2F;7877</strong> 指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。</li>
</ul>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2023/12/08/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>快速排序（Quick Sort）是一种常用的排序算法，它使用<code>分治</code>的思想，在数组中选择一个基准元素，将小于基准的元素放在基准的左侧，大于基准的元素放在基准的右侧，然后对左右两个子数组分别递归地进行快速排序。</p>
<p>以下是我的的JavaScript实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const arr = [2,1,8,4,3,5,9]<br>// 快速排序<br>function quickSort(arr)&#123;<br>    if(arr.length&lt;=1)<br>    return arr<br>	//选择基准实现<br>    const pivot = arr[0]<br>    //分区<br>    const left = []<br>    const right = []<br><br>    for(let i = 1;i &lt; arr.length;i++)&#123;<br>        if(arr[i] &lt; pivot)<br>        left.push(arr[i])<br>        else<br>        right.push(arr[i])<br>    &#125;<br>    // 递归地对左右两个子数组进行快速排序<br>    return [...quickSort(left),pivot,...quickSort(right)]<br>&#125;<br>console.log(quickSort(arr))<br></code></pre></td></tr></table></figure>



<p>这个例子中，选择数组的第一个元素作为基准，然后将小于基准的元素放在左侧，大于基准的元素放在右侧。接着，对左右两个子数组分别递归地进行快速排序。这个过程一直递归下去，直到子数组的长度为1或0，最终合并排序完成。</p>
<p>这里使用了ES6的展开运算符<code>...</code>来合并左、基准和右三个部分。</p>
<p>结果如下：</p>
<p><img src="/2023/12/08/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/image-20231208195623059.png" alt="image-20231208195623059"></p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>手撕</tag>
      </tags>
  </entry>
  <entry>
    <title>原型链-华顺信安实习一面</title>
    <url>/2024/01/12/%E5%8E%9F%E5%9E%8B%E9%93%BE-%E5%8D%8E%E9%A1%BA%E4%BF%A1%E5%AE%89%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<p>本题考察了构造函数与实例对象的关系、查找原型链的时机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">function A()&#123;<br>    this.x=&#x27;hello&#x27;<br>&#125;<br>A.prototype.x=&#x27;world&#x27;<br><br>const a=new A();<br><br>a.x=&#x27;what&#x27;<br>console.log(a.x);<br><br>delete a.x;<br>console.log(a.x);<br><br>delete a.x;<br>console.log(a.x);<br><br>a.x=undefined;<br>console.log(a.x);<br><br>//what<br>//world<br>//world<br>//undefined首先要理解，构造函数中的this.x和a.x有什么区别？其实就是相同的，在构造完毕之后，this被绑定在了实例对象a上面。<br></code></pre></td></tr></table></figure>

<p>所以在不进行任何操作时，仅仅生成实例对象a并打印a.x输出的结果是’hello’</p>
<p>对四个a.x的操作逐行分析：</p>
<p>第一个a.x：修改之后打印修改后的值【’what’】<br>第二个，删除a.x：删除此时a实例对象上的x属性,此时a.x访问不到有效属性，因此从原型链上找是否有可继承的同名属性【’world’】<br>第三个，删除a.x:注意一个 重点delete只会删除当前对象的属性而不会沿着原型链查找，所以无法删除prototype上的x ，而且delete删除空属性不会报错。所以最后打印出来还是继承属性的值【’world’】<br>第四个a.x:a.x设置为了undefined【’undefined’】</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>数组扁平化</title>
    <url>/2024/02/05/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/</url>
    <content><![CDATA[<p>总结的数组扁平化方法如下：</p>
<h3 id="1-数组自带的方法flat"><a href="#1-数组自带的方法flat" class="headerlink" title="1,数组自带的方法flat"></a>1,数组自带的方法flat</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]],<span class="hljs-number">6</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">flat</span>(<span class="hljs-title class_">Infinity</span>))<br></code></pre></td></tr></table></figure>

<p><em>数组自带的扁平化方法,flat的参数代表的是需要展开几层，如果是Infinity的话，就是不过嵌套几层，</em></p>
<p><em>全部都展开。</em></p>
<p>如果写的是Infinity的话，就是不管你是多少维数组，都会直接转为一维数组</p>
<h3 id="2-通过正则的方式来让数组扁平化"><a href="#2-通过正则的方式来让数组扁平化" class="headerlink" title="2,通过正则的方式来让数组扁平化"></a>2,通过正则的方式来让数组扁平化</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]],<span class="hljs-number">6</span>]<br><span class="hljs-keyword">const</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\[|\]/g</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">const</span> res2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;[&#x27;</span> + res + <span class="hljs-string">&#x27;]&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2)<br></code></pre></td></tr></table></figure>

<p>首先是使用JSON.stringify把arr转为字符串。</p>
<p>接着使用正则把字符串里面的 [ 和 ]去掉。</p>
<p>然后再拼接数组括号转为数组对象。</p>
<h3 id="3-（简单粗暴）递归"><a href="#3-（简单粗暴）递归" class="headerlink" title="3,（简单粗暴）递归"></a>3,（简单粗暴）递归</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = []<br><span class="hljs-keyword">const</span>  <span class="hljs-title function_">fn</span> = (<span class="hljs-params">arr</span>)=&gt;&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>; i++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr[i]))&#123;<br>                    <span class="hljs-title function_">fn</span>(arr[i])<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    array.<span class="hljs-title function_">push</span>(arr[i])<br>                &#125;<br>            &#125;<br>      &#125;<br><span class="hljs-title function_">fn</span>(arr)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array)<br></code></pre></td></tr></table></figure>

<p>首先，先写一个函数用来让数组扁平，函数先定义一个空数组，作为新数组返回。</p>
<p>接着，使用<a href="https://www.zhihu.com/search?q=for%E5%BE%AA%E7%8E%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2605792650%7D">for循环</a>遍历数组的每一项，</p>
<p>然后，使用Array.isArray()判断这一项是不是数组，</p>
<p>如果是数组，就递归调用这个函数，不是就讲它放到新数组中。</p>
<p>最后将数组返回。</p>
<h3 id="4，（鲜为人知）array-reduce"><a href="#4，（鲜为人知）array-reduce" class="headerlink" title="4，（鲜为人知）array.reduce"></a>4，（鲜为人知）array.reduce</h3><p>定义和用法</p>
<p>reduce() 方法接收一个函数作为<a href="https://www.zhihu.com/search?q=%E7%B4%AF%E5%8A%A0%E5%99%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2605792650%7D">累加器</a>，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>
<p>reduce() 可以作为一个<a href="https://www.zhihu.com/search?q=%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2605792650%7D">高阶函数</a>，用于函数的 compose。</p>
<p><strong>注意:</strong> reduce() 对于空数组是不会执行<a href="https://www.zhihu.com/search?q=%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2605792650%7D">回调函数</a>的。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">total, currentValue, currentIndex, arr</span>), initialValue)<br></code></pre></td></tr></table></figure>

<p>reduce()方法是数组的通用方法，接受一个函数作为累加器，另外在接受一个数作为累加器中要用到的数据，可写可不写。</p>
<p>这个回调函数中每个参数的意义如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>total</td>
<td>必需。初始值，或者计算结束后的返回值。</td>
</tr>
<tr>
<td>currentValue</td>
<td>必须，当前元素。</td>
</tr>
<tr>
<td>currentIndex</td>
<td>可选。当前元素的索引</td>
</tr>
<tr>
<td>arr</td>
<td>可选。当前元素所属的数组对象。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">newArr</span> = (<span class="hljs-params">arr</span>)=&gt;&#123;<br>     <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,cur</span>)=&gt;</span>&#123;<br>          <span class="hljs-keyword">return</span> pre.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(cur) ? <span class="hljs-title function_">newArr</span>(cur) : cur)<br>     &#125;,[])<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">newArr</span>(arr),<span class="hljs-string">&quot;reduce方法&quot;</span>)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>八股文</category>
      </categories>
  </entry>
  <entry>
    <title>毕业学生就业统计表</title>
    <url>/2023/07/26/%E6%AF%95%E4%B8%9A%E5%AD%A6%E7%94%9F%E5%B0%B1%E4%B8%9A%E7%BB%9F%E8%AE%A1%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="js毕业学生就业统计表小案例"><a href="#js毕业学生就业统计表小案例" class="headerlink" title="js毕业学生就业统计表小案例"></a>js毕业学生就业统计表小案例</h1><h3 id="本文是在学习javaScript中Web-APIs板块中localStorage，事件绑定，事件委托等内容为更加熟练掌握理解相关知识的练习小案例"><a href="#本文是在学习javaScript中Web-APIs板块中localStorage，事件绑定，事件委托等内容为更加熟练掌握理解相关知识的练习小案例" class="headerlink" title="本文是在学习javaScript中Web APIs板块中localStorage，事件绑定，事件委托等内容为更加熟练掌握理解相关知识的练习小案例"></a>本文是在学习javaScript中Web APIs板块中localStorage，事件绑定，事件委托等内容为更加熟练掌握理解相关知识的练习小案例</h3><h4 id="涉及的一些知识分析"><a href="#涉及的一些知识分析" class="headerlink" title="涉及的一些知识分析"></a>涉及的一些知识分析</h4><ul>
<li>render页面利用数组中map+join的方法</li>
<li>render完页面后需要reset表单恢复默认值</li>
<li>将数据存入localStorage确保数据不丢失</li>
<li><em>存储复杂数据类型需要JSON.Stringify()方法将其转化成</em>JSON字符串存储到本地*</li>
</ul>
<h4 id="网页效果如下"><a href="#网页效果如下" class="headerlink" title="网页效果如下"></a>网页效果如下</h4><p><img src="/2023/07/26/%E6%AF%95%E4%B8%9A%E5%AD%A6%E7%94%9F%E5%B0%B1%E4%B8%9A%E7%BB%9F%E8%AE%A1%E8%A1%A8/1.png"></p>
<h4 id="完整代码实现以及包含的css代码如下，可按需取用"><a href="#完整代码实现以及包含的css代码如下，可按需取用" class="headerlink" title="完整代码实现以及包含的css代码如下，可按需取用"></a>完整代码实现以及包含的css代码如下，可按需取用</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>毕业学生就业统计表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;./iconfont/iconfont.css&quot;&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/index.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>毕业学生就业统计表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uname&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uname&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;年龄&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;薪资&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;北京&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上海&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;广州&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;深圳&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;西安&quot;</span>&gt;</span>西安<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-tianjia&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>添加<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>共有数据<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>条<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>薪资<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>就业城市<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>录入时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- &lt;tr&gt;</span><br><span class="hljs-comment">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;迪丽热巴&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;23&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;女&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;12000&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;北京&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;2099/9/9 08:08:08&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;</span><br><span class="hljs-comment">          &lt;a href=&quot;javascript:&quot;&gt;</span><br><span class="hljs-comment">            &lt;i class=&quot;iconfont icon-shanchu&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-comment">            删除</span><br><span class="hljs-comment">          &lt;/a&gt;</span><br><span class="hljs-comment">        &lt;/td&gt;</span><br><span class="hljs-comment">      &lt;/tr&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 参考数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> initData = [</span><br><span class="language-javascript">      &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">stuId</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;迪丽热巴&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">salary</span>: <span class="hljs-string">&#x27;12000&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;女&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;北京&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">time</span>: <span class="hljs-string">&#x27;2099/9/9 08:08:08&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    ]</span><br><span class="language-javascript">    <span class="hljs-comment">// localStorage.setItem(&#x27;data&#x27;, JSON.stringify(initData))</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 渲染业务</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 1.1 先读取本地存储的数据</span></span><br><span class="language-javascript">    <span class="hljs-comment">// (1). 本地存储有数据则记得转换为对象然后存储到变量里面，后期用于渲染页面</span></span><br><span class="language-javascript">    <span class="hljs-comment">// (2). 如果没有数据，则用 空数组来代替</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;data&#x27;</span>)) || []</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)</span><br><span class="language-javascript">    <span class="hljs-comment">// 1.2 利用map和join方法来渲染页面</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> tbody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// (1). 利用map遍历数组，返回对应tr的数组</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> trArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">          &lt;tr&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.stuId&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.uname&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.age&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.gender&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.salary&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.city&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.time&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">              &lt;a href=&quot;javascript:&quot; data-id=&quot;<span class="hljs-subst">$&#123;index&#125;</span>&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;i class=&quot;iconfont icon-shanchu&quot;&gt;&lt;/i&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                删除</span></span><br><span class="hljs-string"><span class="language-javascript">              &lt;/a&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">          &lt;/tr&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span></span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(trArr)</span><br><span class="language-javascript">      <span class="hljs-comment">// (2). 把数组转换为字符串 join</span></span><br><span class="language-javascript">      <span class="hljs-comment">// (3). 把生成的字符串追加给tbody </span></span><br><span class="language-javascript">      tbody.<span class="hljs-property">innerHTML</span> = trArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript">      <span class="hljs-comment">// 显示共计有几条数据</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.title span&#x27;</span>).<span class="hljs-property">innerHTML</span> = arr.<span class="hljs-property">length</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">render</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 新增业务</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> info = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.info&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> uname = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.uname&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> age = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.age&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> salary = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.salary&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> gender = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.gender&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> city = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.city&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 2.1 form表单注册提交事件，阻止默认行为</span></span><br><span class="language-javascript">    info.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">      <span class="hljs-comment">// 2.2 非空判断</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!uname.<span class="hljs-property">value</span> || !age.<span class="hljs-property">value</span> || !salary.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;输入内容不能为空&#x27;</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-comment">// 2.3 给 arr 数组追加对象，里面存储 表单获取过来的数据</span></span><br><span class="language-javascript">      arr.<span class="hljs-title function_">push</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 处理 stuId：数组最后一条数据的stuId + 1      </span></span><br><span class="language-javascript">        <span class="hljs-attr">stuId</span>: arr.<span class="hljs-property">length</span> ? arr[arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">stuId</span> + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">uname</span>: uname.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: age.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">salary</span>: salary.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">gender</span>: gender.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">city</span>: city.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">time</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleString</span>()</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">      <span class="hljs-comment">// 2.4 渲染页面和重置表单（reset()方法）</span></span><br><span class="language-javascript">      <span class="hljs-title function_">render</span>()</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reset</span>() <span class="hljs-comment">// 重置表单</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 2.5 把数组重新存入本地存储里面，记得转换为JSON字符串存储</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr))</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 3. 删除业务</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 3.1 采用事件委托形式，给 tbody 注册点击事件</span></span><br><span class="language-javascript">    tbody.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 判断是否点击的是删除按钮  A 链接</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span> === <span class="hljs-string">&#x27;A&#x27;</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// alert(11)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 3.2 得到当前点击链接的索引号。渲染数据的时候，动态给a链接添加自定义属性例如 data-id=&quot;0&quot;</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">id</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 确认框 确认是否要真的删除</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;您确定要删除这条数据吗？&#x27;</span>)) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 3.3 根据索引号，利用 splice 删除数组这条数据</span></span><br><span class="language-javascript">          arr.<span class="hljs-title function_">splice</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">id</span>, <span class="hljs-number">1</span>)</span><br><span class="language-javascript">          <span class="hljs-comment">// 3.4 重新渲染页面 </span></span><br><span class="language-javascript">          <span class="hljs-title function_">render</span>()</span><br><span class="language-javascript">          <span class="hljs-comment">// 3.5 把最新 arr 数组存入本地存储</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr))</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h4><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#721c24</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.title</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">933px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ebebeb</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f2f2f2</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.title</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">margin</span>: -<span class="hljs-number">3px</span> <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#f26934</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>&#125;<br><br><span class="hljs-selector-tag">table</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">950px</span>;<br>  <span class="hljs-attribute">border-collapse</span>: collapse;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#3c3637</span>;<br>&#125;<br><br><span class="hljs-selector-tag">th</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f2f2f2</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  <span class="hljs-attribute">text-align</span>: left;<br>&#125;<br><br><span class="hljs-selector-tag">td</span>,<br><span class="hljs-selector-tag">th</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ebebeb</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">td</span> &#123;<br><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><br>&#125;<br><br><span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">tr</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fbfafa</span>;<br>&#125;<br><br><span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f26934</span>;<br>&#125;<br><br><span class="hljs-selector-class">.info</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">900px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">input</span>,<br><span class="hljs-selector-class">.info</span> select &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ebebeb</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">70px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5dbfd8</span>;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#52abc1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>JS小案例</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式指南</title>
    <url>/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>在实习的过程中发现项目中大量使用到了正则表达式，同时正则表达式作为一种强大的字符串匹配、字符串查找、字符串替换等操作工具属于前端工程师的必备技能。</p>
<h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><p>正则表达式（Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。搜索模式可用于文本搜索和文本替换。它用一系列字符定义搜索模式。</p>
<p>正则表达式的用途有很多，比如：</p>
<ul>
<li>表单输入验证。</li>
<li>搜索和替换。</li>
<li>过滤大量文本文件（如日志）中的信息。</li>
<li>读取配置文件。</li>
<li>网页抓取。</li>
<li>处理具有一致语法的文本文件，例如 CSV。</li>
</ul>
<p>正则表达式的语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/正则表达式主体/修饰符(可选)1.<br></code></pre></td></tr></table></figure>

<p>先来看一个最基本的正则表达式：<code>/处/</code>，它只匹配到了字符串中的第一个“处”：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/6129b4b68aed2f302de04974a313a7e45260c3.gif" alt="图片"><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/02e72b130093a1830e79744988554d2cf23f21.png" alt="图片"></p>
<p>这里，正则表达式的主体就是“处”，没有使用修饰符，我们会在后面来介绍正则表达式的修饰符。</p>
<h3 id="二、创建方式"><a href="#二、创建方式" class="headerlink" title="二、创建方式"></a>二、创建方式</h3><p>创建正则表达式的方式有两种：</p>
<ul>
<li><strong>字面量：</strong>正则表达式直接放在<code>/ /</code>之中：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const rex = /pattern/;<br></code></pre></td></tr></table></figure>

<ul>
<li><strong>构造函数：</strong>RegExp 对象表示正则表达式的一个实例：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const rex = new RegExp(&quot;pattern&quot;);<br></code></pre></td></tr></table></figure>

<p>这两种方法的一大区别是对象的构造函数允许传递带引号的表达式，通过这种方式就可以<strong>动态创建</strong>正则表达式。</p>
<p>通过这两种方法创建出来的 Regex 对象都具有相同的方法和属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let RegExp1 = /a|b/<br>let RegExp2 = new RegExp(&#x27;a|b&#x27;)<br>console.log(RegExp1)  // 输出结果：/a|b/<br>console.log(RegExp2)  // 输出结果：/a|b/<br></code></pre></td></tr></table></figure>

<h3 id="三、模式匹配"><a href="#三、模式匹配" class="headerlink" title="三、模式匹配"></a>三、模式匹配</h3><p>关于正则表达式最复杂的地方就是如何编写正则规则了，下面就来看如何编写正则表达式。</p>
<h4 id="1、字符集合"><a href="#1、字符集合" class="headerlink" title="1、字符集合"></a>1、字符集合</h4><p>如果我们想匹配 bat、cat 和 fat 这种类型的字符串该怎么办？可以通过使用<strong>字符集合</strong>来做到这一点，用 [] 表示，它会匹配包含的任意一个字符。这里就可以使用<code>/[bcf]at/ig</code>：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/c73105c0945f24a071e443e903e9c491f116d6.png" alt="图片"></p>
<p>可以看到，这里匹配到了字符串中的 bat、cat、fat。因为我们使用了 g 修饰符，所以匹配到了三个结果。</p>
<p>当然，字符集也可以用来匹配数字：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/7624fc0365e31950232855058c0c584c9067f0.png" alt="图片"></p>
<h4 id="2、字符范围"><a href="#2、字符范围" class="headerlink" title="2、字符范围"></a>2、字符范围</h4><p>如果我们想要在字符串中匹配所有以 at 结尾的单词，最直接的方式是使用字符集，并在其中提供所有的字母。对于这种在一个范围中的字符， 就可以直接定义字符范围，用<code>-</code>表示。它用来匹配指定范围内的任意字符。这里就可以使用<code>/[a-z]at/ig</code>。</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/d4848d919370b722279783504d56abe3285d0f.png" alt="图片"></p>
<p>可以看到，正则表达式按照我们的预期匹配了。</p>
<p>常见的使用范围的方式如下：</p>
<ul>
<li><strong>部分范围</strong>：<code>[a-f]</code>，匹配 a  到 f 的任意字符。</li>
<li><strong>小写范围</strong>：<code>[a-z]</code>，匹配 a 到 z 的任意字符。</li>
<li><strong>大写范围</strong>：<code>[A-Z]</code>，匹配 A 到 Z 的任意字符。</li>
<li><strong>数字范围</strong>：<code>[0-9]</code>，匹配 0 到 9 的任意字符。</li>
<li><strong>符号范围</strong>：<code>[#$%&amp;@]</code>。</li>
<li><strong>混合范围</strong>：<code>[a-zA-Z0-9]</code>，匹配所有数字、大小写字母中的任意字符。</li>
</ul>
<h3 id="3-数量字符"><a href="#3-数量字符" class="headerlink" title="3. 数量字符"></a>3. 数量字符</h3><p>如果想要匹配三个字母的单词，根据上面我们学到的字符范围，可以这样来写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[a-z][a-z][a-z]<br></code></pre></td></tr></table></figure>

<p>这里我们匹配的三个字母的单词，那如果想要匹配10个、20个字母的单词呢？难道要一个个来写范围吗？有一种更好的方法就是使用花括号<code>&#123;&#125;</code>来表示，来看例子：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/86a2fa7653a3baef3ea484b38d8337a69a36b7.gif" alt="图片"><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/b32efab00db9d66e10a7869536028d5a538bf9.png" alt="图片"></p>
<p>可以看到，这里我们匹配到了所有连续5个字母的单词（包括超过5个字母的单词，不过只会匹配到前5个字母）。</p>
<p>其实匹配重复字符的完整语法是这样的：<code>&#123;m,n&#125;</code>，它会匹配前面一个字符至少 m 次至多 n 次重复，{m}表示匹配 m 次，{m,}表示至少 m 次。</p>
<p>所以，当我们给5后面加上逗号时，就表示至少匹配五次：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/51e3b1800c85d6bcaf0413446c6276d20735fd.png" alt="图片"></p>
<p>所以这里就匹配到了所有连续5个或5个以上的单词。</p>
<p>当匹配次数为至少4次，至多5次时，匹配结果如下：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/67f2ced0437e76777025205a688f066bae85b5.png" alt="图片"></p>
<p>除了可以使用大括号来匹配一定数量的字符，还有三个相关的模式：</p>
<ul>
<li><code>+</code>：匹配前面一个表达式一次或者多次，相当于<code>&#123;1,&#125;</code>。</li>
<li><code>*</code>：匹配前面一个表达式0次或者多次，相当于<code>&#123;0,&#125;</code>。</li>
<li><code>?</code>：单独使用匹配前面一个表达式零次或者一次，相当于<code>&#123;0,1&#125;</code>，如果跟在量词*、+、?、{}后面的时候将会使量词变为非贪婪模式（尽量匹配少的字符），默认是使用贪婪模式。</li>
</ul>
<p>来看一个简单的例子，这里我们匹配的正则表达式为<code>/a+/ig</code>，结果如下：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/88b67ed460d74f606e58696d38702c4a09c9e3.png" alt="图片"></p>
<p>它和<code>/a&#123;1,&#125;/ig</code>的匹配结果是一样的：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/9126c4777beb7495cae8073841921fca211db7.png" alt="图片"></p>
<p>使用<code>/[a-z]+/ig</code>就可以匹配任意长度的纯字母单词：<img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/31379c347960ec21b8895818fe7398db075b5e.gif" alt="图片"></p>
<h4 id="4、元字符"><a href="#4、元字符" class="headerlink" title="4、元字符"></a>4、元字符</h4><p>使用元字符可以编写更紧凑的正则表达式模式。常见的元字符如下：</p>
<ul>
<li><code>\d</code>：相当于<code>[0-9]</code>，匹配任意数字。</li>
<li><code>\D</code>：相当于<code>[^0-9]</code>。</li>
<li><code>\w</code>：相当于<code>[0-9a-zA-Z]</code>，匹配任意数字、大小写字母和下划线。</li>
<li><code>\W</code>：相当于：[^0-9a-zA-Z]。</li>
<li><code>\s</code>：相当于<code>[\t\v\n\r\f]</code>，匹配任意空白符，包括空格，水平制表符<code>\t</code>，垂直制表符<code>\v</code>，换行符<code>\n</code>，回车符<code>\r</code>，换页符<code>\f</code>。</li>
<li><code>\S</code>：相当于<code>[^\t\v\n\r\f]</code>，表示非空白符。</li>
</ul>
<p>来看一个简单的例子：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/21edfad73315730071765219149018e68c0eaa.png" alt="图片"></p>
<p>这里使用<code>\d</code>来匹配任意数字、字母和下划线。这里就匹配到了7个连续四位的字符。</p>
<h4 id="5、特殊字符"><a href="#5、特殊字符" class="headerlink" title="5、特殊字符"></a>5、特殊字符</h4><p>使用特殊字符可以编写更高级的模式表达式，常见的特殊字符如下：</p>
<ul>
<li><code>.</code>：匹配除了换行符之外的任何单个字符。</li>
<li><code>\</code>：将下一个字符标记为特殊字符、或原义字符、或向后引用、或八进制转义符。</li>
<li><code>|</code>：逻辑或操作符。</li>
<li><code>[^]</code>：取非，匹配未包含的任意字符。</li>
</ul>
<p>来看一个简单的例子，如果我们使用 <code>/ab*/ig</code> 进行匹配，结果就如下：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/f2df7434827571295375391e9967102418b894.png" alt="图片"></p>
<p>那我们就是想要匹配 * 怎么办？就可以使用 <code>\</code> 对其进行转义：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/b112688835e5b791f1d7238c5f83e0d13ac70b.png" alt="图片"></p>
<p>这样就只会匹配到 <code>ab*</code> 了。</p>
<p>或匹配也很简单，来看例子，匹配规则为：<code>/ab|cd/ig</code>，匹配结果如下：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/13991a1183bc9d865f0688dfa34843de1d324d.png" alt="图片"></p>
<p>这里就会匹配到字符串中所有 <code>ab</code> 和 <code>cd</code> 字符。那如果想要匹配 <code>sabz</code> 或者<code>scdz</code>呢？开头和结尾是相同的，只有中间的两个字符是可选的。其实只需要给中间的或部分加上括号就可以了：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/12c4ba54364ab412ffb658096251beda6ab55c.gif" alt="图片"><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/a4401cd02d2747f521488198c84d4a4eb9b627.png" alt="图片"></p>
<p>取非规则在范围中使用，来看例子：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/a60d71835ff48ade53d737739299bfbb989a05.png" alt="图片"></p>
<p>这里匹配到了所有非字母的字符。</p>
<h4 id="6、位置匹配"><a href="#6、位置匹配" class="headerlink" title="6、位置匹配"></a>6、位置匹配</h4><p>如果我们想匹配字符串中以某些字符结尾的单词，以某些字符开头的单词该如何实现呢？正则表达式中提供了方法通过位置来匹配字符：</p>
<ul>
<li><code>\b</code>：匹配一个单词边界，也就是指单词和空格间的位置。</li>
<li><code>\B</code>：匹配非单词边界。</li>
<li><code>^</code>：匹配开头，在多行匹配中匹配行开头。</li>
<li><code>$</code>：匹配结尾，在多行匹配中匹配行结尾。</li>
<li><code>(?=p)</code>：匹配 p 前面的位置。</li>
<li><code>(?!=p)</code>：匹配不是 p 前面的位置。</li>
</ul>
<p>最常见的就是匹配开始和结束位置。先来看一个开始位置的匹配，这里使用 <code>/^ex/igm</code> 来匹配多行中以<code>ex</code> 开头的行：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/c7a9dca16b8d276d143600ab0bc7cc5a4f9223.png" alt="图片"></p>
<p>使用<code>/e$/igm</code>来匹配以 e 结尾的行：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/49aa9ab83a2708f97c7902d61404bc9916af0b.png" alt="图片"></p>
<p>可以使用 <code>\w+$ </code>来匹配每一行的最后一个单词：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/9210a4f49bde2513bf050275f41b21b863c36c.png" alt="图片"></p>
<p>需要注意，这里我们都使用 <code>m</code> 修饰符开启了多行模式。</p>
<p>使用 <code>/(?=the)/ig</code> 来匹配字符串中<code>the</code>前的面的位置：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/069817490977a6533cc355b72263c9e64e21f8.png" alt="图片"></p>
<p>我们可以使用<code>\b</code>来匹配单词的边界，匹配的结果如下：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/858bf3439e561e55e83115268da63d8219dcb3.png" alt="图片"></p>
<p>这可能比较难理解，我们可以使用以下正则表达式来匹配完整的单词：<code>\b\w+\b</code>，匹配结果如下：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/152fcb5996dead055a130838be687eecc1e73c.png" alt="图片"></p>
<h3 id="四、修饰符"><a href="#四、修饰符" class="headerlink" title="四、修饰符"></a>四、修饰符</h3><p>正则表达式常见的修饰符如下：</p>
<ul>
<li><code>g</code>：表示全局模式，即运用于所有字符串。</li>
<li><code>i</code>：表示不区分大小写，即匹配时忽略字符串的大小写。</li>
<li><code>m</code>：表示多行模式，强制 $ 和 ^ 分别匹配每个换行符。</li>
</ul>
<p>这些修饰符总是用在最后一个正斜杠后面，可以一起使用。下面来分别看看这些修饰符的作用。</p>
<p>最开始的例子中，字符串中有两个“处”，但是只匹配到了一个。这是因为正则表达式默认匹配第一个符合条件的字符。如果想要匹配所有符合条件的字符，就可以使用 <code>g</code> 修饰符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/处/g<br></code></pre></td></tr></table></figure>

<p>这样就匹配到了所有符合条件的字符：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/e58f77c09a1cb4891d94885ecb829bd56ea67a.png" alt="图片"></p>
<p>当需要匹配引英文字符串，并且忽略字符串的字母大小写时，<code>i</code> 修饰符就派上用场了。先来看下面的表达式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/a/g<br></code></pre></td></tr></table></figure>

<p>在进行匹配时，它匹配到了字符串中所有的 <code>a</code> 字符。但是最开始的 <code>A</code> 是没匹配到的，因为两者大小写不一致：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/c8a9d18545ff5867460539af9fd4526c1fc222.png" alt="图片"></p>
<p>那我们来添加上 <code>i</code> 修饰符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/a/gi<br></code></pre></td></tr></table></figure>

<p>这时所有的 <code>a</code> 都被匹配到了，无论是大写还是小写，总共匹配到了三个 <code>a</code>：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/f7185a0605136e024e2327bf1d80964bbc2503.png" alt="图片"></p>
<p>还有一个小疑问， 如果是对象构造函数的方式来构造正则表达式使，如何添加这些修饰符呢？其实很简单，只要将修饰符作为第二个参数传递给 构造函数就可以了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let regExp = new RegExp(&#x27;[2b|^2b]&#x27;, &#x27;gi&#x27;)<br>console.log(regExp)  // 输出结果：/[2b|^2b]/gi1.2.<br></code></pre></td></tr></table></figure>

<h3 id="五、RegExp-实例"><a href="#五、RegExp-实例" class="headerlink" title="五、RegExp 实例"></a>五、RegExp 实例</h3><h4 id="1、实例方法"><a href="#1、实例方法" class="headerlink" title="1、实例方法"></a>1、实例方法</h4><p>RegExp 实例置了<code>test()</code>和<code>exec()</code> 这两个方法来校验正则表达式。下面来分别看一下这两个方法。</p>
<p><strong>（1）test()</strong><code>test()</code>用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const regex1 = /a/ig;<br>const regex2 = /hello/ig;<br>const str = &quot;Action speak louder than words&quot;;<br>console.log(regex1.test(str));  // true<br>console.log(regex2.test(str));  // false1.2.3.4.5.<br></code></pre></td></tr></table></figure>

<p><strong>（2）exec()</strong><code>exec()</code>用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const regex1 = /a/ig;<br>const regex2 = /hello/ig;<br>const str = &quot;Action speak louder than words&quot;;<br>console.log(regex1.exec(str));  // [&#x27;A&#x27;, index: 0, input: &#x27;Action speak louder than words&#x27;, groups: undefined]<br>console.log(regex2.exec(str));  // null1.2.3.4.5.<br></code></pre></td></tr></table></figure>

<p>在当在全局正则表达式中使用 <code>exec</code> 时，每隔一次就会返回<code>null</code>，如图：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/42d2e04207933ec448e198390999c4e725a674.png" alt="图片"></p>
<p>这是怎么回事呢？MDN 的解释如下：</p>
<blockquote>
<p>在设置了 global 或 sticky 标志位的情况下（如 &#x2F;foo&#x2F;g or &#x2F;foo&#x2F;y），JavaScript RegExp 对象是有状态的。他们会将上次成功匹配后的位置记录在 lastIndex 属性中。使用此特性，exec() 可用来对单个字符串中的多次匹配结果进行逐条的遍历（包括捕获到的匹配），而相比之下， String.prototype.match() 只会返回匹配到的结果。</p>
</blockquote>
<p>为了解决这个问题，我们可以在运行每个exec命令之前将<code>lastIndex</code>赋值为 0：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/1796eff82ad1f5fd391793c91072c4a0a1d022.gif" alt="图片"><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/e8dc63b40fd6c1a56d38323899b46ff3601793.png" alt="图片"></p>
<h4 id="2、实例属性"><a href="#2、实例属性" class="headerlink" title="2、实例属性"></a>2、实例属性</h4><p>RegExp实例还内置了一些属性，这些属性可以获知一个正则表达式的各方面的信息，但是用处不大。</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>global</td>
<td>布尔值，表示是否设置了g标志</td>
</tr>
<tr>
<td>ignoreCase</td>
<td>布尔值，表示是否设置了i标志</td>
</tr>
<tr>
<td>lastIndex</td>
<td>整数，表示开始搜索下一个匹配项的字符位置，从0算起</td>
</tr>
<tr>
<td>multiline</td>
<td>布尔值，表示是否设置了m标志</td>
</tr>
<tr>
<td>source</td>
<td>正则表达式的字符串表示，按照字面量形式而非传入构造函数重大的字符串模式匹配</td>
</tr>
</tbody></table>
<h3 id="六、字符串方法"><a href="#六、字符串方法" class="headerlink" title="六、字符串方法"></a>六、字符串方法</h3><p>在 JavaScript 中有6种常用的方法是支持正则表达式的，下面来分别看看这些方法。</p>
<h4 id="1、search"><a href="#1、search" class="headerlink" title="1、search()"></a>1、search()</h4><p><code>search()</code> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。如果没有找到任何匹配的子串，则返回 -1。</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const regex1 = /a/ig;<br>const regex2 = /p/ig;<br>const regex3 = /m/ig;<br>const str = &quot;Action speak louder than words&quot;;<br>console.log(str.search(regex1));  // 输出结果：0<br>console.log(str.search(regex2));  // 输出结果：8<br>console.log(str.search(regex3));  // 输出结果：-1<br></code></pre></td></tr></table></figure>

<p>可以看到，<code>search()</code> 方法只会返回匹配到的第一个字符的索引值，当没有匹配到相应的值时，就会返回-1。</p>
<h4 id="2、match"><a href="#2、match" class="headerlink" title="2、match()"></a>2、match()</h4><p><code>match()</code> 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。如果没有找到任何匹配的文本， <code>match()</code> 将返回 <code>null</code>。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const regex1 = /a/ig;<br>const regex2 = /a/i;<br>const regex3 = /m/ig;<br>const str = &quot;Action speak louder than words&quot;;<br>console.log(str.match(regex1));  // 输出结果：[&#x27;A&#x27;, &#x27;a&#x27;, &#x27;a&#x27;]<br>console.log(str.match(regex2));  // 输出结果：[&#x27;A&#x27;, index: 0, input: &#x27;Action speak louder than words&#x27;, groups: undefined]<br>console.log(str.match(regex3));  // 输出结果：null<br></code></pre></td></tr></table></figure>

<p>可以看到，当没有 <code>g</code> 修饰符时，就只能在字符串中执行一次匹配，如果想要匹配所有符合条件的值，就需要添加 <code>g</code> 修饰符。</p>
<h4 id="3、matchAll"><a href="#3、matchAll" class="headerlink" title="3、matchAll()"></a>3、matchAll()</h4><p><code>matchAll()</code> 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。因为返回的是遍历器，所以通常使用<code>for...of</code>循环取出。</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">for (const match of &#x27;abcabc&#x27;.matchAll(/a/g)) &#123;<br>    console.log(match)<br>&#125;<br>//[&quot;a&quot;, index: 0, input: &quot;abcabc&quot;, groups: undefined]<br>//[&quot;a&quot;, index: 3, input: &quot;abcabc&quot;, groups: undefined]<br></code></pre></td></tr></table></figure>

<p>需要注意，该方法的第一个参数是一个正则表达式对象，如果传的参数不是一个正则表达式对象，则会隐式地使用 <code>new RegExp(obj)</code> 将其转换为一个 <code>RegExp</code> 。另外，RegExp必须是设置了全局模式<code>g</code>的形式，否则会抛出异常 <code>TypeError</code>。</p>
<h4 id="4、replace"><a href="#4、replace" class="headerlink" title="4、replace()"></a>4、replace()</h4><p><code>replace()</code> 用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const regex = /A/g;<br>const str = &quot;Action speak louder than words&quot;;<br>console.log(str.replace(regex, &#x27;a&#x27;));  // 输出结果：action speak louder than words<br></code></pre></td></tr></table></figure>

<p>可以看到，第一个参数中的正则表达式匹配到了字符串的第一个大写的 A，并将其替换为了第二个参数中的小写的 a。</p>
<h4 id="5、replaceAll"><a href="#5、replaceAll" class="headerlink" title="5、replaceAll()"></a>5、replaceAll()</h4><p><code>replaceAll()</code> 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串，该函数会替换所有匹配到的子字符串。</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const regex = /a/g;<br>const str = &quot;Action speak louder than words&quot;;<br>console.log(str.replaceAll(regex, &#x27;A&#x27;));  // 输出结果：Action speAk louder thAn words<br></code></pre></td></tr></table></figure>

<p>需要注意，当使用一个 <code>regex</code> 时，您必须设置全局（”g”）标志， 否则，它将引发 <code>TypeError</code>：”必须使用全局 RegExp 调用 replaceAll”。</p>
<h4 id="6、split"><a href="#6、split" class="headerlink" title="6、split()"></a>6、split()</h4><p><code>split()</code> 方法用于把一个字符串分割成字符串数组。其第一个参数是一个字符串或正则表达式，从该参数指定的地方分割字符串。</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const regex = / /gi;<br>const str = &quot;Action speak louder than words&quot;;<br>console.log(str.split(regex));  // 输出结果：[&#x27;Action&#x27;, &#x27;speak&#x27;, &#x27;louder&#x27;, &#x27;than&#x27;, &#x27;words&#x27;]<br></code></pre></td></tr></table></figure>

<p>这里的 <code>regex</code> 用来匹配空字符串，所以最终在字符串的每个空格处将字符串拆成了数组。</p>
<h3 id="七、实际应用"><a href="#七、实际应用" class="headerlink" title="七、实际应用"></a>七、实际应用</h3><p>下面来通过正则表达式的几个实际应用来巩固一下上面的知识。</p>
<h4 id="1、匹配密码"><a href="#1、匹配密码" class="headerlink" title="1、匹配密码"></a>1、匹配密码</h4><p>检查密码的格式，其包含至少一个大写字母、小写字母、数字、符号，长度为8-12位：</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W).&#123;8,12&#125;$/g<br></code></pre></td></tr></table></figure>

<p>这里我们主要使用了正则表达式中的<strong>正向前瞻</strong>，正向前瞻语法为<code>(?=pattern)</code>，即在目标字符串的相应位置必须有<code>pattern</code>部分匹配的内容，但不作为匹配结果处理，更不会存储在缓冲区内供以后使用。来看一下这个正则表达式的每一部分的含义：</p>
<ul>
<li><code>(?=.*[a-z])</code>：匹配任何后面跟着小写字母的字符。</li>
<li><code>(?=.*[A-Z])</code>：匹配任何后面跟着大写字母的字符。</li>
<li><code>(?=.*\d)</code>：匹配任何后面跟着数字的字符。</li>
<li><code>(?=.*\W)</code>：匹配任何后面跟着符号的字符。</li>
<li><code>.&#123;8,12&#125;</code>：匹配的长度至少为 8 个字符，至多为12个字符。</li>
<li><code>^</code>和<code>$</code>可以保证匹配从字符串的开头到结尾进行匹配，也就是只对整个密码进行匹配，不考虑部分匹配。</li>
</ul>
<p>下面是测试结果：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/54db9c6868f09bf4ad870215b01adce661a039.png" alt="图片"></p>
<h4 id="2、匹配邮箱"><a href="#2、匹配邮箱" class="headerlink" title="2、匹配邮箱"></a>2、匹配邮箱</h4><p>检查电子邮箱的地址：</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/^[a-zA-Z0-9.!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+@[a-zA-Z0-9-]+(?:\.[ a-zA-Z0-9-]+)*$/g<br></code></pre></td></tr></table></figure>

<p>下面来看一下这个正则表达式每一部分的含义：</p>
<ul>
<li><code>^[a-zA-Z0-9.!#$%&amp;&#39;*+/=?^_</code>~-]+<code>：检查是否使用了所有有效字符并且至少有了一个（末尾的</code>+&#96;用于检查是否至少有一个字符）。</li>
<li><code>[a-zA-Z0-9-]+</code>：这一部分用来检验主机名是否有效，主机名可以是大小写字母、数字、中横线。最后的 + 表示至少有一位。</li>
<li><code>(?:\.[a-zA-Z0-9-]+)*</code>：这一部分是可选的域名后缀，这里使用的<code>*</code> 就表示前面的字符是0个或者多个，这样.com、.com.cn等域名都可以匹配到。</li>
<li><code>^</code>和<code>$</code>可以保证匹配从字符串的开头到结尾进行匹配，也就是只对整个邮箱字符串进行匹配，不考虑部分匹配。</li>
</ul>
<p>下面是测试结果：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/b4187bf447b19bca446761a0fa036391de098c.gif" alt="图片"><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/382077a50f970c91788711fa9b79ad2f3df111.png" alt="图片"></p>
<h4 id="3、匹配数字"><a href="#3、匹配数字" class="headerlink" title="3、匹配数字"></a>3、匹配数字</h4><p>检查数字是否是整数:<code>/^\d+$/</code>,其中<code>\d+</code>表示至少有一位数字。测试结果如下：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/11474cb79a4c6551179648151b72567be0093b.png" alt="图片"></p>
<p>检查数字是否是小数：<code>/^\d*\.\d+$/</code>，其中<code>\d*</code> 表示至少有0位数字，<code>\.</code>就是把小数点进行了转义操作，<code>\d+</code>就表示至少有一位小数位。测试结果如下：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/1382efd509b70711327118c0f07c087ae582fb.png" alt="图片"></p>
<p>校验一个数字是不是一个金额：<code>/^\d+(.\d&#123;2&#125;)?$/</code>。</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/1964af4019c639106a790178ef316aec7bc322.png" alt="图片"></p>
<h3 id="八、实用工具"><a href="#八、实用工具" class="headerlink" title="八、实用工具"></a>八、实用工具</h3><h4 id="1、Regex101"><a href="#1、Regex101" class="headerlink" title="1、Regex101"></a>1、Regex101</h4><p>Regex101 是学习正则表达式最有效的工具网站之一。在REGULAR EXPRESSION栏中可以输入正则表达式，可以在输入框右侧选择需要的修饰符，在下面的TEST STRING栏中输入要测试的字符串，即可显示出匹配到的结果。在右侧的EXPLANATION区域会显示出对输入的正则表达式的详细解释。右下角的 QUICK REFERENCE 栏会显示正则表达式速查表。</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/6135cb53258ce64bc5c774e0a1648539da8ef2.png" alt="图片"></p>
<p>Regex101 还支持在上面练习编写正则表达式：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/f6f60ae5335fd5a512e256b0b0932bd62c7aec.png" alt="图片"></p>
<p>可以在上面搜索一些正则表达式的库：</p>
<p><img src="/2024/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/d2e42ef69c7b9c58d588089e7055647b7c040b.png" alt="图片"></p>
<p>除此之外，我们还可以使用 RegexDebugger 来跟踪匹配的过程。更多功能可以在Regex101 上进行探索。</p>
<p><strong>官网：</strong><a href="https://regex101.com/%E3%80%82">https://regex101.com/。</a></p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
  </entry>
  <entry>
    <title>浅谈Token,Cookie和Session</title>
    <url>/2023/09/19/%E6%B5%85%E8%B0%88Token-Cookie%E5%92%8CSession/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Token、Cookie 和 Session 都是在 Web 开发中用于身份认证和状态管理的重要概念。它们在不同的场景下用于不同的目的：</p>
<ol>
<li>Token（令牌）： Token 是一种用于身份认证的轻量级凭证。在 Web 开发中，常见的身份认证方式是基于 Token 的身份验证。当用户登录时，服务器会生成一个唯一的 Token，并将其发送给客户端（通常是通过 HTTP 头或响应体）。客户端随后在每个后续请求中将 Token 放在请求头或其他适当位置，以证明其身份。服务器可以验证 Token 的有效性，以确定用户是否已经登录或是否有权限访问特定资源。</li>
</ol>
<p>Token 的优点包括：</p>
<ul>
<li>无状态性：服务器不需要存储用户的登录状态，所有信息都包含在 Token 中。</li>
<li>跨平台：Token 可以在不同的客户端（例如 Web 应用、移动应用、API）中使用。</li>
</ul>
<ol>
<li>Cookie（Cookie 文件）： Cookie 是一种用于在客户端存储信息的小型文本文件。在 Web 开发中，Cookie 主要用于跟踪用户的会话信息和状态管理。当用户首次访问网站时，服务器可以在响应头中发送一个 Cookie 到客户端，客户端会将 Cookie 存储在本地，并在每个后续请求中将 Cookie 自动发送给服务器。服务器可以读取 Cookie 中的信息，例如用户的身份、用户偏好等。</li>
</ol>
<p>Cookie 的优点和特点包括：</p>
<ul>
<li>持久性：可以设置 Cookie 的过期时间，使其在客户端保留一段时间。</li>
<li>存储容量：由于每个 Cookie 都会被包含在请求头中，所以要谨慎使用大型 Cookie。</li>
</ul>
<ol>
<li>Session（会话）： Session 是一种用于在服务器端存储用户信息的机制。当用户首次访问网站时，服务器会为每个用户创建一个会话，并在服务端存储相关信息。随后的请求中，客户端会将会话 ID（通常通过 Cookie 或 URL 参数）发送给服务器，服务器根据会话 ID 查找对应的会话，并读取其中存储的信息。</li>
</ol>
<p>Session 的优点和特点包括：</p>
<ul>
<li>安全性：会话信息存储在服务器端，对客户端是不可见的，相对于 Cookie 更加安全。</li>
<li>存储容量：相对于 Cookie，会话可以存储更多的信息，因为不需要在每个请求中发送。</li>
</ul>
<h1 id="三者的局限性"><a href="#三者的局限性" class="headerlink" title="三者的局限性"></a>三者的局限性</h1><p>虽然 Token、Cookie 和 Session 都在 Web 开发中用于身份认证和状态管理，但它们也有各自的局限性：</p>
<ol>
<li>Token 的局限性：</li>
</ol>
<ul>
<li>安全性：Token 通常在客户端存储，并且无法对其内容进行修改。但如果 Token 泄漏或被盗用，攻击者可能会伪装成合法用户，因此需要采取额外的安全措施，如使用 HTTPS 来保护通信和限制 Token 的有效期。</li>
<li>大小限制：由于 Token 会在每个请求中发送，如果 Token 过大，可能会导致请求变得更大，从而影响性能。</li>
<li>不适用于所有场景：Token 通常用于无状态的 API 身份验证，不适用于需要在服务器端存储用户信息的场景。</li>
</ul>
<ol>
<li>Cookie 的局限性：</li>
</ol>
<ul>
<li>存储容量：Cookie 通常有大小限制（一般为 4KB），因此不能存储大量的信息。</li>
<li>安全性：Cookie 存储在客户端，可能会被篡改或被窃取，因此不适合存储敏感信息。</li>
<li>跨域限制：浏览器对跨域 Cookie 有限制，不同域的网站无法访问彼此的 Cookie。</li>
</ul>
<ol>
<li>Session 的局限性：</li>
</ol>
<ul>
<li>存储在服务器：Session 信息存储在服务器端，如果服务器出现故障或重启，会话信息可能丢失，需要使用一些机制来确保会话的持久性。</li>
<li>扩展性：如果应用具有多个服务器或服务器负载均衡，需要确保 Session 在多个服务器之间共享。</li>
</ul>
<p>综合来看，Token 在无状态 API 身份验证中具有优势，Cookie 适合存储少量非敏感信息且需要在客户端跨页面传递的情况，而 Session 适用于存储较多用户信息且需要在服务器端存储的场景。在选择身份认证和状态管理方式时，需要根据应用的具体需求和安全要求来做出合适的选择。</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>盛最多水的容器</title>
    <url>/2023/12/12/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="力扣-11-盛最多水的容器"><a href="#力扣-11-盛最多水的容器" class="headerlink" title="力扣-11.盛最多水的容器"></a>力扣-11.盛最多水的容器</h3><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p>
<p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p>
<p>返回容器可以储存的最大水量。</p>
<p><strong>说明：</strong>你不能倾斜容器。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/2023/12/12/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/question_11.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：[1,8,6,2,5,4,8,3,7]<br>输出：49 <br>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。<br></code></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：height = [1,1]<br>输出：1<br></code></pre></td></tr></table></figure>

<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题可以使用双指针的方法来解决。首先初始化左指针指向数组的起始位置，右指针指向数组的结束位置。然后，计算当前左右指针所指的两条垂直线构成的容器的面积。面积的计算公式是:面积&#x3D;(右指针-左指针)*min(左指针的高度右指针的高度)。接下来，移动指针的原则是: 每次移动高度较小的指针，这样才有可能找到更高的垂直线，从而使容器的面积更大。不断移动指针，并更新最大的面积值，直到左右指针相遇</p>
<h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var maxArea = function(height) &#123;<br>    let left = 0<br>    let right = height.length - 1<br>    let maxarea = 0<br>    while(left &lt; right)&#123;<br>        let minHeight = Math.min(height[left],height[right])<br>        let area = minHeight * (right - left)<br>        maxarea = Math.max(maxarea,area)<br>        if(height[left] &lt; height[right])&#123;<br>            left++<br>        &#125;else&#123;<br>            right--<br>        &#125;<br>    &#125;<br>    return maxarea<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>时间复杂度分析: </p>
<p>双指针移动的过程中，每次向内移动一个指针，直到左右指针相遇。因此，每个指针最多移动n-1次。所以总的时间复杂度为0(n)，其中n是数组的长度</p>
<p>空间复杂度分析: </p>
<p>只使用了几个变量来存储指针的位置和当前的最大面积值，没有使用额外的数据结构。所以空间复杂度是0(1)。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>手撕</tag>
      </tags>
  </entry>
  <entry>
    <title>重排(回流)和重绘</title>
    <url>/2023/12/09/%E9%87%8D%E6%8E%92-%E5%9B%9E%E6%B5%81-%E5%92%8C%E9%87%8D%E7%BB%98/</url>
    <content><![CDATA[<h5 id="重排-Reflow-："><a href="#重排-Reflow-：" class="headerlink" title="重排(Reflow)："></a>重排(Reflow)：</h5><p>元素的位置发生变动时发生重排，也叫<code>回流</code>。此时在关键渲染路径(浏览器将html，css和js转换为屏幕上的像素所经历的步骤序列)中的 Layout 阶段，计算每一个元素在设备视口内的确切位置和大小。当一个元素位置发生变化时，其父元素及其后边的元素位置都可能发生变化，代价极高</p>
<h5 id="重绘-Repaint"><a href="#重绘-Repaint" class="headerlink" title="重绘(Repaint):"></a>重绘(Repaint):</h5><p>元素的样式发生变动，但是位置没有改变。此时在关键渲染路径中的 Paint 阶段，将渲染树中的每个节点转换成屏幕上的实际像素，这一步通常称为绘制或栅格化</p>
<p>​																		<strong>重绘不一定会出现重排，重排必然会触发重绘</strong></p>
<h5 id="如何触发重排和重绘"><a href="#如何触发重排和重绘" class="headerlink" title="如何触发重排和重绘"></a>如何触发重排和重绘</h5><p>任何改变用来构建渲染树的信息都会导致一次重排或重绘：</p>
<p>添加，删除，更新dom节点</p>
<p>通过display: none隐藏一个DOM节点-触发重排和重绘</p>
<p>通过visibility: hidden隐藏一个DOM节点-只触发重绘，因为没有几何变化</p>
<p>用户行为，例如调整窗口大小，改变字号或滚动。</p>
<h5 id="如何减少重排和重绘"><a href="#如何减少重排和重绘" class="headerlink" title="如何减少重排和重绘"></a>如何减少重排和重绘</h5><p>减小重排范围：脱离文档流(使用absolute或fixed脱离文档流)</p>
<p>减少重绘次数：合并样式修改</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>前端实现水印的几种方案</title>
    <url>/2023/10/08/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%8D%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>水印可以用于保护内容的版权，提供额外信息，或者美化页面。本文将探讨几种常见的前端水印方案，更好地理解如何实现水印效果。</p>
<h2 id="1-使用CSS伪元素添加水印"><a href="#1-使用CSS伪元素添加水印" class="headerlink" title="1. 使用CSS伪元素添加水印"></a>1. 使用CSS伪元素添加水印</h2><p>使用CSS伪元素是一种简单而灵活的方式来添加水印，以下是一个示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/* 示例代码 */<br>&lt;div class=&quot;watermark&quot;&gt;&lt;/div&gt;<br>.watermark::before &#123;<br>  content: &quot;我是水印&quot;;<br>  position: fixed;<br>  top: 50%;<br>  left: 50%;<br>  transform: translate(-50%, -50%);<br>  opacity: 0.5;<br>  font-size: 48px;<br>  color: #ccc;<br>  pointer-events: none;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>效果如下图所示：</strong></p>
<p><img src="/2023/10/08/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%8D%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/640.png" alt="图片">CSS伪元素水印效果</p>
<p>在这个示例中，我们使用了CSS伪元素 <code>::before</code> 来创建水印。以下是各个CSS属性的解释：</p>
<ul>
<li><code>content</code>：定义了水印的文本内容。</li>
<li><code>position: fixed</code>：将水印固定在屏幕上，不随页面滚动而移动。</li>
<li><code>top</code> 和 <code>left</code>：将水印放置在页面的中央。</li>
<li><code>transform</code>：通过 <code>translate</code> 函数来调整水印的位置。</li>
<li><code>opacity</code>：设置水印的透明度。</li>
<li><code>font-size</code> 和 <code>color</code>：定义水印的字体大小和颜色。</li>
<li><code>pointer-events: none</code>：防止水印干扰用户的交互操作。</li>
</ul>
<h2 id="2-使用Canvas绘制水印"><a href="#2-使用Canvas绘制水印" class="headerlink" title="2. 使用Canvas绘制水印"></a>2. 使用Canvas绘制水印</h2><p>使用Canvas绘制水印是一种高度可定制的方式，以下是一个示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;!-- 示例代码 --&gt;<br>&lt;canvas id=&quot;watermarkCanvas&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/canvas&gt;<br><br>&lt;script&gt;<br>  const canvas = document.getElementById(&quot;watermarkCanvas&quot;);<br>  const context = canvas.getContext(&quot;2d&quot;);<br><br>  const image = new Image();<br>  image.src = &quot;your-image.jpg&quot;; // 你的图片URL<br><br>  image.onload = function() &#123;<br>    context.drawImage(image, 0, 0, canvas.width, canvas.height);<br><br>    context.font = &quot;48px Arial&quot;;<br>    context.fillStyle = &quot;rgba(255, 0, 0, 0.5)&quot;;<br>    context.fillText(&quot;Watermark Text&quot;, 50, 50);<br>  &#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>在这个示例中，我们创建了一个Canvas元素，并使用JavaScript来绘制水印。以下是示例中的关键点：</p>
<ul>
<li><code>&lt;canvas&gt;</code> 元素用于创建一个画布，其中指定了宽度和高度。</li>
<li>通过JavaScript加载了一个图片，并使用 <code>drawImage</code> 方法将图片绘制到Canvas上。</li>
<li>使用 <code>font</code> 和 <code>fillStyle</code> 属性定义了水印的字体和颜色。</li>
<li>使用 <code>fillText</code> 方法在Canvas上绘制水印文本。</li>
</ul>
<h2 id="3-使用CSS重复背景图片"><a href="#3-使用CSS重复背景图片" class="headerlink" title="3. 使用CSS重复背景图片"></a>3. 使用CSS重复背景图片</h2><p>使用CSS来添加重复水印的方法是将水印图片作为背景图片，并使用 <code>background-repeat</code> 属性来实现重复效果，以下是一个示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;!-- 示例代码 --&gt;<br>&lt;style&gt;<br>  .watermarked-element &#123;<br>    width: 100%;<br>    height: 100%;<br>    background-image: url(&#x27;watermark.png&#x27;); /* 水印图片的URL */<br>    background-repeat: repeat; /* 重复水印图片 */<br>    opacity: 0.5; /* 设置水印透明度 */<br>    pointer-events: none; /* 防止水印干扰用户交互 */<br>  &#125;<br>&lt;/style&gt;<br><br>&lt;div class=&quot;watermarked-element&quot;&gt;<br>  &lt;!-- 页面内容 --&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>

<p>在这个示例中，我们创建了一个包含水印的容器元素 <code>.watermarked-element</code>，并将水印图片设置为背景图片。通过设置 <code>background-repeat: repeat;</code>，水印图片会在容器内重复显示。通过调整 <code>opacity</code> 属性，可以控制水印的透明度。最后，使用 <code>pointer-events: none;</code> 可以防止水印干扰用户的交互操作。</p>
<p>这种方法适用于需要在整个页面或特定元素上添加水印的情况，且不需要通过Canvas来绘制水印。</p>
<h2 id="4-使用SVG图像"><a href="#4-使用SVG图像" class="headerlink" title="4. 使用SVG图像"></a>4. 使用SVG图像</h2><p>使用SVG图像创建矢量图形水印，嵌入到网页中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;!-- 示例代码 --&gt;<br>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;<br>  &lt;text x=&quot;10&quot; y=&quot;40&quot; font-family=&quot;Arial&quot; font-size=&quot;24&quot; fill=&quot;rgba(255, 0, 0, 0.5)&quot;&gt;<br>    Watermark Text<br>  &lt;/text&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure>

<p>在这个示例中，我们使用SVG（可缩放矢量图形）来创建水印。以下是关于SVG的解释：</p>
<ul>
<li><code>&lt;svg&gt;</code> 元素用于创建SVG图像。</li>
<li><code>&lt;text&gt;</code> 元素用于在SVG中添加文本。</li>
<li><code>x</code> 和 <code>y</code> 属性用于定位文本的位置。</li>
<li><code>font-family</code> 和 <code>font-size</code> 属性定义了水印的字体和大小。</li>
<li><code>fill</code> 属性定义了文本的颜色和透明度。</li>
</ul>
<h2 id="5-使用第三方库"><a href="#5-使用第三方库" class="headerlink" title="5. 使用第三方库"></a>5. 使用第三方库</h2><p>第三方库如 watermark.js 提供了便捷的水印添加方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;!-- 示例代码 --&gt;<br>&lt;script src=&quot;watermark.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>  const watermarkConfig = &#123;<br>    watermarkText: &quot;<br><br>Watermark Text&quot;,<br>    watermarkTextFont: &quot;24px Arial&quot;,<br>    watermarkTextColor: &quot;rgba(255, 0, 0, 0.5)&quot;,<br>  &#125;;<br>  <br>  watermark.init(watermarkConfig);<br>  watermark.load(&#123;<br>    watermark_x: 20,<br>    watermark_y: 20,<br>  &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>在这个示例中，我们使用第三方库 <code>watermark.js</code> 来添加水印。你可以根据需要配置水印的文本、字体、颜色等属性，并使用库提供的方法进行初始化和加载。</p>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文介绍了几种前端实现水印的方案，可以根据具体项目选择适合的方法来实现水印效果。不管选择哪种方式，都要注意水印不会影响用户体验。</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
  </entry>
  <entry>
    <title>防抖和节流</title>
    <url>/2023/11/18/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>防抖<code>（Debounce）</code>和节流<code>（Throttle）</code>是前端开发中最常用的优化处理方式，本文介绍防抖和节流的区别，应用场景，手撕代码，介绍相关可以直接在项目中使用的库。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>简单的定义区分：</p>
<ul>
<li>防抖是一段时间内，多次执行变为只执行<code>最后一次</code>。</li>
<li>节流是一段时间内，多次执行变为只执行<code>第一次</code>。</li>
</ul>
<p>详细的定义区分：</p>
<ul>
<li><p>防抖<code>（debounce）</code>是指在一段时间内多次触发相同事件时，只执行最后一次触发的事件。</p>
<p>这意味着，在一系列触发事件中，如果在指定的时间间隔内，发生了新的触发事件，那么前面的触发事件将被忽略，只有最后一次触发事件会被执行。</p>
</li>
<li><p>节流<code>（throttle）</code>是指在一段时间内多次触发相同事件时，只执行一次事件。</p>
<p>这意味着，无论触发事件发生多少次，在指定的时间间隔内只会执行第一次事件。</p>
</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>真实的项目中，在不同的场景下灵活切换使用防抖或节流，才会更加减少不必要的资源消耗，更加提高前端应用的性能和响应性。</p>
<p>防抖<code>（Debounce）</code>的应用场景：</p>
<ul>
<li><p>搜索框输入：当用户在搜索框中输入内容时，可以使用防抖来延迟触发搜索请求。只有在用户停止输入一段时间后才会发送请求，避免频繁的请求发送。</p>
</li>
<li><p>窗口调整：当窗口大小调整时，可以使用防抖来优化执行某些操作的频率，例如重新计算布局或重新渲染页面。</p>
</li>
<li><p>按钮点击：当用户点击一个按钮时，可以使用防抖来确保只有在用户停止点击一段时间后才会执行相应的操作，避免误操作或重复执行。</p>
</li>
</ul>
<p>1. </p>
<p>节流<code>（Throttle）</code>的应用场景：</p>
<ul>
<li><p>页面滚动：当用户滚动页面时，可以使用节流来限制触发滚动事件的频率。例如，在滚动过程中只执行某些操作的固定时间间隔，以减少事件处理的次数。</p>
</li>
<li><p>鼠标移动：当用户移动鼠标时，可以使用节流来控制触发鼠标移动事件的频率。例如，在一定时间内只执行一次鼠标移动的处理逻辑，避免过多的计算和渲染操作。</p>
</li>
<li><p>实时通信：在实时通信应用中，如聊天应用或在线协作工具，可以使用节流来限制发送消息的频率，以避免发送过多的请求或数据。</p>
</li>
</ul>
<h3 id="手撕代码"><a href="#手撕代码" class="headerlink" title="手撕代码"></a>手撕代码</h3><p>下面是利用国产AI工具codegeex在项目中生成的防抖节流的ts代码</p>
<p><img src="/2023/11/18/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/21E557D31DA1098C4B5F1CA272CF7CF8.png" alt="img"></p>
<h3 id="相关函数库"><a href="#相关函数库" class="headerlink" title="相关函数库"></a>相关函数库</h3><p>上面手撕的代码作为面试的准备，实际项目中肯定不会这么使用，不然会被喷的。Vue等真实项目中，往往都会调用第三方库的函数。下面介绍一个我使用的函数库</p>
<ul>
<li>VueUse <code>(https://vueuse.org/)</code>：VueUse 是一个提供常用 Vue.js 自定义函数的库，其中包括了防抖和节流函数的实现。在 VueUse 中，您可以使用 useDebounce 和 useThrottle 这两个自定义函数来实现防抖和节流功能。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">import &#123; useDebounce, useThrottle &#125; from &#x27;@vueuse/core&#x27;;<br><br>// 防抖<br>// 在值变化后延迟500毫秒触发<br>const debouncedValue = useDebounce(value, 500); <br><br>// 节流<br>// 将函数封装为节流函数，每300毫秒触发一次<br>const throttledFunction = useThrottle(myFunction, 300); <br><br>// 在 Vue 组件中使用防抖和节流<br>export default &#123;<br>  setup() &#123;<br>    const debouncedValue = useDebounce(value, 500);<br>    const throttledFunction = useThrottle(myFunction, 300);<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>防抖和节流都是为了限制函数的执行频率，以优化函数触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿。</p>
]]></content>
      <categories>
        <category>前端充电宝</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>面试如何回答JSON.stringify的使用场景</title>
    <url>/2023/09/17/%E9%9D%A2%E8%AF%95%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94JSON-stringify%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<p>当面试被问到JSON.stringify 的作用意义该如何回答呢。网上查到的八股文答案基本都这样回答：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">JSON.stringify(value,replacer,space)<br></code></pre></td></tr></table></figure>

<p><em><strong>它是一个用于序列化对象的方法，接受三个参数，第一个参数是要被序列化的对象，接受对象或数组类型。第二个参数用于标记需要序列化的属性，接受数组和函数类型。第三个参数用于描述序列化后的缩进字符数，用于美化格式</strong></em>。当然这样的回答也没有错，不过面试考察的更多是我们的实际应用能力以及实战场景，如果只回答八股文的内容，更多的只能体现背诵能力，所以今天整理了 JSON.stringify 的实际应用场景。</p>
<h3 id="场景一：localStorage-的存储"><a href="#场景一：localStorage-的存储" class="headerlink" title="场景一：localStorage 的存储"></a><strong>场景一：localStorage 的存储</strong></h3><p>前端 localStorage 中只能接受字符串的存储类型，而且它是一个 KV 的结构，我们尝试模拟<em><strong>存储一个对象</strong></em>这种场景：</p>
<p><img src="/2023/09/17/%E9%9D%A2%E8%AF%95%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94JSON-stringify%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/640.png" alt="图片"></p>
<p>我们会发现是存储失败的，我们没有办法把整个 obj 存储到 localStorage 中，所以在这种场景下，我们就需要用到 JSON.stringify，把对象先序列化再进行存储：</p>
<p><img src="/2023/09/17/%E9%9D%A2%E8%AF%95%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94JSON-stringify%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/640-16949602020901.png" alt="图片"></p>
<p>我们发现这样是可以存储成功的，我们只需要把存进去的对象再进行一次 JSON.parse：</p>
<p><img src="/2023/09/17/%E9%9D%A2%E8%AF%95%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94JSON-stringify%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/640-16949602020902.png" alt="图片"></p>
<p>整个过程我们就可以把对象给存储进去，同时能提取出来，这样就ok了。</p>
<h3 id="场景二：对象的深拷贝"><a href="#场景二：对象的深拷贝" class="headerlink" title="场景二：对象的深拷贝"></a><strong>场景二：对象的深拷贝</strong></h3><p>JS 中的对象它都是一个引用的类型。</p>
<p><img src="/2023/09/17/%E9%9D%A2%E8%AF%95%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94JSON-stringify%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/640-16949602020903.png" alt="图片"></p>
<p>如上图把obj赋予给objA，当改动objA里面的a属性，本质上其实在obj里面的a属性它也被改动了，那怎么样解决这个问题呢？这里可以利用 JSON.stringify 以及 JSON.parse 给做一次对象的深复制，具体应用是这样的：</p>
<p><img src="/2023/09/17/%E9%9D%A2%E8%AF%95%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94JSON-stringify%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/640-16949602020904.png" alt="图片"></p>
<p>我们用 JSON.stringify 序列化一次这个obj，再把它解析出来，最后的结果赋予给objB，这时候我改动objB里面的a属性，但obj里面的属性并没有进行变化，这样的话我们就成功的做了一次深度复制，这也是 JSON.parse 一个巧妙的应用。</p>
<h3 id="场景三：删除对象属性"><a href="#场景三：删除对象属性" class="headerlink" title="场景三：删除对象属性"></a><strong>场景三：删除对象属性</strong></h3><p>如果我们需要删除对象中某个属性，也可以利用 JSON.stringify 去实现，比如说下面这个对象我们要把b属性删掉，可以利用 JSON.stringify 的第二个参数去巧妙应用：</p>
<p><img src="/2023/09/17/%E9%9D%A2%E8%AF%95%E5%A6%82%E4%BD%95%E5%9B%9E%E7%AD%94JSON-stringify%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/640-16949602020905.png" alt="图片"></p>
<p>第二个参数接受一个方法，方法接受两个参数，一个是key，一个是value，我们可以在里面写逻辑，如果key&#x3D;&#x3D;&#x3D;’b’，这时候我们返回undefine，否则的话我们把 value 返回，这时候我们就可以得到一个没有b属性的一个序列化的字符串，我们再把这个字符串给 JSON.parse 回来，就可以得到消除 b 之后的一个对象，这也是 JSON.stringify 的一个巧妙应用。</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>基于echarts的客户消费记账单</title>
    <url>/2023/08/04/%E5%9F%BA%E4%BA%8Eecharts%E7%9A%84%E5%AE%A2%E6%88%B7%E8%AE%B0%E8%B4%A6%E5%8D%95/</url>
    <content><![CDATA[<h1 id="Vue小案例：基于echarts的客户消费记账单"><a href="#Vue小案例：基于echarts的客户消费记账单" class="headerlink" title="Vue小案例：基于echarts的客户消费记账单"></a>Vue小案例：基于echarts的客户消费记账单</h1><blockquote>
<p>  本文是在学习了ajax, vue2的一些基本语法知识，如指令, 计算属性, 生命周期等.以及在接触了echarts这款基于JS的数据可视化图库表和bootstrap框架后,为巩固所学做的小小案例.</p>
</blockquote>
<h4 id="涉及的一些知识分析可查看代码的详细注释"><a href="#涉及的一些知识分析可查看代码的详细注释" class="headerlink" title="涉及的一些知识分析可查看代码的详细注释"></a>涉及的一些知识分析可查看代码的详细注释</h4><h4 id="网页效果如下"><a href="#网页效果如下" class="headerlink" title="网页效果如下"></a>网页效果如下</h4><p><img src="/2023/08/04/%E5%9F%BA%E4%BA%8Eecharts%E7%9A%84%E5%AE%A2%E6%88%B7%E8%AE%B0%E8%B4%A6%E5%8D%95/1.png"></p>
<h4 id="完整代码实现如下-可按需取用"><a href="#完整代码实现如下-可按需取用" class="headerlink" title="完整代码实现如下,可按需取用"></a>完整代码实现如下,可按需取用</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>小菜记账清单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- CSS only --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.red</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.search</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.my-form</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.my-form</span> <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.table</span>&gt; <span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:first</span>-child) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-top</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.contain</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.list-box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.list-box</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.echarts-box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">tfoot</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1000px</span>) &#123;</span><br><span class="language-css">            <span class="hljs-selector-class">.contain</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.list-box</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.echarts-box</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contain&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 左侧列表 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-box&quot;</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 添加资产 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-form&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;消费名称&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;price&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;消费价格&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>添加账单<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>消费名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>消费价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list &quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; red: item.price&gt;500 &#125;&quot;</span>&gt;</span>&#123;&#123;item.price.toFixed(2)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>消费总计: &#123;&#123;totalPrice.toFixed(2)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 右侧图表 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;echarts-box&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 接口文档地址：</span></span><br><span class="hljs-comment"><span class="language-javascript">         * https://www.apifox.cn/apidoc/shared-24459455-ebb1-4fdc-8df8-0aff8dc317a8/api-53371058</span></span><br><span class="hljs-comment"><span class="language-javascript">         * </span></span><br><span class="hljs-comment"><span class="language-javascript">         * 功能需求：</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 1. 基本渲染</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 2. 添加功能</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 3. 删除功能</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 4. 饼图渲染</span></span><br><span class="hljs-comment"><span class="language-javascript">         *  *    (1) 初始化一个饼图 echarts.init(dom)  mounted钩子实现</span></span><br><span class="hljs-comment"><span class="language-javascript">            *    (2) 根据数据实时更新饼图 echarts.setOption(&#123; ... &#125;)</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">         */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">list</span>: [],</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">async</span> <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://applet-base-api-t.itheima.net/bill&#x27;</span>, &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">creator</span>: <span class="hljs-string">&#x27;小黑&#x27;</span></span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 更新图表</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(&#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">series</span>: [&#123;</span><br><span class="language-javascript">                            <span class="hljs-comment">// 箭头函数返回对象要用括号包住</span></span><br><span class="language-javascript">                            <span class="hljs-attr">data</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (&#123;<span class="hljs-attr">value</span>: item.<span class="hljs-property">price</span>, <span class="hljs-attr">name</span>: item.<span class="hljs-property">name</span>&#125;))</span><br><span class="language-javascript">                        &#125;]</span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-keyword">async</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请输入消费名称&#x27;</span>)</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请输入正确的消费价格&#x27;</span>)</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 发送添加请求</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;https://applet-base-api-t.itheima.net/bill&#x27;</span>, &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">creator</span>: <span class="hljs-string">&#x27;小黑&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">price</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span></span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                    <span class="hljs-comment">// 重新渲染一遍</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getList</span>()</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-keyword">async</span> <span class="hljs-title function_">del</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`https://applet-base-api-t.itheima.net/bill/<span class="hljs-subst">$&#123;id&#125;</span>`</span>)</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getList</span>()</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">totalPrice</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item.<span class="hljs-property">price</span>, <span class="hljs-number">0</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-keyword">async</span> <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://www.apifox.cn/apidoc/shared-24459455-ebb1-4fdc-8df8-0aff8dc317a8/api-53371058&#x27;</span>, &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">creator</span>: <span class="hljs-string">&#x27;小黑&#x27;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span> = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#main&#x27;</span>))</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 大标题</span></span><br><span class="language-javascript">                <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;消费账单列表&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;center&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 提示框</span></span><br><span class="language-javascript">                <span class="hljs-attr">tooltip</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 图例</span></span><br><span class="language-javascript">                <span class="hljs-attr">legend</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 对齐方式</span></span><br><span class="language-javascript">                    <span class="hljs-attr">orient</span>: <span class="hljs-string">&#x27;vertical&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;left&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 数据项</span></span><br><span class="language-javascript">                <span class="hljs-attr">series</span>: [</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;消费账单&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-comment">// 类型是饼图</span></span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>: [],</span><br><span class="language-javascript">                    <span class="hljs-attr">emphasis</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">itemStyle</span>:&#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">10</span>,</span><br><span class="language-javascript">                            <span class="hljs-attr">shadowOffsetX</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">                            <span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&#x27;rgba(0,0,0,0.5)&#x27;</span></span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vue小案例</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>最长回文子串</title>
    <url>/2024/02/09/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="力扣-5-最长回文子串"><a href="#力扣-5-最长回文子串" class="headerlink" title="力扣-5.最长回文子串"></a>力扣-5.最长回文子串</h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;babad&quot;<br>输出：&quot;bab&quot;<br>解释：&quot;aba&quot; 同样是符合题意的答案。<br></code></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;cbbd&quot;<br>输出：&quot;bb&quot;<br></code></pre></td></tr></table></figure>



<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>采用动态规划的思想，数组<code>dp[i][j]</code>用于表示从i到j的字符串是否为回文字符串。初始化<code>dp[i][i]</code>为true，因为单个字符必为回文字符串。随后确定j的取值范围为[1,length-1],i的取值范围为[0,length-2]。当s[i]!&#x3D;s[j]时,<code>dp[i][j]</code>设为false。相等时判断如果 j - i &lt; 3，即a,aa,aba这三种情况必为回文字符串，可以直接设<code>dp[i][j]</code>为ture。不满足j - i &lt; 3,则<code>dp[i][j]</code>&#x3D;<code>dp[i+1][j-1]</code>。</p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var longestPalindrome = function(s) &#123;<br>    let length = s.length<br>    if(length &lt;= 1) return s<br>    let c = Array.from(s) //字符串s转为数组<br>    //初始化dp<br>    let dp = new Array(length).fill(false).map(()=&gt;new Array(length).fill(false))<br>    //<br>    for(let i = 0;i &lt; length;i ++)&#123;<br>        dp[i][i] = true<br>    &#125;<br>    let max = 1<br>    let start = 0<br>    for(let j = 1;j &lt; length;j ++)&#123;<br>        for(let i = 0;i &lt; length-1 &amp;&amp;i &lt; j;i ++)&#123;<br>            if(c[i]!=c[j])&#123;<br>                dp[i][j] = false<br>            &#125;else&#123;<br>                if(j - i &lt; 3)&#123;<br>                    dp[i][j] = true<br>                &#125;else&#123;<br>                    dp[i][j] = dp[i+1][j-1]<br>                &#125;<br>            &#125;<br>            if(dp[i][j] &amp;&amp; j - i + 1 &gt; max)&#123;<br>            max = j - i + 1<br>            start = i<br>            &#125;<br>        &#125; <br>    &#125;<br>    return s.substring(start, start + max)<br>&#125;;<br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>手撕</tag>
      </tags>
  </entry>
  <entry>
    <title>岛屿数量</title>
    <url>/2024/02/10/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<h3 id="力扣-200-岛屿的数量"><a href="#力扣-200-岛屿的数量" class="headerlink" title="力扣-200.岛屿的数量"></a>力扣-200.岛屿的数量</h3><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>
<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和&#x2F;或竖直方向上相邻的陆地连接形成。</p>
<p>此外，你可以假设该网格的四条边均被水包围。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：grid = [<br>  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],<br>  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],<br>  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],<br>  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]<br>]<br>输出：1<br></code></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：grid = [<br>  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],<br>  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],<br>  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],<br>  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]<br>]<br>输出：3<br></code></pre></td></tr></table></figure>

<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>采用递归的方式，首先遍历数组元素。当遇到1时，将该元素赋值为0，当该元素上下左右四个方向有元素为1时，则继续递归，递归结束证明该岛屿所有板块找到，数量+1，继续遍历。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var numIslands = function(grid) &#123;<br>    function recursion(i,j)&#123;<br>        // 将该元素置0<br>        grid[i][j] = 0<br>        // 上下左右四个方向有元素为1时，则继续递归<br>        if(i+1&lt;m &amp;&amp; grid[i+1][j]==1) recursion(i+1,j)<br>        if(i-1&gt;=0 &amp;&amp; grid[i-1][j]==1) recursion(i-1,j)<br>        if(j+1&lt;n &amp;&amp; grid[i][j+1]==1) recursion(i,j+1)<br>        if(j-1&gt;=0 &amp;&amp; grid[i][j-1]==1) recursion(i,j-1)<br>    &#125;<br>    let m = grid.length<br>    let n = grid[0].length<br>    //记录岛屿数量<br>    let cnt = 0<br>    //遍历数组元素<br>    for(let i = 0;i &lt; m;i ++)&#123;<br>        for(let j = 0;j &lt; n;j ++)&#123;<br>            //当遇到1时执行递归<br>            if(grid[i][j] == 1)&#123;<br>                recursion(i,j)<br>                // 递归结束，岛的数量+1<br>                cnt++<br>            &#125;<br>        &#125;<br>    &#125;<br>    return cnt<br>&#125;;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>手撕</tag>
      </tags>
  </entry>
  <entry>
    <title>复原IP地址</title>
    <url>/2024/02/11/%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h3 id="力扣-93-复原IP地址"><a href="#力扣-93-复原IP地址" class="headerlink" title="力扣-93.复原IP地址"></a>力扣-93.复原IP地址</h3><p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 <code>0</code> 到 <code>255</code> 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>&#39;.&#39;</code> 分隔。</p>
<ul>
<li>例如：<code>&quot;0.1.2.201&quot;</code> 和<code> &quot;192.168.1.1&quot;</code> 是 <strong>有效</strong> IP 地址，但是 <code>&quot;0.011.255.245&quot;</code>、<code>&quot;192.168.1.312&quot;</code> 和 <code>&quot;192.168@1.1&quot;</code> 是 <strong>无效</strong> IP 地址。</li>
</ul>
<p>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能的<strong>有效 IP 地址</strong>，这些地址可以通过在 <code>s</code> 中插入 <code>&#39;.&#39;</code> 来形成。你 <strong>不能</strong> 重新排序或删除 <code>s</code> 中的任何数字。你可以按 <strong>任何</strong> 顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;25525511135&quot;<br>输出：[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]<br></code></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;0000&quot;<br>输出：[&quot;0.0.0.0&quot;]<br></code></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;101023&quot;<br>输出：[&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]<br></code></pre></td></tr></table></figure>

<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>使用递归回溯，对字符串进行1到3个字符分隔，并进行搜索，最后筛选出满足要求的作为答案。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var restoreIpAddresses = function(s) &#123;<br><br>    let outputArr = []<br>    //index当前字符串位置,selectArr已经选择的子串数组<br>    function recursion(index,selectArr)&#123;<br>        // 如果已经选择了4个子串<br>       if(selectArr.length == 4)&#123;<br>           // 如果刚好将字符串分割为4个子串，证明能复原IP地址，添加结果<br>            if(index == s.length)<br>            outputArr.push(selectArr.join(&#x27;.&#x27;))<br>            // 如果分割后还存在字符，证明无法复原，舍去<br>            else return<br>        &#125;<br>        // 如果当前索引已经超出数组范围，则直接return<br>        if(index &gt;= s.length) return<br>        // 三种切割长度截取字符串<br>        for(let i = 1;i &lt;= 3;i ++)&#123;<br>            // 获得三种切割长度的字符串<br>            let perString = s.slice(index,index+i)<br>            // 判断是否满足IP单个片段的要求<br>            if(i&gt;1&amp;&amp;perString*1&lt;256&amp;&amp;perString[0]!=&#x27;0&#x27;||i==1)<br>            //满足则继续递归<br>            recursion(index+i,[...selectArr,perString])<br>        &#125;<br>    &#125;<br>    recursion(0,[])<br>    return outputArr<br>&#125;;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>手撕</tag>
      </tags>
  </entry>
  <entry>
    <title>用栈(队列)实现队列(栈)</title>
    <url>/2024/02/13/%E7%94%A8%E6%A0%88-%E9%98%9F%E5%88%97-%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97-%E6%A0%88/</url>
    <content><![CDATA[<h3 id="力扣-232-用栈实现队列"><a href="#力扣-232-用栈实现队列" class="headerlink" title="力扣-232. 用栈实现队列"></a>力扣-232. 用栈实现队列</h3><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>
<p>实现 <code>MyQueue</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>
<li><code>int pop()</code> 从队列的开头移除并返回元素</li>
<li><code>int peek()</code> 返回队列开头的元素</li>
<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>
</ul>
<p><strong>说明：</strong></p>
<ul>
<li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li>
<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：<br>[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]<br>[[], [1], [2], [], [], []]<br>输出：<br>[null, null, null, 1, 1, false]<br><br>解释：<br>MyQueue myQueue = new MyQueue();<br>myQueue.push(1); // queue is: [1]<br>myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)<br>myQueue.peek(); // return 1<br>myQueue.pop(); // return 1, queue is [2]<br>myQueue.empty(); // return false<br></code></pre></td></tr></table></figure>

<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>需要两个栈，一个输入栈，一个输出栈。在push数据的时候只需将数据放进输入栈。在pop数据时，若输出栈为空，就把输入栈中的数据<strong>全部弹出导入</strong>，再从输出栈弹出数据。如果输出栈不为空，则直接从输出栈弹出数据即可。如果输入栈和输出栈都为空的话，说明模拟的队列为空了。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var MyQueue = function() &#123;<br>    this.in = []<br>    this.out = []<br>&#125;;<br><br>/** <br> * @param &#123;number&#125; x<br> * @return &#123;void&#125;<br> */<br>MyQueue.prototype.push = function(x) &#123;<br>    this.in.push(x)<br>&#125;;<br><br>/**<br> * @return &#123;number&#125;<br> */<br>MyQueue.prototype.pop = function() &#123;<br>    if(!this.out.length)&#123;<br>        while(this.in.length)&#123;<br>            this.out.push(this.in.pop())<br>        &#125;<br>    &#125;<br>    return this.out.pop()<br>&#125;;<br><br>/**<br> * @return &#123;number&#125;<br> */<br>MyQueue.prototype.peek = function() &#123;<br>    let peekNum = this.pop()<br>    this.out.push(peekNum)<br>    return peekNum<br>&#125;;<br><br>/**<br> * @return &#123;boolean&#125;<br> */<br>MyQueue.prototype.empty = function() &#123;<br>    return !this.in.length &amp;&amp; !this.out.length<br>&#125;;<br></code></pre></td></tr></table></figure>

<h3 id="力扣-225-用队列实现栈"><a href="#力扣-225-用队列实现栈" class="headerlink" title="力扣-225. 用队列实现栈"></a>力扣-225. 用队列实现栈</h3><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p>
<p>实现 <code>MyStack</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 压入栈顶。</li>
<li><code>int pop()</code> 移除并返回栈顶元素。</li>
<li><code>int top()</code> 返回栈顶元素。</li>
<li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>你只能使用队列的基本操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</li>
<li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">输入：<br>[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]<br>[[], [1], [2], [], [], []]<br>输出：<br>[null, null, null, 2, 2, false]<br><br>解释：<br>MyStack myStack = new MyStack();<br>myStack.push(1);<br>myStack.push(2);<br>myStack.top(); // 返回 2<br>myStack.pop(); // 返回 2<br>myStack.empty(); // 返回 False<br></code></pre></td></tr></table></figure>

<h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>使用两个队列：队列1用于入栈，队列2用于备份队列1最后一个元素以外的元素。当需要出栈的时候，队列1中最后一个元素以外的元素备份到队列2中(使用一个队列：也可以直接将队列1中最后一个元素以外的元素shift后push到队列1中)，接下来弹出(pop)队列1中最后的元素，将队列2中备份的元素重新存储到队列1.</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="使用两个队列"><a href="#使用两个队列" class="headerlink" title="使用两个队列"></a>使用两个队列</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var MyStack = function() &#123;<br>    this.queue1 = []<br>    this.queue2 = []<br>&#125;;<br><br>/** <br> * @param &#123;number&#125; x<br> * @return &#123;void&#125;<br> */<br>MyStack.prototype.push = function(x) &#123;<br>    this.queue1.push(x)<br>&#125;;<br><br>/**<br> * @return &#123;number&#125;<br> */<br>MyStack.prototype.pop = function() &#123;<br>    let length = this.queue1.length-1<br>    while(length--)&#123;<br>        this.queue2.push(this.queue1.shift())<br>    &#125;<br>    let popNum = this.queue1.pop()<br>    let len = this.queue2.length<br>    while(len--)&#123;<br>        this.queue1.push(this.queue2.shift())<br>    &#125;<br>    return popNum<br>&#125;;<br><br>/**<br> * @return &#123;number&#125;<br> */<br>MyStack.prototype.top = function() &#123;<br>    let topNum = this.pop()<br>    this.queue1.push(topNum)<br>    return topNum<br>&#125;;<br><br>/**<br> * @return &#123;boolean&#125;<br> */<br>MyStack.prototype.empty = function() &#123;<br>    return !this.queue1.length &amp;&amp; !this.queue2.length<br>&#125;;<br></code></pre></td></tr></table></figure>

<h5 id="使用一个队列"><a href="#使用一个队列" class="headerlink" title="使用一个队列"></a>使用一个队列</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var MyStack = function() &#123;<br>    this.queue = [];<br>&#125;;<br><br>/**<br> * Push element x onto stack. <br> * @param &#123;number&#125; x<br> * @return &#123;void&#125;<br> */<br>MyStack.prototype.push = function(x) &#123;<br>    this.queue.push(x);<br>&#125;;<br><br>/**<br> * Removes the element on top of the stack and returns that element.<br> * @return &#123;number&#125;<br> */<br>MyStack.prototype.pop = function() &#123;<br>    let size = this.queue.length;<br>    while(size-- &gt; 1) &#123;<br>        this.queue.push(this.queue.shift());<br>    &#125;<br>    return this.queue.shift();<br>&#125;;<br><br>/**<br> * Get the top element.<br> * @return &#123;number&#125;<br> */<br>MyStack.prototype.top = function() &#123;<br>    const x = this.pop();<br>    this.queue.push(x);<br>    return x;<br>&#125;;<br><br>/**<br> * Returns whether the stack is empty.<br> * @return &#123;boolean&#125;<br> */<br>MyStack.prototype.empty = function() &#123;<br>    return !this.queue.length;<br>&#125;;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>手撕</tag>
      </tags>
  </entry>
  <entry>
    <title>前端笔试之Js-ACM模式</title>
    <url>/2024/02/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E4%B9%8BJs-ACM%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前刷算法题都是用力扣。但是，力扣是核心代码模式，是不需要处理输入、输出的，只需要直接返回值就行。笔试、面试的时候，不一定是核心代码模式，也可能是ACM模式。如果没有了解过JavaScript的输入输出可能就寄了。下面是学习记录的两种JavaScript的ACM模式：<strong>V8模式</strong>，<strong>Nodejs模式</strong></p>
<h3 id="V8模式"><a href="#V8模式" class="headerlink" title="V8模式"></a>V8模式</h3><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><blockquote>
<p> console.log(); </p>
</blockquote>
<h4 id="读取一行输入-read-line"><a href="#读取一行输入-read-line" class="headerlink" title="读取一行输入(read_line())"></a>读取一行输入(<code>read_line()</code>)</h4><blockquote>
<p> 最多读取个字符，当还未达到1024个时如果遇到回车或结束符，提前结束。也有可能是<code>readline()</code>。牛客ACM模式就是<code>readline()</code>。 </p>
</blockquote>
<p>最重要的一个输入方法，可以通过该方法得到所有情况的输入，后面讲的其他输入方法，有可能没有。比如牛客的ACM模式，使用后面的输入，都会报错：xxx is not defined</p>
<blockquote>
<p> <code>read_line()</code>返回输入的一行，字符串形式。需要通过<code>split</code>、<code>parseInt</code>等方法来得到真正的输入。</p>
</blockquote>
<h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><h6 id="1-A-B-1"><a href="#1-A-B-1" class="headerlink" title="1. A+B(1)"></a>1. A+B(1)</h6><p><img src="/2024/02/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E4%B9%8BJs-ACM%E6%A8%A1%E5%BC%8F/n42jq5laxg.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs v8">let line<br>while(line = read_line())&#123;<br>	let nums = line.split(&#x27; &#x27;)<br>	let a = +nums[0] //字符串转数字<br>	let b = +nums[1]<br>	console.log(a+b)<br>&#125;<br></code></pre></td></tr></table></figure>

<h6 id="2-A-B-2"><a href="#2-A-B-2" class="headerlink" title="2. A+B(2)"></a>2. A+B(2)</h6><p><img src="/2024/02/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E4%B9%8BJs-ACM%E6%A8%A1%E5%BC%8F/d5f5a0e7f689ccd4e83926fca514fe9e.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let t<br>while(t = read_line())&#123;<br>	while(t--)&#123;<br>		let line = read_line()<br>		let [a,b] = line.split(&#x27; &#x27;).map(Number)<br>		console.log(a+b)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h6 id="3-A-B-4"><a href="#3-A-B-4" class="headerlink" title="3.  A+B(4)"></a>3.  A+B(4)</h6><p><img src="/2024/02/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E4%B9%8BJs-ACM%E6%A8%A1%E5%BC%8F/a45e287cb0efe03d9de0c98cf3dd69f4.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let line<br>while(line = read_line())&#123;<br>	let [n,...nums] = line.split(&#x27; &#x27;).map(Number)<br>	if(n === 0)<br>	break<br>	let sum = 0<br>	for(let num of nums)&#123;<br>		sum + = num<br>	&#125;<br>	console.log(sum)<br>&#125;<br></code></pre></td></tr></table></figure>

<h6 id="A-B-5"><a href="#A-B-5" class="headerlink" title=". A+B(5)"></a>. A+B(5)</h6><p><img src="/2024/02/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E4%B9%8BJs-ACM%E6%A8%A1%E5%BC%8F/3f6c125567cac6b9a2bae32894a07f9d.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">let t<br><br>while(t = +read_line()) &#123;<br>  while(t--) &#123;<br>    let [n, ...nums] = read_line().split(&#x27; &#x27;).map(Number)<br><br>    let sum = 0;<br>    for(let i = 0; i &lt; n; i++) &#123;<br>        sum += nums[i]<br>    &#125;<br><br>    console.log(sum)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="Nodejs模式"><a href="#Nodejs模式" class="headerlink" title="Nodejs模式"></a>Nodejs模式</h3><p>Nodejs输入主要有三大步骤：</p>
<ol>
<li>引入<code>readline</code>模块 </li>
<li>调用<code>readline.createInterface()</code>，创建一个<code>readline的接口实例</code> </li>
<li>监听<code>line</code>事件，事件处理函数的参数就是<code>输入的行</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const readline = require(&#x27;readline&#x27;)<br><br>const rl = readline.createInterface(&#123;<br>    input: process.stdin,<br>    output: process.stdout<br>&#125;)<br>rl.on(&#x27;line&#x27;, function (line) &#123;<br>    //enter your code<br>&#125;)<br></code></pre></td></tr></table></figure>

<h5 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const readline = require(&#x27;readline&#x27;)<br><br>const rl = readline.createInterface(&#123;<br>    input: process.stdin,<br>    output: process.stdout<br>&#125;);<br>rl.on(&#x27;line&#x27;, function (line) &#123;<br>  let nums = line.split(&#x27; &#x27;)<br><br>  if(nums) &#123;<br><br>    let a = +nums[0]<br>    let b = +nums[1]<br><br>    console.log(a + b)<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
</search>
