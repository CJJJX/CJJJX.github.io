<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS进阶学习DAY2</title>
    <url>/2023/07/30/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY2/</url>
    <content><![CDATA[<h1 id="JavaScript-进阶-第2天"><a href="#JavaScript-进阶-第2天" class="headerlink" title="JavaScript 进阶 - 第2天"></a>JavaScript 进阶 - 第2天</h1><blockquote>
<p>​	本文是在了解面向对象编程的基础概念及构造函数的作用，体会 JavaScript 一切皆对象的语言特征，掌握常见的对象属性和方法的使用做的笔记。</p>
</blockquote>
<ul>
<li>了解面向对象编程中的一般概念</li>
<li>能够基于构造函数创建对象</li>
<li>理解 JavaScript 中一切皆对象的语言特征</li>
<li>理解引用对象类型值存储的的特征</li>
<li>掌握包装类型对象常见方法的使用</li>
</ul>
<h2 id="深入对象"><a href="#深入对象" class="headerlink" title="深入对象"></a>深入对象</h2><blockquote>
<p>了解面向对象的基础概念，能够利用构造函数创建对象。</p>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数是专门用于创建对象的函数，如果一个函数使用 <code>new</code> 关键字调用，那么这个函数就是构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 定义函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;通过 new 也能调用函数...&#x27;</span>);<br>  &#125;<br>  <span class="hljs-comment">// 调用函数</span><br>  <span class="hljs-keyword">new</span> foo;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>使用 <code>new</code> 关键字调用函数的行为被称为实例化</li>
<li>实例化构造函数时没有参数时可以省略 <code>()</code></li>
<li>构造函数的返回值即为新创建的对象</li>
<li>构造函数内部的 <code>return</code> 返回的值无效！</li>
</ol>
<p>注：实践中为了从视觉上区分构造函数和普通函数，习惯将构造函数的首字母大写。</p>
<h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 构造函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 构造函数内部的 this 就是实例对象</span><br>    <span class="hljs-comment">// 实例对象中动态添加属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;小明&#x27;</span><br>    <span class="hljs-comment">// 实例对象动态添加方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;大家好~&#x27;</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 实例化，p1 是实例对象</span><br>  <span class="hljs-comment">// p1 实际就是 构造函数内部的 this</span><br>  <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">name</span>) <span class="hljs-comment">// 访问实例属性</span><br>  p1.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// 调用实例方法</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>构造函数内部 <code>this</code> 实际上就是实例对象，为其动态添加的属性和方法即为实例成员</li>
<li>为构造函数传入参数，动态创建结构相同但值不同的对象</li>
</ol>
<p>注：构造函数创建的实例对象彼此独立互不影响。</p>
<h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>在 JavaScript 中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法，构造函数的属性和方法被称为静态成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 构造函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-comment">// 省略实例成员</span><br>  &#125;<br>  <span class="hljs-comment">// 静态属性</span><br>  <span class="hljs-title class_">Person</span>.<span class="hljs-property">eyes</span> = <span class="hljs-number">2</span><br>  <span class="hljs-title class_">Person</span>.<span class="hljs-property">arms</span> = <span class="hljs-number">2</span><br>  <span class="hljs-comment">// 静态方法</span><br>  <span class="hljs-title class_">Person</span>.<span class="hljs-property">walk</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;^_^人都会走路...&#x27;</span>)<br>    <span class="hljs-comment">// this 指向 Person</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">eyes</span>)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>静态成员指的是添加到构造函数本身的属性和方法</li>
<li>一般公共特征的属性或方法静态成员设置为静态成员</li>
<li>静态成员方法中的 <code>this</code> 指向构造函数本身</li>
</ol>
<h2 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h2><blockquote>
<p>掌握各引用类型和包装类型对象属性和方法的使用。</p>
</blockquote>
<p>在 JavaScript 中<strong>最主要</strong>的数据类型有 6 种，分别是字符串、数值、布尔、undefined、null 和 对象，常见的对象类型数据包括数组和普通对象。其中字符串、数值、布尔、undefined、null 也被称为简单类型或基础类型，对象也被称为引用类型。</p>
<p>在 JavaScript 内置了一些构造函数，绝大部的数据处理都是基于这些构造函数实现的，JavaScript 基础阶段学习的 <code>Date</code> 就是内置的构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 实例化</span><br>	<span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  <br>  <span class="hljs-comment">// date 即为实例对象</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>甚至字符串、数值、布尔、数组、普通对象也都有专门的构造函数，用于创建对应类型的数据。</p>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p><code>Object</code> 是内置的构造函数，用于创建普通对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 通过构造函数创建普通对象</span><br>  <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">15</span>&#125;)<br><br>  <span class="hljs-comment">// 这种方式声明的变量称为【字面量】</span><br>  <span class="hljs-keyword">let</span> student = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;杜子腾&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>&#125;<br>  <br>  <span class="hljs-comment">// 对象语法简写</span><br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;小红&#x27;</span>;<br>  <span class="hljs-keyword">let</span> people = &#123;<br>    <span class="hljs-comment">// 相当于 name: name</span><br>    name,<br>    <span class="hljs-comment">// 相当于 walk: function () &#123;&#125;</span><br>    walk () &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;人都要走路...&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(student.<span class="hljs-property">constructor</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">constructor</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(student <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>。</p>
<p>总结：</p>
<ol>
<li>推荐使用字面量方式声明对象，而不是 <code>Object</code> 构造函数</li>
<li><code>Object.assign</code> 静态方法创建新的对象</li>
<li><code>Object.keys</code> 静态方法获取对象中所有属性</li>
<li><code>Object.values</code> 表态方法获取对象中所有属性值</li>
</ol>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p><code>Array</code> 是内置的构造函数，用于创建数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 构造函数创建数组</span><br>  <span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>);<br><br>  <span class="hljs-comment">// 字面量方式创建数组</span><br>  <span class="hljs-keyword">let</span> list = [<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>, <span class="hljs-string">&#x27;javascript&#x27;</span>]<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>数组赋值后，无论修改哪个变量另一个对象的数据值也会相当发生改变。</p>
<p>总结：</p>
<ol>
<li><p>推荐使用字面量方式声明数组，而不是 <code>Array</code> 构造函数</p>
</li>
<li><p>实例方法 <code>forEach</code> 用于遍历数组，替代 <code>for</code> 循环 (重点)</p>
</li>
<li><p>实例方法 <code>filter</code> 过滤数组单元值，生成新数组(重点)</p>
</li>
<li><p>实例方法 <code>map</code> 迭代原数组，生成新数组(重点)</p>
</li>
<li><p>实例方法 <code>join</code> 数组元素拼接为字符串，返回字符串(重点)</p>
</li>
<li><p>实例方法 <code>find</code> 查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined(重点)</p>
</li>
<li><p>实例方法<code>every</code> 检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回 true，否则返回 false(重点)</p>
</li>
<li><p>实例方法<code>some</code> 检测数组中的元素是否满足指定条件 <strong>如果数组中有</strong>元素满足条件返回 true，否则返回 false</p>
</li>
<li><p>实例方法 <code>concat</code> 合并两个数组，返回生成新数组</p>
</li>
<li><p>实例方法 <code>sort</code> 对原数组单元值排序</p>
</li>
<li><p>实例方法 <code>splice</code> 删除或替换原数组单元</p>
</li>
<li><p>实例方法 <code>reverse</code> 反转数组</p>
</li>
<li><p>实例方法 <code>findIndex</code> 查找元素的索引值</p>
</li>
</ol>
<h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><p>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，如下代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 字符串类型</span><br>  <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello world!&#x27;</span><br> 	<span class="hljs-comment">// 统计字符的长度（字符数量）</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>)<br>  <br>  <span class="hljs-comment">// 数值类型</span><br>  <span class="hljs-keyword">const</span> price = <span class="hljs-number">12.345</span><br>  <span class="hljs-comment">// 保留两位小数</span><br>  price.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 12.34</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型。</p>
<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p><code>String</code> 是内置的构造函数，用于创建字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 使用构造函数创建字符串</span><br>  <span class="hljs-keyword">let</span> str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;hello world!&#x27;</span>);<br><br>  <span class="hljs-comment">// 字面量创建字符串</span><br>  <span class="hljs-keyword">let</span> str2 = <span class="hljs-string">&#x27;你好，世界！&#x27;</span>;<br><br>  <span class="hljs-comment">// 检测是否属于同一个构造函数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">constructor</span> === str2.<span class="hljs-property">constructor</span>); <span class="hljs-comment">// true</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>); <span class="hljs-comment">// false</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>实例属性 <code>length</code> 用来获取字符串的度长(重点)</li>
<li>实例方法 <code>split(&#39;分隔符&#39;)</code> 用来将字符串拆分成数组(重点)</li>
<li>实例方法 <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code> 用于字符串截取(重点)</li>
<li>实例方法 <code>startsWith(检测字符串[, 检测位置索引号])</code> 检测是否以某字符开头(重点)</li>
<li>实例方法 <code>includes(搜索的字符串[, 检测位置索引号])</code> 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false(重点)</li>
<li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li>
<li>实例方法 <code>toLowerCase</code> 用于将就转换成小写</li>
<li>实例方法 <code>indexOf</code> 检测是否包含某字符</li>
<li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li>
<li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li>
<li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li>
</ol>
<p>注：String 也可以当做普通函数使用，这时它的作用是强制转换成字符串数据类型。</p>
<h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p><code>Number</code> 是内置的构造函数，用于创建数值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 使用构造函数创建数值</span><br>  <span class="hljs-keyword">let</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;10&#x27;</span>)<br>  <span class="hljs-keyword">let</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">5</span>)<br><br>  <span class="hljs-comment">// 字面量创建数值</span><br>  <span class="hljs-keyword">let</span> z = <span class="hljs-number">20</span><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>推荐使用字面量方式声明数值，而不是 <code>Number</code> 构造函数</li>
<li>实例方法 <code>toFixed</code> 用于设置保留小数位的长度</li>
</ol>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JS进阶学习DAY1</title>
    <url>/2023/07/29/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY1/</url>
    <content><![CDATA[<h1 id="JavaScript-进阶-第1天"><a href="#JavaScript-进阶-第1天" class="headerlink" title="JavaScript 进阶 - 第1天"></a>JavaScript 进阶 - 第1天</h1><blockquote>
<p>​		本文是在学习作用域、变量提升、闭包等语言特征，为加深对 JavaScript 的理解，掌握变量赋值、函数声明的简洁语法，降低代码冗余度做的笔记。</p>
</blockquote>
<ul>
<li>理解作用域对程序执行的影响</li>
<li>能够分析程序执行的作用域范围</li>
<li>理解闭包本质，利用闭包创建隔离作用域</li>
<li>了解什么变量提升及函数提升</li>
<li>掌握箭头函数、解析剩余参数等简洁语法</li>
</ul>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote>
<p>了解作用域对程序执行的影响及作用域链的查找机制，使用闭包函数创建隔离作用域避免全局变量污染。</p>
</blockquote>
<p>作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问，作用域分为全局作用域和局部作用域。</p>
<h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>局部作用域分为函数作用域和块作用域。</p>
<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 声明 counter 函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-comment">// 函数内部声明的变量</span><br>    <span class="hljs-keyword">const</span> s = x + y<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s) <span class="hljs-comment">// 18</span><br>  &#125;<br>  <span class="hljs-comment">// 设用 counter 函数</span><br>  <span class="hljs-title function_">counter</span>(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>)<br>  <span class="hljs-comment">// 访问变量 s</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s)<span class="hljs-comment">// 报错</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>函数内部声明的变量，在函数外部无法被访问</li>
<li>函数的参数也是函数内部的局部变量</li>
<li>不同函数内部声明的变量无法互相访问</li>
<li>函数执行完毕后，函数内部的变量实际被清空了</li>
</ol>
<h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  &#123;<br>    <span class="hljs-comment">// age 只能在该代码块中被访问</span><br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age); <span class="hljs-comment">// 正常</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// 超出了 age 的作用域</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age) <span class="hljs-comment">// 报错</span><br>  <br>  <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span>(flag) &#123;<br>    <span class="hljs-comment">// str 只能在该代码块中被访问</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello world!&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str); <span class="hljs-comment">// 正常</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// 超出了 age 的作用域</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str); <span class="hljs-comment">// 报错</span><br>  <br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> t = <span class="hljs-number">1</span>; t &lt;= <span class="hljs-number">6</span>; t++) &#123;<br>    <span class="hljs-comment">// t 只能在该代码块中被访问</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t); <span class="hljs-comment">// 正常</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// 超出了 t 的作用域</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t); <span class="hljs-comment">// 报错</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>JavaScript 中除了变量外还有常量，常量与变量本质的区别是【常量必须要有值且不允许被重新赋值】，常量值为对象时其属性和方法允许重新赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">&lt;script&gt;<br>  <span class="hljs-comment">// 必须要有值</span><br>  <span class="hljs-type">const</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1.0.0&#x27;</span>;<br><br>  <span class="hljs-comment">// 不能重新赋值</span><br>  <span class="hljs-comment">// version = &#x27;1.0.1&#x27;;</span><br><br>  <span class="hljs-comment">// 常量值为对象类型</span><br>  <span class="hljs-type">const</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> &#123;<br>    name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    age: <span class="hljs-number">18</span><br>  &#125;<br><br>  <span class="hljs-comment">// 不能重新赋值</span><br>  user = &#123;&#125;;<br><br>  <span class="hljs-comment">// 属性和方法允许被修改</span><br>  user.name = <span class="hljs-string">&#x27;小小明&#x27;</span>;<br>  user.gender = <span class="hljs-string">&#x27;男&#x27;</span>;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li>
<li><code>const</code> 声明的常量也会产生块作用域</li>
<li>不同代码块之间的变量无法互相访问</li>
<li>推荐使用 <code>let</code> 或 <code>const</code></li>
</ol>
<p>注：开发中 <code>let</code> 和 <code>const</code> 经常不加区分的使用，如果担心某个值会不小被修改时，则只能使用 <code>const</code> 声明成常量。</p>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 此处是全局</span><br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 此处为局部</span><br>  &#125;<br><br>  <span class="hljs-comment">// 此处为全局</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>全局作用域中声明的变量，任何其它作用域都可以被访问，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 全局变量 name</span><br>    <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;小明&#x27;</span><br>  <br>  	<span class="hljs-comment">// 函数作用域中访问全局</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 此处为局部</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span> + name)<br>    &#125;<br><br>    <span class="hljs-comment">// 全局变量 flag 和 x</span><br>    <span class="hljs-keyword">const</span> flag = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span><br>  <br>  	<span class="hljs-comment">// 块作用域中访问全局</span><br>    <span class="hljs-keyword">if</span>(flag) &#123;<br>      <span class="hljs-keyword">let</span> y = <span class="hljs-number">5</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x + y) <span class="hljs-comment">// x 是全局的</span><br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>为 <code>window</code> 对象动态添加的属性默认也是全局的，不推荐！</li>
<li>函数中未使用任何关键字声明的变量为全局变量，不推荐！！！</li>
<li>尽可能少的声明全局变量，防止全局变量被污染</li>
</ol>
<p>JavaScript 中的作用域是程序被执行时的底层机制，了解这一机制有助于规范代码书写习惯，避免因作用域导致的语法错误。</p>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>在解释什么是作用域链前先来看一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 全局作用域</span><br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br>  <span class="hljs-comment">// 局部作用域</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> c<br>    <span class="hljs-comment">// 局部作用域</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">g</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">let</span> d = <span class="hljs-string">&#x27;yo&#x27;</span><br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>函数内部允许创建新的函数，<code>f</code> 函数内部创建的新函数 <code>g</code>，会产生新的函数作用域，由此可知作用域产生了嵌套的关系。</p>
<p>如下图所示，父子关系的作用域关联在一起形成了链状的结构，作用域链的名字也由此而来。</p>
<p>作用域链本质上是底层的变量查找机制，在函数被执行时，会优先查找当前函数作用域中查找变量，如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 全局作用域</span><br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br><br>  <span class="hljs-comment">// 局部作用域</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> c<br>    <span class="hljs-comment">// let a = 10;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1 或 10</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d) <span class="hljs-comment">// 报错</span><br>    <br>    <span class="hljs-comment">// 局部作用域</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">g</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">let</span> d = <span class="hljs-string">&#x27;yo&#x27;</span><br>      <span class="hljs-comment">// let b = 20;</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">// 2 或 20</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 调用 g 函数</span><br>    <span class="hljs-title function_">g</span>()<br>  &#125;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c) <span class="hljs-comment">// 报错</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d) <span class="hljs-comment">// 报错</span><br>  <br>  <span class="hljs-title function_">f</span>();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>嵌套关系的作用域串联起来形成了作用域链</li>
<li>相同作用域链中按着从小到大的规则查找变量</li>
<li>子作用域能够访问父作用域，父级作用域无法访问子级作用域</li>
</ol>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是一种比较特殊和函数，使用闭包能够访问函数作用域中的变量。从代码形式上看闭包是一个做为返回值的函数，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1. 闭包 : 内层函数 + 外层函数变量</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// function outer() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   const a = 1</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   function f() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//     console.log(a)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   f()</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// outer()</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 2. 闭包的应用： 实现数据的私有。统计函数的调用次数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// let count = 1</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// function fn() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   count++</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(`函数被调用$&#123;count&#125;次`)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 3. 闭包的写法  统计函数的调用次数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        count++</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`函数被调用<span class="hljs-subst">$&#123;count&#125;</span>次`</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> fn</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> re = <span class="hljs-title function_">outer</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const re = function fn() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   count++</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(`函数被调用$&#123;count&#125;次`)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">re</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">re</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = function() &#123; &#125;  函数表达式</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 4. 闭包存在的问题： 可能会造成内存泄漏</span></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<p>1.怎么理解闭包？</p>
<ul>
<li>闭包 &#x3D; 内层函数 + 外层函数的变量</li>
</ul>
<p>2.闭包的作用？</p>
<ul>
<li>封闭数据，实现数据私有，外部也可以访问函数内部的变量</li>
<li>闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来</li>
</ul>
<p>3.闭包可能引起的问题？</p>
<ul>
<li>内存泄漏</li>
</ul>
<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 访问变量 str</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str + <span class="hljs-string">&#x27;world!&#x27;</span>);<br><br>  <span class="hljs-comment">// 声明变量 str</span><br>  <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;hello &#x27;</span>;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>变量在未声明即被访问时会报语法错误</li>
<li>变量在声明之前即被访问，变量的值为 <code>undefined</code></li>
<li><code>let</code> 声明的变量不存在变量提升，推荐使用 <code>let</code></li>
<li>变量提升出现在相同作用域当中</li>
<li>实际开发中推荐先声明再访问变量</li>
</ol>
<p>注：关于变量提升的原理分析会涉及较为复杂的词法分析等知识，而开发中使用 <code>let</code> 可以轻松规避变量的提升，因此在此不做过多的探讨，有兴趣可<a href="https://segmentfault.com/a/1190000013915935">查阅资料</a>。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote>
<p>知道函数参数默认值、动态参数、剩余参数的使用细节，提升函数应用的灵活度，知道箭头函数的语法及与普通函数的差异。</p>
</blockquote>
<h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 调用函数</span><br>  <span class="hljs-title function_">foo</span>()<br>  <span class="hljs-comment">// 声明函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;声明之前即被调用...&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// 不存在提升现象</span><br>  <span class="hljs-title function_">bar</span>()  <span class="hljs-comment">// 错误</span><br>  <span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;函数表达式不存在提升现象...&#x27;</span>)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>函数提升能够使函数的声明调用更灵活</li>
<li>函数表达式不存在提升的现象</li>
<li>函数提升出现在相同作用域当中</li>
</ol>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>函数参数的使用细节，能够提升函数应用的灵活度。</p>
<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 设置参数默认值</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;小明&quot;</span>, age=<span class="hljs-number">18</span></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">`&lt;p&gt;大家好，我叫<span class="hljs-subst">$&#123;name&#125;</span>，我今年<span class="hljs-subst">$&#123;age&#125;</span>岁了。&lt;/p&gt;`</span>);<br>  &#125;<br>  <span class="hljs-comment">// 调用函数</span><br>  <span class="hljs-title function_">sayHi</span>();<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-string">&#x27;小红&#x27;</span>);<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-string">&#x27;小刚&#x27;</span>, <span class="hljs-number">21</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>声明函数时为形参赋值即为参数的默认值</li>
<li>如果参数未自定义默认值时，参数的默认值为 <code>undefined</code></li>
<li>调用函数时没有传入对应实参时，参数的默认值被当做实参传入</li>
</ol>
<h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p><code>arguments</code> 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 求生函数，计算所有参数的和</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// console.log(arguments)</span><br>    <span class="hljs-keyword">let</span> s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      s += <span class="hljs-variable language_">arguments</span>[i]<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s)<br>  &#125;<br>  <span class="hljs-comment">// 调用求和函数</span><br>  <span class="hljs-title function_">sum</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<span class="hljs-comment">// 两个参数</span><br>  <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">// 两个参数</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>arguments</code> 是一个伪数组</li>
<li><code>arguments</code> 的作用是动态获取函数的实参</li>
</ol>
<h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">config</span>(<span class="hljs-params">baseURL, ...other</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(baseURL) <span class="hljs-comment">// 得到 &#x27;http://baidu.com&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(other)  <span class="hljs-comment">// other  得到 [&#x27;get&#x27;, &#x27;json&#x27;]</span><br>  &#125;<br>  <span class="hljs-comment">// 调用函数</span><br>  <span class="hljs-title function_">config</span>(<span class="hljs-string">&#x27;http://baidu.com&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</li>
<li>借助 <code>...</code> 获取的剩余实参，是个真数组</li>
</ol>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数是一种声明函数的简洁语法，它与普通函数并无本质的区别，差异性更多体现在语法格式上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = function () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(123)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1. 箭头函数 基本语法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = () =&gt; &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(123)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// fn()</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = (x) =&gt; &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(x)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// fn(1)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 2. 只有一个形参的时候，可以省略小括号</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = x =&gt; &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   console.log(x)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// fn(1)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// // 3. 只有一行代码的时候，我们可以省略大括号</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = x =&gt; console.log(x)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// fn(1)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 4. 只有一行代码的时候，可以省略return</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = x =&gt; x + x</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// console.log(fn(1))</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 5. 箭头函数可以直接返回一个对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const fn = (uname) =&gt; (&#123; uname: uname &#125;)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// console.log(fn(&#x27;刘德华&#x27;))</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>箭头函数属于表达式函数，因此不存在函数提升</li>
<li>箭头函数只有一个参数时可以省略圆括号 <code>()</code></li>
<li>箭头函数函数体只有一行代码时可以省略花括号 <code>&#123;&#125;</code>，并自动做为返回值被返回</li>
</ol>
<h4 id="箭头函数参数"><a href="#箭头函数参数" class="headerlink" title="箭头函数参数"></a>箭头函数参数</h4><p>箭头函数中没有 <code>arguments</code>，只能使用 <code>...</code> 动态获取实参</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1. 利用箭头函数来求和</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getSum</span> = (<span class="hljs-params">...arr</span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        sum += arr[i]</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> sum</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">getSum</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) <span class="hljs-comment">// 9</span></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h4 id="箭头函数-this"><a href="#箭头函数-this" class="headerlink" title="箭头函数 this"></a>箭头函数 this</h4><p>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层沿用this。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>   <span class="hljs-comment">// 以前this的指向：  谁调用的这个函数，this 就指向谁</span><br>   <span class="hljs-comment">// console.log(this)  // window</span><br>   <span class="hljs-comment">// // 普通函数</span><br>   <span class="hljs-comment">// function fn() &#123;</span><br>   <span class="hljs-comment">//   console.log(this)  // window</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// window.fn()</span><br>   <span class="hljs-comment">// // 对象方法里面的this</span><br>   <span class="hljs-comment">// const obj = &#123;</span><br>   <span class="hljs-comment">//   name: &#x27;andy&#x27;,</span><br>   <span class="hljs-comment">//   sayHi: function () &#123;</span><br>   <span class="hljs-comment">//     console.log(this)  // obj</span><br>   <span class="hljs-comment">//   &#125;</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// obj.sayHi()</span><br><br>   <span class="hljs-comment">// 2. 箭头函数的this  是上一层作用域的this 指向</span><br>   <span class="hljs-comment">// const fn = () =&gt; &#123;</span><br>   <span class="hljs-comment">//   console.log(this)  // window</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// fn()</span><br>   <span class="hljs-comment">// 对象方法箭头函数 this</span><br>   <span class="hljs-comment">// const obj = &#123;</span><br>   <span class="hljs-comment">//   uname: &#x27;pink老师&#x27;,</span><br>   <span class="hljs-comment">//   sayHi: () =&gt; &#123;</span><br>   <span class="hljs-comment">//     console.log(this)  // this 指向谁？ window</span><br>   <span class="hljs-comment">//   &#125;</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// obj.sayHi()</span><br><br>   <span class="hljs-keyword">const</span> obj = &#123;<br>     <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;pink老师&#x27;</span>,<br>     <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)  <span class="hljs-comment">// obj</span><br>       <span class="hljs-keyword">let</span> i = <span class="hljs-number">10</span><br>       <span class="hljs-keyword">const</span> <span class="hljs-title function_">count</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)  <span class="hljs-comment">// obj </span><br>       &#125;<br>       <span class="hljs-title function_">count</span>()<br>     &#125;<br>   &#125;<br>   obj.<span class="hljs-title function_">sayHi</span>()<br><br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><blockquote>
<p>知道解构的语法及分类，使用解构简洁语法快速为变量赋值。</p>
</blockquote>
<p>解构赋值是一种快速为变量赋值的简洁语法，本质上仍然是为变量赋值，分为数组解构、对象解构两大类型。</p>
<h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 普通的数组</span><br>  <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>  <span class="hljs-comment">// 批量声明变量 a b c </span><br>  <span class="hljs-comment">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span><br>  <span class="hljs-keyword">let</span> [a, b, c] = arr<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 1</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// 2</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c); <span class="hljs-comment">// 3</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>赋值运算符 <code>=</code> 左侧的 <code>[]</code> 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li>
<li>变量的顺序对应数组单元值的位置依次进行赋值操作</li>
<li>变量的数量大于单元值数量时，多余的变量将被赋值为 <code>undefined</code></li>
<li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li>
<li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li>
</ol>
<p>注：支持多维解构赋值，比较复杂后续有应用需求时再进一步分析</p>
<h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>对象解构是将对象属性和方法快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 普通对象</span><br>  <span class="hljs-keyword">const</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>  &#125;;<br>  <span class="hljs-comment">// 批量声明变量 name age</span><br>  <span class="hljs-comment">// 同时将数组单元值 小明  18 依次赋值给变量 name  age</span><br>  <span class="hljs-keyword">const</span> &#123;name, age&#125; = user<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name) <span class="hljs-comment">// 小明</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age) <span class="hljs-comment">// 18</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>赋值运算符 <code>=</code> 左侧的 <code>&#123;&#125;</code> 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li>
<li>对象属性的值将被赋值给与属性名相同的变量</li>
<li>对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></li>
<li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</li>
</ol>
<p>注：支持多维解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1. 这是后台传递过来的数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> msg = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;获取新闻列表成功&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;data&quot;</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;5G商用自己，三大运用商收入下降&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">58</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;国际媒体头条速览&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">56</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;乌克兰和俄罗斯持续冲突&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">1669</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      ]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 需求1： 请将以上msg对象  采用对象解构的方式 只选出  data 方面后面使用渲染页面</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const &#123; data &#125; = msg</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// console.log(data)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 需求2： 上面msg是后台传递过来的数据，我们需要把data选出当做参数传递给 函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const &#123; data &#125; = msg</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// msg 虽然很多属性，但是我们利用解构只要 data值</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">&#123; data &#125;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// const &#123; data &#125; = arr</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 我们只要 data 数据</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 内部处理</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">render</span>(msg)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 需求3， 为了防止msg里面的data名字混淆，要求渲染函数里面的数据名改为 myData</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">&#123; data: myData &#125;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 要求将 获取过来的 data数据 更名为 myData</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 内部处理</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myData)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">render</span>(msg)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="forEach遍历数组"><a href="#forEach遍历数组" class="headerlink" title="forEach遍历数组"></a>forEach遍历数组</h3><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数</p>
<blockquote>
<p>注意：</p>
<p>1.forEach 主要是遍历数组</p>
<p>2.参数当前数组元素是必须要写的， 索引号可选。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// forEach 就是遍历  加强版的for循环  适合于遍历数组对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> result = arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)  <span class="hljs-comment">// 数组元素 red  green pink</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index) <span class="hljs-comment">// 索引号</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// console.log(result)</span></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h3 id="filter筛选数组"><a href="#filter筛选数组" class="headerlink" title="filter筛选数组"></a>filter筛选数组</h3><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>
<p>主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// const newArr = arr.filter(function (item, index) &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   // console.log(item)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   // console.log(index)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   return item &gt;= 20</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 返回的符合条件的新数组</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt;= <span class="hljs-number">20</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr)</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JS进阶学习DAY3</title>
    <url>/2023/07/31/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY3/</url>
    <content><![CDATA[<h1 id="JavaScript-进阶-第3天"><a href="#JavaScript-进阶-第3天" class="headerlink" title="JavaScript 进阶 - 第3天"></a>JavaScript 进阶 - 第3天</h1><blockquote>
<p>​	本文是在了解构造函数原型对象的语法特征，掌握 JavaScript 中面向对象编程的实现方式，基于面向对象编程思想实现 DOM 操作封装做的笔记。</p>
</blockquote>
<ul>
<li>了解面向对象编程的一般特征</li>
<li>掌握基于构造函数原型对象的逻辑封装</li>
<li>掌握基于原型对象实现的继承</li>
<li>理解什么原型链及其作用</li>
<li>能够处理程序异常提升程序执行的健壮性</li>
</ul>
<h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><blockquote>
<p>学习 JavaScript 中基于原型的面向对象编程序的语法实现，理解面向对象编程的特征。</p>
</blockquote>
<h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次</p>
<p>调用就可以了。</p>
<p>举个栗子：蛋炒饭</p>
<p><img src="/2023/07/31/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY3/1676792906898.png" alt="67679290689"></p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</p>
<p><img src="/2023/07/31/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY3/1676792930329.png" alt="67679293032"></p>
<p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</p>
<p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p>
<p>面向对象的特性：</p>
<ul>
<li>封装性</li>
<li>继承性</li>
<li>多态性</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>对比以下通过面向对象的构造函数实现的封装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>    this.name = &#x27;佚名&#x27;<br>    // 设置名字<br>    this.setName = function (name) &#123;<br>      this.name = name<br>    &#125;<br>    // 读取名字<br>    this.getName = () =&gt; &#123;<br>      console.log(this.name)<br>    &#125;<br>  &#125;<br><br>  // 实例对像，获得了构造函数中封装的所有逻辑<br>  let p1 = new Person()<br>  p1.setName(&#x27;小明&#x27;)<br>  console.log(p1.name)<br><br>  // 实例对象<br>  let p2 = new Person()<br>  console.log(p2.name)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p>
<p>同样的将变量和函数组合到了一起并能通过 this 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之</p>
<p>间是彼此不影响的</p>
<blockquote>
<p>总结：</p>
<ol>
<li>构造函数体现了面向对象的封装特性</li>
<li>构造函数实例创建的对象彼此独立、互不影响</li>
</ol>
</blockquote>
<p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p>
<p>前面我们学过的构造函数方法很好用，但是 存在<code>浪费内存</code>的问题</p>
<h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>构造函数通过原型分配的函数是所有对象所 共享的。</p>
<ul>
<li>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象</li>
<li>这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存</li>
<li>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</li>
<li>构造函数和原型对象中的this 都指向 实例化的对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>    <br>  &#125;<br><br>  // 每个函数都有 prototype 属性<br>  console.log(Person.prototype)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>了解了 JavaScript 中构造函数与原型对象的关系后，再来看原型对象具体的作用，如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>    // 此处未定义任何方法<br>  &#125;<br><br>  // 为构造函数的原型对象添加方法<br>  Person.prototype.sayHi = function () &#123;<br>    console.log(&#x27;Hi~&#x27;);<br>  &#125;<br>	<br>  // 实例化<br>  let p1 = new Person();<br>  p1.sayHi(); // 输出结果为 Hi~<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>构造函数 <code>Person</code> 中未定义任何方法，这时实例对象调用了原型对象中的方法 <code>sayHi</code>，接下来改动一下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>    // 此处定义同名方法 sayHi<br>    this.sayHi = function () &#123;<br>      console.log(&#x27;嗨!&#x27;);<br>    &#125;<br>  &#125;<br><br>  // 为构造函数的原型对象添加方法<br>  Person.prototype.sayHi = function () &#123;<br>    console.log(&#x27;Hi~&#x27;);<br>  &#125;<br><br>  let p1 = new Person();<br>  p1.sayHi(); // 输出结果为 嗨!<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>构造函数 <code>Person</code> 中定义与原型对象中相同名称的方法，这时实例对象调用则是构造函中的方法 <code>sayHi</code>。</p>
<p>通过以上两个简单示例不难发现 JavaScript 中对象的工作机制：<strong>当访问对象的属性或方法时，先在当前实例对象是查找，然后再去原型对象查找，并且原型对象被所有实例共享。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>	function Person() &#123;<br>    // 此处定义同名方法 sayHi<br>    this.sayHi = function () &#123;<br>      console.log(&#x27;嗨!&#x27; + this.name)<br>    &#125;<br>  &#125;<br><br>  // 为构造函数的原型对象添加方法<br>  Person.prototype.sayHi = function () &#123;<br>    console.log(&#x27;Hi~&#x27; + this.name)<br>  &#125;<br>  // 在构造函数的原型对象上添加属性<br>  Person.prototype.name = &#x27;小明&#x27;<br><br>  let p1 = new Person()<br>  p1.sayHi(); // 输出结果为 嗨!<br>  <br>  let p2 = new Person()<br>  p2.sayHi()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：<strong>结合构造函数原型的特征，实际开发重往往会将封装的功能函数添加到原型对象中。</strong></p>
<h3 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h3><p>在哪里？ 每个原型对象里面都有个constructor 属性（constructor 构造函数）</p>
<p>作用：该属性指向该原型对象的构造函数， 简单理解，就是指向我的爸爸，我是有爸爸的孩子</p>
<p><strong>使用场景：</strong></p>
<p>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值.</p>
<p>但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了</p>
<p>此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</p>
<h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><p>对象都会有一个属性 <strong>proto</strong> 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype</p>
<p>原型对象的属性和方法，就是因为对象有 <strong>proto</strong> 原型的存在。</p>
<p>注意：</p>
<ul>
<li><strong>proto</strong> 是JS非标准属性</li>
<li>[[prototype]]和__proto__意义相同</li>
<li>用来表明当前实例对象指向哪个原型对象prototype</li>
<li>__proto__对象原型里面也有一个 constructor属性，指向创建该实例对象的构造函数</li>
</ul>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承</p>
<p>的特性。</p>
<p>龙生龙、凤生凤、老鼠的儿子会打洞描述的正是继承的含义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;script&gt;<br>    // 继续抽取   公共的部分放到原型上<br>    // const Person1 = &#123;<br>    //   eyes: 2,<br>    //   head: 1<br>    // &#125;<br>    // const Person2 = &#123;<br>    //   eyes: 2,<br>    //   head: 1<br>    // &#125;<br>    // 构造函数  new 出来的对象 结构一样，但是对象不一样<br>    function Person() &#123;<br>      this.eyes = 2<br>      this.head = 1<br>    &#125;<br>    // console.log(new Person)<br>    // 女人  构造函数   继承  想要 继承 Person<br>    function Woman() &#123;<br><br>    &#125;<br>    // Woman 通过原型来继承 Person<br>    // 父构造函数（父类）   子构造函数（子类）<br>    // 子类的原型 =  new 父类  <br>    Woman.prototype = new Person()   // &#123;eyes: 2, head: 1&#125; <br>    // 指回原来的构造函数<br>    Woman.prototype.constructor = Woman<br><br>    // 给女人添加一个方法  生孩子<br>    Woman.prototype.baby = function () &#123;<br>      console.log(&#x27;宝贝&#x27;)<br>    &#125;<br>    const red = new Woman()<br>    console.log(red)<br>    // console.log(Woman.prototype)<br>    // 男人 构造函数  继承  想要 继承 Person<br>    function Man() &#123;<br><br>    &#125;<br>    // 通过 原型继承 Person<br>    Man.prototype = new Person()<br>    Man.prototype.constructor = Man<br>    const pink = new Man()<br>    console.log(pink)<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对</p>
<p>象的链状结构关系称为原型链</p>
<p><img src="/2023/07/31/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY3/1676793388695.png" alt="67679338869"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;script&gt;<br>    // function Objetc() &#123;&#125;<br>    console.log(Object.prototype)<br>    console.log(Object.prototype.__proto__)<br><br>    function Person() &#123;<br><br>    &#125;<br>    const ldh = new Person()<br>    // console.log(ldh.__proto__ === Person.prototype)<br>    // console.log(Person.prototype.__proto__ === Object.prototype)<br>    console.log(ldh instanceof Person)<br>    console.log(ldh instanceof Object)<br>    console.log(ldh instanceof Array)<br>    console.log([1, 2, 3] instanceof Array)<br>    console.log(Array instanceof Object)<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<p>① 当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</p>
<p>② 如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）</p>
<p>③ 如果还没有就查找原型对象的原型（Object的原型对象）</p>
<p>④ 依此类推一直找到 Object 为止（null）</p>
<p>⑤ __proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</p>
<p>⑥ 可以使用 instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JS进阶学习DAY4</title>
    <url>/2023/08/01/JS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0DAY4/</url>
    <content><![CDATA[<h1 id="JavaScript-进阶-第4天"><a href="#JavaScript-进阶-第4天" class="headerlink" title="JavaScript 进阶 - 第4天"></a>JavaScript 进阶 - 第4天</h1><h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>首先浅拷贝和深拷贝只针对引用类型</p>
<p>浅拷贝：拷贝的是地址</p>
<p>常见方法：</p>
<ol>
<li>拷贝对象：Object.assgin() &#x2F; 展开运算符 {…obj} 拷贝对象</li>
<li>拷贝数组：Array.prototype.concat() 或者 […arr]</li>
</ol>
<blockquote>
<p>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址 (简单理解： 如果是单层对象，没问题，如果有多层就有问题)</p>
</blockquote>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>首先浅拷贝和深拷贝只针对引用类型</p>
<p>深拷贝：拷贝的是对象，不是地址</p>
<p>常见方法：</p>
<ol>
<li>通过递归实现深拷贝</li>
<li>lodash&#x2F;cloneDeep</li>
<li>通过JSON.stringify()实现</li>
</ol>
<h4 id="递归实现深拷贝"><a href="#递归实现深拷贝" class="headerlink" title="递归实现深拷贝"></a>递归实现深拷贝</h4><p>函数递归：</p>
<p>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数</p>
<ul>
<li>简单理解:函数内部自己调用自己, 这个函数就是递归函数</li>
<li>递归函数的作用和循环效果类似</li>
<li>由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件 return</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;script&gt;<br>    const obj = &#123;<br>      uname: &#x27;pink&#x27;,<br>      age: 18,<br>      hobby: [&#x27;乒乓球&#x27;, &#x27;足球&#x27;],<br>      family: &#123;<br>        baby: &#x27;小pink&#x27;<br>      &#125;<br>    &#125;<br>    const o = &#123;&#125;<br>    // 拷贝函数<br>    function deepCopy(newObj, oldObj) &#123;<br>      debugger<br>      for (let k in oldObj) &#123;<br>        // 处理数组的问题  一定先写数组 在写 对象 不能颠倒<br>        if (oldObj[k] instanceof Array) &#123;<br>          newObj[k] = []<br>          //  newObj[k] 接收 []  hobby<br>          //  oldObj[k]   [&#x27;乒乓球&#x27;, &#x27;足球&#x27;]<br>          deepCopy(newObj[k], oldObj[k])<br>        &#125; else if (oldObj[k] instanceof Object) &#123;<br>          newObj[k] = &#123;&#125;<br>          deepCopy(newObj[k], oldObj[k])<br>        &#125;<br>        else &#123;<br>          //  k  属性名 uname age    oldObj[k]  属性值  18<br>          // newObj[k]  === o.uname  给新对象添加属性<br>          newObj[k] = oldObj[k]<br>        &#125;<br>      &#125;<br>    &#125;<br>    deepCopy(o, obj) // 函数调用  两个参数 o 新对象  obj 旧对象<br>    console.log(o)<br>    o.age = 20<br>    o.hobby[0] = &#x27;篮球&#x27;<br>    o.family.baby = &#x27;老pink&#x27;<br>    console.log(obj)<br>    console.log([1, 23] instanceof Object)<br>    // 复习<br>    // const obj = &#123;<br>    //   uname: &#x27;pink&#x27;,<br>    //   age: 18,<br>    //   hobby: [&#x27;乒乓球&#x27;, &#x27;足球&#x27;]<br>    // &#125;<br>    // function deepCopy(&#123; &#125;, oldObj) &#123;<br>    //   // k 属性名  oldObj[k] 属性值<br>    //   for (let k in oldObj) &#123;<br>    //     // 处理数组的问题   k 变量<br>    //     newObj[k] = oldObj[k]<br>    //     // o.uname = &#x27;pink&#x27;<br>    //     // newObj.k  = &#x27;pink&#x27;<br>    //   &#125;<br>    // &#125;<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h4 id="js库lodash里面cloneDeep内部实现了深拷贝"><a href="#js库lodash里面cloneDeep内部实现了深拷贝" class="headerlink" title="js库lodash里面cloneDeep内部实现了深拷贝"></a>js库lodash里面cloneDeep内部实现了深拷贝</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;!-- 先引用 --&gt;<br>  &lt;script src=&quot;./lodash.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    const obj = &#123;<br>      uname: &#x27;pink&#x27;,<br>      age: 18,<br>      hobby: [&#x27;乒乓球&#x27;, &#x27;足球&#x27;],<br>      family: &#123;<br>        baby: &#x27;小pink&#x27;<br>      &#125;<br>    &#125;<br>    const o = _.cloneDeep(obj)<br>    console.log(o)<br>    o.family.baby = &#x27;老pink&#x27;<br>    console.log(obj)<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h4 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;body&gt;<br>  &lt;script&gt;<br>    const obj = &#123;<br>      uname: &#x27;pink&#x27;,<br>      age: 18,<br>      hobby: [&#x27;乒乓球&#x27;, &#x27;足球&#x27;],<br>      family: &#123;<br>        baby: &#x27;小pink&#x27;<br>      &#125;<br>    &#125;<br>    // 把对象转换为 JSON 字符串<br>    // console.log(JSON.stringify(obj))<br>    const o = JSON.parse(JSON.stringify(obj))<br>    console.log(o)<br>    o.family.baby = &#x27;123&#x27;<br>    console.log(obj)<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><blockquote>
<p>了解 JavaScript 中程序异常处理的方法，提升代码运行的健壮性。</p>
</blockquote>
<h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><p>异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行</p>
<p>总结：</p>
<ol>
<li>throw 抛出异常信息，程序也会终止执行</li>
<li>throw 后面跟的是错误提示信息</li>
<li>Error 对象配合 throw 使用，能够设置更详细的错误信息</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function counter(x, y) &#123;<br><br>    if(!x || !y) &#123;<br>      // throw &#x27;参数不能为空!&#x27;;<br>      throw new Error(&#x27;参数不能为空!&#x27;)<br>    &#125;<br><br>    return x + y<br>  &#125;<br><br>  counter()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>throw</code> 抛出异常信息，程序也会终止执行</li>
<li><code>throw</code> 后面跟的是错误提示信息</li>
<li><code>Error</code> 对象配合 <code>throw</code> 使用，能够设置更详细的错误信息</li>
</ol>
<h3 id="try-…-catch"><a href="#try-…-catch" class="headerlink" title="try … catch"></a>try … catch</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>   function foo() &#123;<br>      try &#123;<br>        // 查找 DOM 节点<br>        const p = document.querySelector(&#x27;.p&#x27;)<br>        p.style.color = &#x27;red&#x27;<br>      &#125; catch (error) &#123;<br>        // try 代码段中执行有错误时，会执行 catch 代码段<br>        // 查看错误信息<br>        console.log(error.message)<br>        // 终止代码继续执行<br>        return<br><br>      &#125;<br>      finally &#123;<br>          alert(&#x27;执行&#x27;)<br>      &#125;<br>      console.log(&#x27;如果出现错误，我的语句不会执行&#x27;)<br>    &#125;<br>    foo()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>try...catch</code> 用于捕获错误信息</li>
<li>将预估可能发生错误的代码写在 <code>try</code> 代码段中</li>
<li>如果 <code>try</code> 代码段中出现错误后，会执行 <code>catch</code> 代码段，并截获到错误信息</li>
</ol>
<h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h3><p>相当于断点调试</p>
<h2 id="处理this"><a href="#处理this" class="headerlink" title="处理this"></a>处理this</h2><blockquote>
<p>了解函数中 this 在不同场景下的默认值，知道动态指定函数 this 值的方法。</p>
</blockquote>
<p><code>this</code> 是 JavaScript 最具“魅惑”的知识点，不同的应用场合 <code>this</code> 的取值可能会有意想不到的结果，在此我们对以往学习过的关于【 <code>this</code> 默认的取值】情况进行归纳和总结。</p>
<h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p><strong>普通函数</strong>的调用方式决定了 <code>this</code> 的值，即【谁调用 <code>this</code> 的值指向谁】，如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // 普通函数<br>  function sayHi() &#123;<br>    console.log(this)  <br>  &#125;<br>  // 函数表达式<br>  const sayHello = function () &#123;<br>    console.log(this)<br>  &#125;<br>  // 函数的调用方式决定了 this 的值<br>  sayHi() // window<br>  window.sayHi()<br>	<br><br>// 普通对象<br>  const user = &#123;<br>    name: &#x27;小明&#x27;,<br>    walk: function () &#123;<br>      console.log(this)<br>    &#125;<br>  &#125;<br>  // 动态为 user 添加方法<br>  user.sayHi = sayHi<br>  uesr.sayHello = sayHello<br>  // 函数调用方式，决定了 this 的值<br>  user.sayHi()<br>  user.sayHello()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>注： 普通函数没有明确调用者时 <code>this</code> 值为 <code>window</code>，严格模式下没有调用者时 <code>this</code> 的值为 <code>undefined</code>。</p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><strong>箭头函数</strong>中的 <code>this</code> 与普通函数完全不同，也不受调用方式的影响，事实上箭头函数中并不存在 <code>this</code> ！箭头函数中访问的 <code>this</code> 不过是箭头函数所在作用域的 <code>this</code> 变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>    <br>  console.log(this) // 此处为 window<br>  // 箭头函数<br>  const sayHi = function() &#123;<br>    console.log(this) // 该箭头函数中的 this 为函数声明环境中 this 一致<br>  &#125;<br>  // 普通对象<br>  const user = &#123;<br>    name: &#x27;小明&#x27;,<br>    // 该箭头函数中的 this 为函数声明环境中 this 一致<br>    walk: () =&gt; &#123;<br>      console.log(this)<br>    &#125;,<br>    <br>    sleep: function () &#123;<br>      let str = &#x27;hello&#x27;<br>      console.log(this)<br>      let fn = () =&gt; &#123;<br>        console.log(str)<br>        console.log(this) // 该箭头函数中的 this 与 sleep 中的 this 一致<br>      &#125;<br>      // 调用箭头函数<br>      fn();<br>    &#125;<br>  &#125;<br><br>  // 动态添加方法<br>  user.sayHi = sayHi<br>  <br>  // 函数调用<br>  user.sayHi()<br>  user.sleep()<br>  user.walk()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>在开发中【使用箭头函数前需要考虑函数中 <code>this</code> 的值】，<strong>事件回调函数</strong>使用箭头函数时，<code>this</code> 为全局的 <code>window</code>，因此DOM事件回调函数不推荐使用箭头函数，如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // DOM 节点<br>  const btn = document.querySelector(&#x27;.btn&#x27;)<br>  // 箭头函数 此时 this 指向了 window<br>  btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123;<br>    console.log(this)<br>  &#125;)<br>  // 普通函数 此时 this 指向了 DOM 对象<br>  btn.addEventListener(&#x27;click&#x27;, function () &#123;<br>    console.log(this)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>同样由于箭头函数 <code>this</code> 的原因，<strong>基于原型的面向对象也不推荐采用箭头函数</strong>，如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  function Person() &#123;<br>  &#125;<br>  // 原型对像上添加了箭头函数<br>  Person.prototype.walk = () =&gt; &#123;<br>    console.log(&#x27;人都要走路...&#x27;)<br>    console.log(this); // window<br>  &#125;<br>  const p1 = new Person()<br>  p1.walk()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h3><p>以上归纳了普通函数和箭头函数中关于 <code>this</code> 默认值的情形，不仅如此 JavaScript 中还允许指定函数中 <code>this</code> 的指向，有 3 个方法可以动态指定普通函数中 <code>this</code> 的指向：</p>
<h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>使用 <code>call</code> 方法调用函数，同时指定函数中 <code>this</code> 的值，使用方法如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // 普通函数<br>  function sayHi() &#123;<br>    console.log(this);<br>  &#125;<br><br>  let user = &#123;<br>    name: &#x27;小明&#x27;,<br>    age: 18<br>  &#125;<br><br>  let student = &#123;<br>    name: &#x27;小红&#x27;,<br>    age: 16<br>  &#125;<br><br>  // 调用函数并指定 this 的值<br>  sayHi.call(user); // this 值为 user<br>  sayHi.call(student); // this 值为 student<br><br>  // 求和函数<br>  function counter(x, y) &#123;<br>    return x + y;<br>  &#125;<br><br>  // 调用 counter 函数，并传入参数<br>  let result = counter.call(null, 5, 10);<br>  console.log(result);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>call</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li>
<li>使用 <code>call</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li>
<li><code>call</code> 方法的其余参数会依次自动传入函数做为函数的参数</li>
</ol>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p>使用 <code>call</code> 方法<strong>调用函数</strong>，同时指定函数中 <code>this</code> 的值，使用方法如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // 普通函数<br>  function sayHi() &#123;<br>    console.log(this)<br>  &#125;<br><br>  let user = &#123;<br>    name: &#x27;小明&#x27;,<br>    age: 18<br>  &#125;<br><br>  let student = &#123;<br>    name: &#x27;小红&#x27;,<br>    age: 16<br>  &#125;<br><br>  // 调用函数并指定 this 的值<br>  sayHi.apply(user) // this 值为 user<br>  sayHi.apply(student) // this 值为 student<br><br>  // 求和函数<br>  function counter(x, y) &#123;<br>    return x + y<br>  &#125;<br>  // 调用 counter 函数，并传入参数<br>  let result = counter.apply(null, [5, 10])<br>  console.log(result)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><code>apply</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li>
<li>使用 <code>apply</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li>
<li><code>apply</code> 方法第2个参数为数组，数组的单元值依次自动传入函数做为函数的参数</li>
</ol>
<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p><code>bind</code> 方法并<strong>不会调用函数</strong>，而是创建一个指定了 <code>this</code> 值的新函数，使用方法如下代码所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;script&gt;<br>  // 普通函数<br>  function sayHi() &#123;<br>    console.log(this)<br>  &#125;<br>  let user = &#123;<br>    name: &#x27;小明&#x27;,<br>    age: 18<br>  &#125;<br>  // 调用 bind 指定 this 的值<br>  let sayHello = sayHi.bind(user);<br>  // 调用使用 bind 创建的新函数<br>  sayHello()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>注：<code>bind</code> 方法创建新的函数，与原函数的唯一的变化是改变了 <code>this</code> 的值。</p>
<h2 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h2><ol>
<li>防抖（debounce） 所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</li>
<li>节流（throttle） 所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数</li>
</ol>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day1</title>
    <url>/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/</url>
    <content><![CDATA[<blockquote>
<p>本文是在学习vue的第一天整理的笔记，涵盖知识范围有：vue的基本概念，开发者工具安装，插值表达式，响应式特性，常见指令等。</p>
</blockquote>
<h2 id="Ⅰ、什么是Vue"><a href="#Ⅰ、什么是Vue" class="headerlink" title="Ⅰ、什么是Vue"></a>Ⅰ、什么是Vue</h2><p>概念：Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套 **构建用户界面 ** 的 <strong>渐进式</strong> <strong>框架</strong></p>
<p>Vue2官网：<a href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/</a></p>
<h3 id="1-什么是构建用户界面"><a href="#1-什么是构建用户界面" class="headerlink" title="1.什么是构建用户界面"></a>1.什么是构建用户界面</h3><p><strong>基于数据</strong>渲染出用户可以看到的<strong>界面</strong></p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681875887026.png" alt="68187588702"></p>
<h3 id="2-什么是渐进式"><a href="#2-什么是渐进式" class="headerlink" title="2.什么是渐进式"></a>2.什么是渐进式</h3><p>所谓渐进式就是循序渐进，不一定非得把Vue中的所有API都学完才能开发Vue，可以学一点开发一点</p>
<h4 id="Vue的两种开发方式："><a href="#Vue的两种开发方式：" class="headerlink" title="Vue的两种开发方式："></a>Vue的两种开发方式：</h4><ol>
<li><p>Vue核心包开发</p>
<p>场景：局部模块改造</p>
</li>
<li><p>Vue核心包&amp;Vue插件&amp;工程化</p>
<p>场景：整站开发</p>
</li>
</ol>
<h3 id="3-什么是框架"><a href="#3-什么是框架" class="headerlink" title="3.什么是框架"></a>3.什么是框架</h3><p>所谓框架：就是一套完整的解决方案</p>
<p><strong>For example</strong>	</p>
<p>如果把一个完整的项目比喻为一个装修好的房子，那么框架就是一个毛坯房。</p>
<p>我们只需要在“毛坯房”的基础上，增加功能代码即可。</p>
<p>提到框架，不得不提一下库。</p>
<ul>
<li>库，类似工具箱，是一堆方法的集合，比如 axios、lodash、echarts等</li>
<li>框架，是一套完整的解决方案，实现了大部分功能，我们只需要按照一定的规则去编码即可。</li>
</ul>
<p>下图是 库 和 框架的对比。</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681876620277.png" alt="68187662027"></p>
<p>框架的特点：有一套必须让开发者遵守的<strong>规则</strong>或者<strong>约束</strong></p>
<p>咱们学框架就是学习的这些规则 <a href="https://v2.cn.vuejs.org/">官网</a></p>
<h2 id="Ⅱ、创建Vue实例"><a href="#Ⅱ、创建Vue实例" class="headerlink" title="Ⅱ、创建Vue实例"></a>Ⅱ、创建Vue实例</h2><p><strong>核心步骤（4步）：</strong></p>
<ol>
<li><p>准备容器</p>
</li>
<li><p>引包（官网） — 开发版本&#x2F;生产版本</p>
</li>
<li><p>创建Vue实例  new Vue()</p>
</li>
<li><p>指定配置项，渲染数据</p>
<p>​	el:指定挂载点</p>
<p>​	data提供数据</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681877405007.png" alt="1681877405007"></p>
</li>
</ol>
<h2 id="Ⅲ、插值表达式"><a href="#Ⅲ、插值表达式" class="headerlink" title="Ⅲ、插值表达式 "></a>Ⅲ、插值表达式 "{{}}"</h2><p>插值表达式是一种Vue的模板语法</p>
<p>我们可以用插值表达式渲染出Vue提供的数据</p>
<h3 id="1-作用：利用表达式进行插值，渲染到页面中"><a href="#1-作用：利用表达式进行插值，渲染到页面中" class="headerlink" title="1.作用：利用表达式进行插值，渲染到页面中"></a>1.作用：利用表达式进行插值，渲染到页面中</h3><p>表达式：是可以被求值的代码，JS引擎会讲其计算出一个结果</p>
<p>以下的情况都是表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">money + <span class="hljs-number">100</span><br>money - <span class="hljs-number">100</span><br>money * <span class="hljs-number">10</span><br>money / <span class="hljs-number">10</span> <br>price &gt;= <span class="hljs-number">100</span> ? <span class="hljs-string">&#x27;真贵&#x27;</span>:<span class="hljs-string">&#x27;还行&#x27;</span><br>obj.<span class="hljs-property">name</span><br>arr[<span class="hljs-number">0</span>]<br><span class="hljs-title function_">fn</span>()<br>obj.<span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure>



<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><p>插值表达式语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;h3&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;nickName.toUpperCase()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;age &gt;= 18 ? &#x27;成年&#x27;:&#x27;未成年&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;obj.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;fn()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h3 id="3-错误用法"><a href="#3-错误用法" class="headerlink" title="3.错误用法"></a>3.错误用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>在插值表达式中使用的数据 必须在data中进行了提供<br>&lt;p&gt;&#123;&#123;hobby&#125;&#125;&lt;<span class="hljs-regexp">/p&gt;  /</span><span class="hljs-regexp">/如果在data中不存在 则会报错</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">2.支持的是表达式，而非语句，比如：if   for ...</span><br><span class="hljs-regexp">&lt;p&gt;&#123;&#123;if&#125;&#125;&lt;/</span>p&gt;<br><br><span class="hljs-number">3.</span>不能在标签属性中使用 &#123;&#123;  &#125;&#125; 插值 (插值表达式只能标签中间使用)<br>&lt;p title=<span class="hljs-string">&quot;&#123;&#123;username&#125;&#125;&quot;</span>&gt;我是P标签&lt;/p&gt;<br></code></pre></td></tr></table></figure>



<h2 id="Ⅳ、响应式特性"><a href="#Ⅳ、响应式特性" class="headerlink" title="Ⅳ、响应式特性"></a>Ⅳ、响应式特性</h2><h3 id="1-什么是响应式？"><a href="#1-什么是响应式？" class="headerlink" title="1.什么是响应式？"></a>1.什么是响应式？</h3><p>​	简单理解就是数据变，视图对应变。 </p>
<h3 id="2-如何访问-和-修改-data中的数据（响应式演示）"><a href="#2-如何访问-和-修改-data中的数据（响应式演示）" class="headerlink" title="2.如何访问 和 修改 data中的数据（响应式演示）"></a>2.如何访问 和 修改 data中的数据（响应式演示）</h3><p>data中的数据, 最终会被添加到实例上</p>
<p>① 访问数据： “实例.属性名”</p>
<p>② 修改数据： “实例.属性名”&#x3D; “值”</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681888539340.png" alt="68188853934"></p>
<h2 id="Ⅴ、Vue开发者工具安装"><a href="#Ⅴ、Vue开发者工具安装" class="headerlink" title="Ⅴ、Vue开发者工具安装"></a>Ⅴ、Vue开发者工具安装</h2><ol>
<li>通过谷歌应用商店安装（国外网站）</li>
<li>极简插件下载（推荐） <a href="https://chrome.zzzmh.cn/index">https://chrome.zzzmh.cn/index</a></li>
</ol>
<p>安装步骤：</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681889390406.png" alt="68188939040"></p>
<p>安装之后可以F12后看到多一个Vue的调试面板</p>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681889483446.png" alt="68188948344"></p>
<h2 id="Ⅵ、Vue中的常用指令"><a href="#Ⅵ、Vue中的常用指令" class="headerlink" title="Ⅵ、Vue中的常用指令"></a>Ⅵ、Vue中的常用指令</h2><p><strong>概念：</strong>指令（Directives）是 Vue 提供的带有 <strong>v- 前缀</strong> 的 特殊 标签<strong>属性</strong>。</p>
<p>作用：提高程序员操作 DOM 的效率。</p>
<p>vue 中的指令按照不同的用途可以分为如下 6 大类：</p>
<ul>
<li>内容渲染指令（v-html、v-text）</li>
<li>条件渲染指令（v-show、v-if、v-else、v-else-if）</li>
<li>事件绑定指令（v-on）</li>
<li>属性绑定指令 （v-bind）</li>
<li>双向绑定指令（v-model）</li>
<li>列表渲染指令（v-for）</li>
</ul>
<p>指令是 vue 开发中最基础、最常用、最简单的知识点。</p>
<h2 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h2><p>内容渲染指令用来辅助开发者渲染 DOM 元素的文本内容。常用的内容渲染指令有如下2 个：</p>
<ul>
<li><p>v-text（类似innerText）</p>
</li>
<li><ul>
<li>使用语法：<code>&lt;p v-text=&quot;uname&quot;&gt;hello&lt;/p&gt;</code>，意思是将 uame 值渲染到 p 标签中</li>
<li>类似 innerText，使用该语法，会覆盖 p 标签原有内容</li>
</ul>
</li>
<li><p>v-html（类似 innerHTML）</p>
</li>
<li><ul>
<li>使用语法：<code>&lt;p v-html=&quot;intro&quot;&gt;hello&lt;/p&gt;</code>，意思是将 intro 值渲染到 p 标签中</li>
<li>类似 innerHTML，使用该语法，会覆盖 p 标签原有内容</li>
<li>类似 innerHTML，使用该语法，能够将HTML标签的样式呈现出来。</li>
</ul>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"> <br>  &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>	<span class="hljs-comment">// 既然指令是vue提供的特殊的html属性，所以咱们写的时候就当成属性来用即可</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;uname&quot;</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span> <br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;intro&quot;</span>&gt;</span>简介：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  &lt;/div&gt; <br><br>&lt;script&gt;<br>        const app = new Vue(&#123;<br>            el:&#x27;#app&#x27;,<br>            data:&#123;<br>                uname:&#x27;张三&#x27;,<br>                intro:&#x27;&lt;h2&gt;这是一个&lt;strong&gt;非常优秀&lt;/strong&gt;的boy&lt;h2&gt;&#x27;<br>            &#125;<br>        &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><p>条件判断指令，用来辅助开发者按需控制 DOM 的显示与隐藏。条件渲染指令有如下两个，分别是：</p>
<ol>
<li><p>v-show</p>
<ol>
<li>作用：  控制元素显示隐藏</li>
<li>语法：  v-show &#x3D; “表达式”   表达式值为 true 显示， false 隐藏</li>
<li>原理：  切换 display:none 控制显示隐藏</li>
<li>场景：频繁切换显示隐藏的场景</li>
</ol>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681891228284.png" alt="68189122828"></p>
</li>
<li><p>v-if</p>
<ol>
<li>作用：  控制元素显示隐藏（条件渲染）</li>
<li>语法：  v-if&#x3D; “表达式”          表达式值 true显示， false 隐藏</li>
<li>原理：  基于条件判断，是否创建 或 移除元素节点</li>
<li>场景：  要么显示，要么隐藏，不频繁切换的场景</li>
</ol>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681891237750.png" alt="68189123775"></p>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是v-show控制的盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是v-if控制的盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br>   <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
</li>
<li><p>v-else 和 v-else-if</p>
<ol>
<li>作用：辅助v-if进行判断渲染</li>
<li>语法：v-else  v-else-if&#x3D;”表达式”</li>
<li>需要紧接着v-if使用</li>
</ol>
</li>
</ol>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>性别：♂ 男<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>性别：♀ 女<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  &lt;hr&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>成绩评定A：奖励电脑一台<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>成绩评定B：奖励周末郊游<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>成绩评定C：奖励零食礼包<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>成绩评定D：惩罚一周不能玩手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">gender</span>: <span class="hljs-number">2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">score</span>: <span class="hljs-number">95</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h2 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h2><p>使用Vue时，如需为DOM注册事件，及其的简单，语法如下：</p>
<ul>
<li>&lt;button v-on:事件名&#x3D;”内联语句”&gt;按钮</li>
<li>&lt;button v-on:事件名&#x3D;”处理函数”&gt;按钮</li>
<li>&lt;button v-on:事件名&#x3D;”处理函数(实参)”&gt;按钮</li>
<li><code>v-on:</code> **简写为 **@</li>
</ul>
<ol>
<li><p>内联语句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count--&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &lt;/div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">count</span>: <span class="hljs-number">100</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
</li>
<li><p>事件处理函数</p>
<p>注意：</p>
<ul>
<li>事件处理函数应该写到一个跟data同级的配置项（methods）中</li>
<li>methods中的函数内部的this都指向Vue实例</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>切换显示隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &lt;/div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p>  3.给事件处理函数传参</p>
<ul>
<li><p>如果不传递任何参数，则方法无需加小括号；methods方法中可以直接使用 e 当做事件对象</p>
</li>
<li><p>如果传递了参数，则实参 <code>$event</code> 表示事件对象，固定用法。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;style&gt;<br>   .<span class="hljs-property">box</span> &#123;<br>     <span class="hljs-attr">border</span>: 3px solid #<span class="hljs-number">000000</span>;<br>     border-<span class="hljs-attr">radius</span>: 10px;<br>     <span class="hljs-attr">padding</span>: 20px;<br>     <span class="hljs-attr">margin</span>: 20px;<br>     <span class="hljs-attr">width</span>: 200px;<br>   &#125;<br>   h3 &#123;<br>     <span class="hljs-attr">margin</span>: 10px <span class="hljs-number">0</span> 20px <span class="hljs-number">0</span>;<br>   &#125;<br>   p &#123;<br>     <span class="hljs-attr">margin</span>: 20px;<br>   &#125;<br> &lt;/style&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑自动售货机<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>可乐5元<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>咖啡10元<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>牛奶8元<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>银行卡余额：&#123;&#123; money &#125;&#125;元<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-attr">money</span>: <span class="hljs-number">100</span></span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h2 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h2><ol>
<li><strong>作用：</strong>动态设置html的标签属性 比如：src、url、title</li>
<li><strong>语法</strong>：**v-bind:**属性名&#x3D;“表达式”</li>
<li>**v-bind:**可以简写成 &#x3D;&gt;   <strong>:</strong></li>
</ol>
<p>比如，有一个图片，它的 <code>src</code> 属性值，是一个图片地址。这个地址在数据 data 中存储。</p>
<p>则可以这样设置属性值：</p>
<ul>
<li><code>&lt;img v-bind:src=&quot;url&quot; /&gt;</code></li>
<li><code>&lt;img :src=&quot;url&quot; /&gt;</code>   （v-bind可以省略）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;imgUrl&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgUrl&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">imgUrl</span>: <span class="hljs-string">&#x27;./imgs/10-02.png&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello 波仔&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><p>Vue 提供了 v-for 列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构。</p>
<p>v-for 指令需要使用 <code>(item, index) in arr</code> 形式的特殊语法，其中：</p>
<ul>
<li>item 是数组中的每一项</li>
<li>index 是每一项的索引，不需要可以省略</li>
<li>arr 是被遍历的数组</li>
</ul>
<p>此语法也可以遍历<strong>对象和数字</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//遍历对象</span><br>&lt;div v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(value, key, index) in object&quot;</span>&gt;&#123;&#123;value&#125;&#125;&lt;/div&gt;<br><span class="hljs-attr">value</span>:对象中的值<br><span class="hljs-attr">key</span>:对象中的键<br><span class="hljs-attr">index</span>:遍历索引从<span class="hljs-number">0</span>开始<br><br><span class="hljs-comment">//遍历数字</span><br>&lt;p v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in 10&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;<br>item从<span class="hljs-number">1</span> 开始<br></code></pre></td></tr></table></figure>



<h2 id="v-for中的key"><a href="#v-for中的key" class="headerlink" title="v-for中的key"></a>v-for中的key</h2><p><strong>语法：</strong> key&#x3D;”唯一值”</p>
<p><strong>作用：</strong>给列表项添加的<strong>唯一标识</strong>。便于Vue进行列表项的<strong>正确排序复用</strong>。</p>
<p><strong>为什么加key：</strong>Vue 的默认行为会尝试原地修改元素（<strong>就地复用</strong>）</p>
<p>实例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in booksList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.author &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>key 的值只能是字符串 或 数字类型</li>
<li>key 的值必须具有唯一性</li>
<li>推荐使用  id 作为 key（唯一），不推荐使用 index 作为 key（会变化，不对应）</li>
</ol>
<h2 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h2><p>所谓双向绑定就是：</p>
<ol>
<li>数据改变后，呈现的页面结果会更新</li>
<li>页面结果更新后，数据也会随之而变</li>
</ol>
<p><strong>作用：</strong> 给<strong>表单元素</strong>（input、radio、select）使用，双向绑定数据，可以快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素内容</p>
<p><strong>语法：</strong>v-model&#x3D;”变量”</p>
<p><strong>需求：</strong>使用双向绑定实现以下需求</p>
<ol>
<li>点击登录按钮获取表单中的内容</li>
<li>点击重置按钮清空表单中的内容</li>
</ol>
<p><img src="/2023/08/06/vue%E5%AD%A6%E4%B9%A0Day1/1681913125738.png" alt="68191312573"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    账户：&lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt; &lt;br&gt;&lt;br&gt;<br>    密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span>&gt; &lt;br&gt;&lt;br&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &lt;/div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>新用户注册(正则表达式)</title>
    <url>/2023/07/26/js%E6%96%B0%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%B0%8F%E6%A1%88%E4%BE%8B-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="js新用户注册小案例-正则表达式"><a href="#js新用户注册小案例-正则表达式" class="headerlink" title="js新用户注册小案例(正则表达式)"></a>js新用户注册小案例(正则表达式)</h1><h3 id="本文是在学习javaScript中Web-APIs板块为更加熟练掌握理解正则表达式的练习小案例"><a href="#本文是在学习javaScript中Web-APIs板块为更加熟练掌握理解正则表达式的练习小案例" class="headerlink" title="本文是在学习javaScript中Web APIs板块为更加熟练掌握理解正则表达式的练习小案例"></a>本文是在学习javaScript中Web APIs板块为更加熟练掌握理解正则表达式的练习小案例</h3><h4 id="网页的业务模块分析"><a href="#网页的业务模块分析" class="headerlink" title="网页的业务模块分析"></a>网页的业务模块分析</h4><ol>
<li>发送验证码模块</li>
<li>各个表单验证模块</li>
<li>勾选已经阅读同意模块</li>
<li>下一步验证模块，只要上面有一个input验证不通过就不同意提交</li>
</ol>
<h4 id="网页效果如下"><a href="#网页效果如下" class="headerlink" title="网页效果如下"></a>网页效果如下</h4><p><img src="/2023/07/26/js%E6%96%B0%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%B0%8F%E6%A1%88%E4%BE%8B-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A1%88%E4%BE%8B%E6%95%88%E6%9E%9C%E5%9B%BE.png"></p>
<h4 id="完整代码实现以及包含的css代码如下，可按需取用"><a href="#完整代码实现以及包含的css代码如下，可按需取用" class="headerlink" title="完整代码实现以及包含的css代码如下，可按需取用"></a>完整代码实现以及包含的css代码如下，可按需取用</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>newUser-registery<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/common.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/register.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://at.alicdn.com/t/font_2143783_iq6z4ey5vu.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- 卡片 --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-card&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>新用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-zhanghao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;设置用户名称&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-shouji&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入手机号码  &quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-zhibiaozhushibiaozhu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;短信验证码&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>发送验证码<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-suo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;设置6至20位字母、数字和符号组合&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-prop</span>=<span class="hljs-string">&quot;confirm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-suo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;confirm&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请再次输入上面密码&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item pl50&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-queren&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                已阅读并同意<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>《用户服务协议》<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xtx-form-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>下一步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- &lt;a class=&quot;submit&quot; href=&quot;javascript:;&quot;&gt;下一步&lt;/a&gt; --&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 1. 发送短信验证码模块</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> code = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.code&#x27;</span>)</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>  <span class="hljs-comment">// 通过一个变量来控制   节流阀 </span></span><br><span class="language-javascript">          <span class="hljs-comment">//  1.1 点击事件</span></span><br><span class="language-javascript">          code.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">              <span class="hljs-comment">// 取反了，不能马上第二次点击</span></span><br><span class="language-javascript">              flag = <span class="hljs-literal">false</span></span><br><span class="language-javascript">              <span class="hljs-keyword">let</span> i = <span class="hljs-number">5</span></span><br><span class="language-javascript">              <span class="hljs-comment">// 点击完毕之后立马触发</span></span><br><span class="language-javascript">              code.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`0<span class="hljs-subst">$&#123;i&#125;</span>秒后重新获取`</span></span><br><span class="language-javascript">              <span class="hljs-comment">// 开启定时器</span></span><br><span class="language-javascript">              <span class="hljs-keyword">let</span> timerId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                i--</span><br><span class="language-javascript">                code.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`0<span class="hljs-subst">$&#123;i&#125;</span>秒后重新获取`</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                  <span class="hljs-comment">// 清除定时器</span></span><br><span class="language-javascript">                  <span class="hljs-built_in">clearInterval</span>(timerId)</span><br><span class="language-javascript">                  <span class="hljs-comment">// 从新获取</span></span><br><span class="language-javascript">                  code.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`重新获取`</span></span><br><span class="language-javascript">                  <span class="hljs-comment">// 到时间了，可以开启 flag了</span></span><br><span class="language-javascript">                  flag = <span class="hljs-literal">true</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">              &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">        &#125;)();</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 2. 验证的是用户名</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 2.1 获取用户名表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=username]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 2.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        username.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyName)</span><br><span class="language-javascript">        <span class="hljs-comment">// 2.3 封装verifyName函数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyName</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = username.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 2.4 定规则  用户名</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9-_]&#123;6,10&#125;$/</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!reg.<span class="hljs-title function_">test</span>(username.<span class="hljs-property">value</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;输入不合法,请输入6~10位&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 2.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 3. 验证的是手机号</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 2.1 获取手机表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> phone = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=phone]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 2.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        phone.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyPhone)</span><br><span class="language-javascript">        <span class="hljs-comment">// 2.3 verifyPhone</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyPhone</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = phone.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 2.4 定规则  用户名</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^1(3\d|4[5-9]|5[0-35-9]|6[567]|7[0-8]|8\d|9[0-35-9])\d&#123;8&#125;$/</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!reg.<span class="hljs-title function_">test</span>(phone.<span class="hljs-property">value</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;输入不合法,请输入正确的11位手机号码&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 2.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 4. 验证的是验证码</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 4.1 获取验证码表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> codeInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=code]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//4.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        codeInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyCode)</span><br><span class="language-javascript">        <span class="hljs-comment">// 4.3 verifyPhone</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyCode</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = codeInput.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 4.4 定规则  验证码</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^\d&#123;6&#125;$/</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!reg.<span class="hljs-title function_">test</span>(codeInput.<span class="hljs-property">value</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;输入不合法,6 位数字&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 4.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 5. 验证的是密码框</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 5.1 获取密码表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> password = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=password]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//5.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        password.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyPwd)</span><br><span class="language-javascript">        <span class="hljs-comment">// 5.3 verifyPhone</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyPwd</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = password.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 5.4 定规则  密码</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9-_]&#123;6,20&#125;$/</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!reg.<span class="hljs-title function_">test</span>(password.<span class="hljs-property">value</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;输入不合法,6~20位数字字母符号组成&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 5.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 6. 密码的再次验证</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 6.1 获取再次验证表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> confirm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;[name=confirm]&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//6.2 使用change事件  值发生变化的时候</span></span><br><span class="language-javascript">        confirm.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, verifyConfirm)</span><br><span class="language-javascript">        <span class="hljs-comment">// 6.3 verifyPhone</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyConfirm</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> span = confirm.<span class="hljs-property">nextElementSibling</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 6.4 当前表单的值不等于 密码框的值就是错误的</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (confirm.<span class="hljs-property">value</span> !== password.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(11)</span></span><br><span class="language-javascript">            span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;两次密码输入不一致&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 6.5 合法的 就清空span</span></span><br><span class="language-javascript">          span.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 7. 我同意</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> queren = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.icon-queren&#x27;</span>)</span><br><span class="language-javascript">        queren.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 切换类  原来有的就删掉，原来没有就添加</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;icon-queren2&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-comment">// 8. 提交模块</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;form&#x27;</span>)</span><br><span class="language-javascript">        form.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 判断是否勾选我同意模块 ，如果有 icon-queren2说明就勾选了，否则没勾选</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!queren.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;icon-queren2&#x27;</span>)) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请勾选同意协议&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 阻止提交</span></span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 依次判断上面的每个框框 是否通过，只要有一个没有通过的就阻止</span></span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(verifyName())</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyName</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyPhone</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyCode</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyPwd</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyConfirm</span>()) e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="register-css"><a href="#register-css" class="headerlink" title="register.css"></a>register.css</h4><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.xtx-wrapper</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f5f5</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-wrapper</span> <span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1240px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-card</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-card</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;<br>  <span class="hljs-attribute">font-weight</span>: normal;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">180px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">180px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">460px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">24px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.msg</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff4d4f</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">2px</span>;<br>&#125;<br><br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span><span class="hljs-selector-class">.pl50</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.iconfont</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">13px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e4e4e4</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">40px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span><span class="hljs-selector-class">.error</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#ff4d4f</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">::placeholder</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cccccc</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.submit</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.code</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">190px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.code</span><span class="hljs-selector-class">.ing</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cccccc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">720px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">96px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">48px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">63px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.step</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#e4e4e4</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">46px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">23px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#e4e4e4</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:first</span>-child<span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:last-child</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-class">.active</span> <span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-class">.active</span> <span class="hljs-selector-class">.step</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-class">.active</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.xtx-steps</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-class">.active</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">360px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">80px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e4e4e4</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">::placeholder</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cccccc</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:read-only</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f5f5</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.submit</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.captcha</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.captcha</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">134px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.captcha</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.code</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">310px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-form-label</span> <span class="hljs-selector-class">.xtx-form-item</span> <span class="hljs-selector-class">.code</span><span class="hljs-selector-class">.ing</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#cccccc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> &#123;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">250px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> <span class="hljs-selector-class">.iconfont</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#1DC779</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> <span class="hljs-selector-class">.tit</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> <span class="hljs-selector-class">.desc</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-success-box</span> <span class="hljs-selector-class">.btn</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="common-css"><a href="#common-css" class="headerlink" title="common.css"></a>common.css</h4><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@charset</span> <span class="hljs-string">&quot;UTF-8&quot;</span>;<br><span class="hljs-comment">/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */</span><br><span class="hljs-comment">/* Document</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the line height in all browsers.</span><br><span class="hljs-comment"> * 2. Prevent adjustments of font size after orientation changes in iOS.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.15</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  -webkit-text-size-adjust: <span class="hljs-number">100%</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/* Sections</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the margin in all browsers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Render the `main` element consistently in IE.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">main</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Correct the font size and margin on `h1` elements within `section` and</span><br><span class="hljs-comment"> * `article` contexts in Chrome, Firefox, and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0.67em</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Grouping content</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Add the correct box sizing in Firefox.</span><br><span class="hljs-comment"> * 2. Show the overflow in Edge and IE.</span><br><span class="hljs-comment"> */</span><br>hr &#123;<br>  <span class="hljs-attribute">box-sizing</span>: content-box;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">overflow</span>: visible;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the inheritance and scaling of font size in all browsers.</span><br><span class="hljs-comment"> * 2. Correct the odd `em` font sizing in all browsers.</span><br><span class="hljs-comment"> */</span><br>pre &#123;<br>  <span class="hljs-attribute">font-family</span>: monospace, monospace;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/* Text-level semantics</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the gray background on active links in IE 10.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: transparent;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Remove the bottom border in Chrome 57-</span><br><span class="hljs-comment"> * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">abbr</span><span class="hljs-selector-attr">[title]</span> &#123;<br>  <span class="hljs-attribute">border-bottom</span>: none;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">text-decoration</span>: underline;<br>  <span class="hljs-comment">/* 2 */</span><br>  <span class="hljs-attribute">text-decoration</span>: underline dotted;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct font weight in Chrome, Edge, and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">b</span>,<br><span class="hljs-selector-tag">strong</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bolder;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the inheritance and scaling of font size in all browsers.</span><br><span class="hljs-comment"> * 2. Correct the odd `em` font sizing in all browsers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">code</span>,<br><span class="hljs-selector-tag">kbd</span>,<br><span class="hljs-selector-tag">samp</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: monospace, monospace;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct font size in all browsers.</span><br><span class="hljs-comment"> */</span><br>small &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80%</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Prevent `sub` and `sup` elements from affecting the line height in</span><br><span class="hljs-comment"> * all browsers.</span><br><span class="hljs-comment"> */</span><br>sub,<br><span class="hljs-selector-tag">sup</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">75%</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">vertical-align</span>: baseline;<br>&#125;<br><br>sub &#123;<br>  <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">0.25em</span>;<br>&#125;<br><br><span class="hljs-selector-tag">sup</span> &#123;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">0.5em</span>;<br>&#125;<br><br><span class="hljs-comment">/* Embedded content</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the border on images inside links in IE 10.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">border-style</span>: none;<br>&#125;<br><br><span class="hljs-comment">/* Forms</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Change the font styles in all browsers.</span><br><span class="hljs-comment"> * 2. Remove the margin in Firefox and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">input</span>,<br>optgroup,<br>select,<br><span class="hljs-selector-tag">textarea</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.15</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Show the overflow in IE.</span><br><span class="hljs-comment"> * 1. Show the overflow in Edge.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">overflow</span>: visible;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the inheritance of text transform in Edge, Firefox, and IE.</span><br><span class="hljs-comment"> * 1. Remove the inheritance of text transform in Firefox.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>,<br>select &#123;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">text-transform</span>: none;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Correct the inability to style clickable types in iOS and Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;button&quot;</span>]</span>,<br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;reset&quot;</span>]</span>,<br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;submit&quot;</span>]</span> &#123;<br>  -webkit-appearance: button;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the inner border and padding in Firefox.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>::-moz-focus-inner,<br>[type=<span class="hljs-string">&quot;button&quot;</span>]::-moz-focus-inner,<br>[type=<span class="hljs-string">&quot;reset&quot;</span>]::-moz-focus-inner,<br>[type=<span class="hljs-string">&quot;submit&quot;</span>]::-moz-focus-inner &#123;<br>  <span class="hljs-attribute">border-style</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Restore the focus styles unset by the previous rule.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span>:-moz-focusring,<br>[type=<span class="hljs-string">&quot;button&quot;</span>]:-moz-focusring,<br>[type=<span class="hljs-string">&quot;reset&quot;</span>]:-moz-focusring,<br>[type=<span class="hljs-string">&quot;submit&quot;</span>]:-moz-focusring &#123;<br>  <span class="hljs-attribute">outline</span>: <span class="hljs-number">1px</span> dotted ButtonText;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Correct the padding in Firefox.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">fieldset</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.35em</span> <span class="hljs-number">0.75em</span> <span class="hljs-number">0.625em</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the text wrapping in Edge and IE.</span><br><span class="hljs-comment"> * 2. Correct the color inheritance from `fieldset` elements in IE.</span><br><span class="hljs-comment"> * 3. Remove the padding so developers are not caught out when they zero out</span><br><span class="hljs-comment"> *    `fieldset` elements in all browsers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">legend</span> &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">color</span>: inherit;<br>  <span class="hljs-comment">/* 2 */</span><br>  <span class="hljs-attribute">display</span>: table;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 3 */</span><br>  <span class="hljs-attribute">white-space</span>: normal;<br>  <span class="hljs-comment">/* 1 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct vertical alignment in Chrome, Firefox, and Opera.</span><br><span class="hljs-comment"> */</span><br>progress &#123;<br>  <span class="hljs-attribute">vertical-align</span>: baseline;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the default vertical scrollbar in IE 10+.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">textarea</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: auto;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Add the correct box sizing in IE 10.</span><br><span class="hljs-comment"> * 2. Remove the padding in IE 10.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;checkbox&quot;</span>]</span>,<br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;radio&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Correct the cursor style of increment and decrement buttons in Chrome.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;number&quot;</span>]</span>::-webkit-inner-spin-button,<br>[type=<span class="hljs-string">&quot;number&quot;</span>]::-webkit-outer-spin-button &#123;<br>  <span class="hljs-attribute">height</span>: auto;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the odd appearance in Chrome and Safari.</span><br><span class="hljs-comment"> * 2. Correct the outline style in Safari.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;search&quot;</span>]</span> &#123;<br>  -webkit-appearance: textfield;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">outline-offset</span>: -<span class="hljs-number">2px</span>;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove the inner padding in Chrome and Safari on macOS.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;search&quot;</span>]</span>::-webkit-search-decoration &#123;<br>  -webkit-appearance: none;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Correct the inability to style clickable types in iOS and Safari.</span><br><span class="hljs-comment"> * 2. Change font properties to `inherit` in Safari.</span><br><span class="hljs-comment"> */</span><br>::-webkit-file-upload-button &#123;<br>  -webkit-appearance: button;<br>  <span class="hljs-comment">/* 1 */</span><br>  <span class="hljs-attribute">font</span>: inherit;<br>  <span class="hljs-comment">/* 2 */</span><br>&#125;<br><br><span class="hljs-comment">/* Interactive</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Add the correct display in Edge, IE 10+, and Firefox.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">details</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Add the correct display in all browsers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">summary</span> &#123;<br>  <span class="hljs-attribute">display</span>: list-item;<br>&#125;<br><br><span class="hljs-comment">/* Misc</span><br><span class="hljs-comment">   ========================================================================== */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct display in IE 10+.</span><br><span class="hljs-comment"> */</span><br>template &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add the correct display in IE 10.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-attr">[hidden]</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br>* &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">14px</span>/<span class="hljs-number">1.4</span> <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, <span class="hljs-string">&quot;Microsoft Yahei&quot;</span>, <span class="hljs-string">&quot;Hiragino Sans GB&quot;</span>, <span class="hljs-string">&quot;Heiti SC&quot;</span>, <span class="hljs-string">&quot;WenQuanYi Micro Hei&quot;</span>, sans-serif;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h3</span>, <span class="hljs-selector-tag">h4</span>, <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">dl</span>, <span class="hljs-selector-tag">dd</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br><br><span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">max-height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot; &quot;</span>;<br>  <span class="hljs-attribute">display</span>: table;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  *zoom: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1240px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.sprites</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/sprites.png</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400px</span> <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>&#125;<br><br><span class="hljs-selector-class">.fl</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.fr</span> &#123;<br>  <span class="hljs-attribute">float</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.tc</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.green</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#CF4444</span>;<br>&#125;<br><br><span class="hljs-selector-class">.mb10</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fz20</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fz18</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fz16</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-bread</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">25px</span> <span class="hljs-number">25px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-bread</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-bread</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-common-btn</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">48px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-common-btn</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;primary&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-common-btn</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;info&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#CCCCCC</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.icon-yixuanze</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.icon-weixuanze</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.icon-yixuanze</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><br><span class="hljs-selector-class">.xtx-check</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.icon-weixuanze</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-comment">/** 顶部导航 **/</span><br><span class="hljs-selector-class">.xtx_topnav</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">53px</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">53px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">border-right</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-class">.mobile</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">160px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#666666</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_topnav</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-comment">/** 主导航及Logo **/</span><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_logo</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">132px</span>;<br>  <span class="hljs-attribute">text-indent</span>: -<span class="hljs-number">999px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/logo.png</span>);<br>  <span class="hljs-attribute">background-size</span>: contain;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-position</span>-x: center;<br>  <span class="hljs-attribute">background-position</span>-y: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#27BA9B</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">7px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.active</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:after</span>, <span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_navs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.active</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">38px</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">175px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">38px</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">39px</span>;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e7e7e7</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">float</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_wrapper</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">17px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">17px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/sprites.png</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400px</span> <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">80px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_wrapper</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_wrapper</span> <span class="hljs-selector-tag">input</span>::-webkit-input-placeholder &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_cart</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">8px</span> <span class="hljs-number">12px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">float</span>: right;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">120px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_header</span> <span class="hljs-selector-class">.xtx_search_cart</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">6px</span>;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#E26237</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-comment">/** 公共底部 **/</span><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">60px</span> <span class="hljs-number">0</span> <span class="hljs-number">40px</span> <span class="hljs-number">25px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dl</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">190px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">72px</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#f2f2f2</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dl</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dl</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">border-right</span>: none;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dt</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dd</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">36px</span> <span class="hljs-number">12px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-tag">dd</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.chat</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.feedback</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weixin</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weibo</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">92px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">92px</span>;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ededed</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.chat</span><span class="hljs-selector-pseudo">:before</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.feedback</span><span class="hljs-selector-pseudo">:before</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weixin</span><span class="hljs-selector-pseudo">:before</span>, <span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weibo</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/sprites.png</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400px</span> <span class="hljs-number">400px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.chat</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">245px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.chat</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">200px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.feedback</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">345px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.feedback</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">295px</span> -<span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weixin</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">247px</span> -<span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weixin</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">202px</span> -<span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weibo</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">347px</span> -<span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.weibo</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">297px</span> -<span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.qrcode</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">92px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">92px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ededed</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.download</span> &#123;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.download</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.download</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#27BA9B</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.hotline</span> &#123;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.contact</span> <span class="hljs-selector-class">.hotline</span> small &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.extra</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">178px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">60px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#434343</span>;<br>  <span class="hljs-attribute">text-align</span>: justify;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">58px</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/sprites.png</span>);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400px</span> <span class="hljs-number">400px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-class">.price</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-class">.express</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">65px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.slogan</span> <span class="hljs-selector-class">.quality</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">130px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.copyright</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">170px</span>;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.copyright</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.copyright</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.xtx_footer</span> <span class="hljs-selector-class">.copyright</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">border-right</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS小案例</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day2</title>
    <url>/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/</url>
    <content><![CDATA[<h2 id="一、今日学习目标"><a href="#一、今日学习目标" class="headerlink" title="一、今日学习目标"></a>一、今日学习目标</h2><h3 id="1-指令补充"><a href="#1-指令补充" class="headerlink" title="1.指令补充"></a>1.指令补充</h3><ol>
<li>指令修饰符</li>
<li>v-bind对样式增强的操作</li>
<li>v-model应用于其他表单元素</li>
</ol>
<h3 id="2-computed计算属性"><a href="#2-computed计算属性" class="headerlink" title="2.computed计算属性"></a>2.computed计算属性</h3><ol>
<li>基础语法</li>
<li>计算属性vs方法</li>
<li>计算属性的完整写法</li>
<li>成绩案例</li>
</ol>
<h3 id="3-watch侦听器"><a href="#3-watch侦听器" class="headerlink" title="3.watch侦听器"></a>3.watch侦听器</h3><ol>
<li>基础写法</li>
<li>完整写法</li>
</ol>
<h2 id="二、指令修饰符"><a href="#二、指令修饰符" class="headerlink" title="二、指令修饰符"></a>二、指令修饰符</h2><h3 id="1-什么是指令修饰符？"><a href="#1-什么是指令修饰符？" class="headerlink" title="1.什么是指令修饰符？"></a>1.什么是指令修饰符？</h3><p>​	所谓指令修饰符就是通过“.”指明一些指令<strong>后缀</strong> 不同的<strong>后缀</strong>封装了不同的处理操作  —&gt; 简化代码</p>
<h3 id="2-按键修饰符"><a href="#2-按键修饰符" class="headerlink" title="2.按键修饰符"></a>2.按键修饰符</h3><ul>
<li>@keyup.enter  —&gt;当点击enter键的时候才触发</li>
</ul>
<p>代码演示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>@keyup.enter  →  监听键盘回车事件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h3 id="3-v-model修饰符"><a href="#3-v-model修饰符" class="headerlink" title="3.v-model修饰符"></a>3.v-model修饰符</h3><ul>
<li>v-model.trim  —&gt;去除首位空格</li>
<li>v-model.number —&gt;转数字</li>
</ul>
<h3 id="4-事件修饰符"><a href="#4-事件修饰符" class="headerlink" title="4.事件修饰符"></a>4.事件修饰符</h3><ul>
<li>@事件名.stop —&gt; 阻止冒泡</li>
<li>@事件名.prevent  —&gt;阻止默认行为</li>
<li>@事件名.stop.prevent —&gt;可以连用 即阻止事件冒泡也阻止默认行为</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;style&gt;<br>   .<span class="hljs-property">father</span> &#123;<br>     <span class="hljs-attr">width</span>: 200px;<br>     <span class="hljs-attr">height</span>: 200px;<br>     background-<span class="hljs-attr">color</span>: pink;<br>     margin-<span class="hljs-attr">top</span>: 20px;<br>   &#125;<br>   .<span class="hljs-property">son</span> &#123;<br>     <span class="hljs-attr">width</span>: 100px;<br>     <span class="hljs-attr">height</span>: 100px;<br>     background-<span class="hljs-attr">color</span>: skyblue;<br>   &#125;<br> &lt;/style&gt;<br><br>&lt;div id=&quot;app&quot;&gt;<br>   &lt;h3&gt;v-model修饰符 .trim .number&lt;/h3&gt;<br>   姓名：&lt;input v-model=&quot;username&quot; type=&quot;text&quot;&gt;&lt;br&gt;<br>   年纪：&lt;input v-model=&quot;age&quot; type=&quot;text&quot;&gt;&lt;br&gt;<br><br>   <br>   &lt;h3&gt;@事件名.stop     →  阻止冒泡&lt;/h3&gt;<br>   &lt;div @click=&quot;fatherFn&quot; class=&quot;father&quot;&gt;<br>     &lt;div @click=&quot;sonFn&quot; class=&quot;son&quot;&gt;儿子&lt;/div&gt;<br>   &lt;/div&gt;<br><br>   &lt;h3&gt;@事件名.prevent  →  阻止默认行为&lt;/h3&gt;<br>   &lt;a @click href=&quot;http://www.baidu.com&quot;&gt;阻止默认行为&lt;/a&gt;<br> &lt;/div&gt;<br><br> &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;<br> &lt;script&gt;<br>   const app = new Vue(&#123;<br>     el: &#x27;#app&#x27;,<br>     data: &#123;<br>       username: &#x27;&#x27;,<br>       age: &#x27;&#x27;,<br>     &#125;,<br>     methods: &#123;<br>       fatherFn () &#123;<br>         alert(&#x27;老父亲被点击了&#x27;)<br>       &#125;,<br>       sonFn (e) &#123;<br>         // e.stopPropagation()<br>         alert(&#x27;儿子被点击了&#x27;)<br>       &#125;<br>     &#125;<br>   &#125;)<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="三、v-bind对样式控制的增强-操作class"><a href="#三、v-bind对样式控制的增强-操作class" class="headerlink" title="三、v-bind对样式控制的增强-操作class"></a>三、v-bind对样式控制的增强-操作class</h2><p>为了方便开发者进行样式控制， Vue 扩展了 v-bind 的语法，可以针对 <strong>class 类名</strong> 和 <strong>style 行内样式</strong> 进行控制 。</p>
<h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1.语法："></a>1.语法：</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> :class = &quot;对象/数组&quot;&gt;这是一个div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h3 id="2-对象语法"><a href="#2-对象语法" class="headerlink" title="2.对象语法"></a>2.对象语法</h3><p>当class动态绑定的是<strong>对象</strong>时，<strong>键就是类名，值就是布尔值</strong>，如果值是<strong>true</strong>，就有这个类，否则没有这个类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; 类名1: 布尔值, 类名2: 布尔值 &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>​    适用场景：一个类名，来回切换</p>
<h3 id="3-数组语法"><a href="#3-数组语法" class="headerlink" title="3.数组语法"></a>3.数组语法</h3><p>当class动态绑定的是<strong>数组</strong>时 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[ 类名1, 类名2, 类名3 ]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>   使用场景:批量添加或删除类</p>
<h3 id="4-代码练习"><a href="#4-代码练习" class="headerlink" title="4.代码练习"></a>4.代码练习</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.pink</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.big</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--绑定对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是个程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--绑定数组--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是个程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="四、仿京东秒杀-tab栏切换导航高亮"><a href="#四、仿京东秒杀-tab栏切换导航高亮" class="headerlink" title="四、仿京东秒杀-tab栏切换导航高亮"></a>四、仿京东秒杀-tab栏切换导航高亮</h2><h3 id="1-需求："><a href="#1-需求：" class="headerlink" title="1.需求："></a>1.需求：</h3><p>​	当我们点击哪个tab页签时，哪个tab页签就高亮</p>
<h3 id="2-准备代码"><a href="#2-准备代码" class="headerlink" title="2.准备代码:"></a>2.准备代码:</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#e01222</span>;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">      <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e01222</span>;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>京东秒杀<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>每日特价<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>品类秒杀<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;京东秒杀&#x27;</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;每日特价&#x27;</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;品类秒杀&#x27;</span> &#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="3-思路："><a href="#3-思路：" class="headerlink" title="3.思路："></a>3.思路：</h3><p>1.基于数据，动态渲染tab（v-for）</p>
<p>2.准备一个下标 记录高亮的是哪一个 tab</p>
<p>3.基于下标动态切换class的类名</p>
<h2 id="五、v-bind对有样式控制的增强-操作style"><a href="#五、v-bind对有样式控制的增强-操作style" class="headerlink" title="五、v-bind对有样式控制的增强-操作style"></a>五、v-bind对有样式控制的增强-操作style</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; CSS属性名1: CSS属性值, CSS属性名2: CSS属性值 &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="2-代码练习"><a href="#2-代码练习" class="headerlink" title="2.代码练习"></a>2.代码练习</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">187</span>, <span class="hljs-number">150</span>, <span class="hljs-number">156</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="3-进度条案例"><a href="#3-进度条案例" class="headerlink" title="3.进度条案例"></a>3.进度条案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.progress</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#272425</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#272425</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.inner</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: right;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#409eff</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-size</span>: <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.inner</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">right</span>: -<span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">25px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>50%<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>设置25%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>设置50%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>设置75%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>设置100%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="六、v-model在其他表单元素的使用"><a href="#六、v-model在其他表单元素的使用" class="headerlink" title="六、v-model在其他表单元素的使用"></a>六、v-model在其他表单元素的使用</h2><h3 id="1-讲解内容："><a href="#1-讲解内容：" class="headerlink" title="1.讲解内容："></a>1.讲解内容：</h3><p>常见的表单元素都可以用 v-model 绑定关联  →  快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素的值</p>
<p>它会根据  <strong>控件类型</strong> 自动选取  <strong>正确的方法</strong> 来更新元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">输入框  <span class="hljs-attr">input</span>:text   ——&gt; value<br>文本域  textarea	 ——&gt; value<br>复选框  <span class="hljs-attr">input</span>:checkbox  ——&gt; checked<br>单选框  <span class="hljs-attr">input</span>:radio   ——&gt; checked<br>下拉菜单 select    ——&gt; value<br>...<br></code></pre></td></tr></table></figure>

<h3 id="2-代码准备"><a href="#2-代码准备" class="headerlink" title="2.代码准备"></a>2.代码准备</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-tag">textarea</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">     <span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑学习网<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>   姓名：<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>   是否单身：<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">     前置理解：</span><br><span class="hljs-comment">       1. name:  给单选框加上 name 属性 可以分组 → 同一组互相会互斥</span><br><span class="hljs-comment">       2. value: 给单选框加上 value 属性，用于提交给后台的数据</span><br><span class="hljs-comment">     结合 Vue 使用 → v-model</span><br><span class="hljs-comment">   --&gt;</span><br>   性别: <br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span>男<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span>女<br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">     前置理解：</span><br><span class="hljs-comment">       1. option 需要设置 value 值，提交给后台</span><br><span class="hljs-comment">       2. select 的 value 值，关联了选中的 option 的 value 值</span><br><span class="hljs-comment">     结合 Vue 使用 → v-model</span><br><span class="hljs-comment">   --&gt;</span><br>   所在城市:<br>     <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>成都<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>南京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>   自我描述：<br>     <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span> <br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>立即注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;)</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="七、computed计算属性"><a href="#七、computed计算属性" class="headerlink" title="七、computed计算属性"></a>七、computed计算属性</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>基于<strong>现有的数据</strong>，计算出来的<strong>新属性</strong>。 <strong>依赖</strong>的数据变化，<strong>自动</strong>重新计算。</p>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><ol>
<li>声明在 <strong>computed 配置项</strong>中，一个计算属性对应一个函数</li>
<li>使用起来和普通属性一样使用  </li>
</ol>
<h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><ol>
<li>computed配置项和data配置项是<strong>同级</strong>的</li>
<li>computed中的计算属性<strong>虽然是函数的写法</strong>，但他<strong>依然是个属性</strong></li>
<li>computed中的计算属性<strong>不能</strong>和data中的属性<strong>同名</strong></li>
<li>使用computed中的计算属性和使用data中的属性是一样的用法</li>
<li>computed中计算属性内部的<strong>this</strong>依然<strong>指向的是Vue实例</strong></li>
</ol>
<h3 id="4-案例"><a href="#4-案例" class="headerlink" title="4.案例"></a>4.案例</h3><p>比如我们可以使用计算属性实现下面这个业务场景</p>
<p><img src="/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/1682039327858.png" alt="68203932785"></p>
<h3 id="5-代码准备"><a href="#5-代码准备" class="headerlink" title="5.代码准备"></a>5.代码准备</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">h3</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑的礼物清单<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.num &#125;&#125;个<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 目标：统计求和，求得礼物总数 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>礼物总数：? 个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 现有的数据</span></span><br><span class="language-javascript">        <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;篮球&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">1</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;玩具&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">2</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;铅笔&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">5</span> &#125;,</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="八、computed计算属性-VS-methods方法"><a href="#八、computed计算属性-VS-methods方法" class="headerlink" title="八、computed计算属性 VS methods方法"></a>八、computed计算属性 VS methods方法</h2><h3 id="1-computed计算属性"><a href="#1-computed计算属性" class="headerlink" title="1.computed计算属性"></a>1.computed计算属性</h3><p>作用：封装了一段对于<strong>数据</strong>的处理，求得一个<strong>结果</strong></p>
<p>语法：</p>
<ol>
<li>写在computed配置项中</li>
<li>作为属性，直接使用<ul>
<li>js中使用计算属性： this.计算属性</li>
<li>模板中使用计算属性：</li>
</ul>
</li>
</ol>
<h3 id="2-methods计算属性"><a href="#2-methods计算属性" class="headerlink" title="2.methods计算属性"></a>2.methods计算属性</h3><p>作用：给Vue实例提供一个<strong>方法</strong>，调用以<strong>处理业务逻辑</strong>。</p>
<p>语法：</p>
<ol>
<li>写在methods配置项中</li>
<li>作为方法调用<ul>
<li>js中调用：this.方法名()</li>
<li>模板中调用  "{{方法名()}}" 或者 @事件名&#x3D;“方法名”</li>
</ul>
</li>
</ol>
<h3 id="3-计算属性的优势"><a href="#3-计算属性的优势" class="headerlink" title="3.计算属性的优势"></a>3.计算属性的优势</h3><ol>
<li><p>缓存特性（提升性能）</p>
<p>计算属性会对计算出来的结果缓存，再次使用直接读取缓存，</p>
<p>依赖项变化了，会自动重新计算 → 并再次缓存</p>
</li>
<li><p>methods没有缓存特性</p>
</li>
<li><p>通过代码比较</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">h3</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">145px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: -<span class="hljs-number">4px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e63f32</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>?<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.num &#125;&#125;个<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>礼物总数：&#123;&#123; totalCount &#125;&#125; 个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 现有的数据</span></span><br><span class="language-javascript">        <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;篮球&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">3</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;玩具&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">2</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;铅笔&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">5</span> &#125;,</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">        totalCount () &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> total = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item.<span class="hljs-property">num</span>, <span class="hljs-number">0</span>)</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> total</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>1.computed<strong>有缓存特性</strong>，methods<strong>没有缓存</strong></p>
<p>2.当一个结果依赖其他多个值时，推荐使用计算属性</p>
<p>3.当处理业务逻辑时，推荐使用methods方法，比如事件的处理函数</p>
<h2 id="九、计算属性的完整写法"><a href="#九、计算属性的完整写法" class="headerlink" title="九、计算属性的完整写法"></a>九、计算属性的完整写法</h2><p><strong>既然计算属性也是属性，能访问，应该也能修改了？</strong></p>
<ol>
<li>计算属性默认的简写，只能读取访问，不能 “修改”</li>
<li>如果要 “修改”  → 需要写计算属性的完整写法</li>
</ol>
<p><img src="/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/1682041822963.png" alt="68204182296"></p>
<p>完整写法代码演示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   姓：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span> +<br>   名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span> =<br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>改名卡<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">		<span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;刘&#x27;</span>,</span><br><span class="language-javascript">       <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;备&#x27;</span></span><br><span class="language-javascript">     &#125;,</span><br><span class="language-javascript">     <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">     &#125;,</span><br><span class="language-javascript">     <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;)</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="十、综合案例-成绩案例"><a href="#十、综合案例-成绩案例" class="headerlink" title="十、综合案例-成绩案例"></a>十、综合案例-成绩案例</h2><p><img src="/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/1682042489319.png" alt="68204248931"></p>
<p>功能描述：</p>
<p>1.渲染功能</p>
<p>2.删除功能</p>
<p>3.添加功能</p>
<p>4.统计总分，求平均分</p>
<p>思路分析：</p>
<p>1.渲染功能  v-for  :key  v-bind:动态绑定class的样式</p>
<p>2.删除功能 v-on绑定事件， 阻止a标签的默认行为</p>
<p>3.v-model的修饰符 .trim、 .number、  判断数据是否为空后 再添加、添加后清空文本框的数据</p>
<p>4.使用计算属性computed 计算总分和平均分的值</p>
<h2 id="十一、watch侦听器（监视器）"><a href="#十一、watch侦听器（监视器）" class="headerlink" title="十一、watch侦听器（监视器）"></a>十一、watch侦听器（监视器）</h2><h3 id="1-作用："><a href="#1-作用：" class="headerlink" title="1.作用："></a>1.作用：</h3><p>​	<strong>监视数据变化</strong>，执行一些业务逻辑或异步操作</p>
<h3 id="2-语法："><a href="#2-语法：" class="headerlink" title="2.语法："></a>2.语法：</h3><ol>
<li><p>watch同样声明在跟data同级的配置项中</p>
</li>
<li><p>简单写法： 简单类型数据直接监视</p>
</li>
<li><p>完整写法：添加额外配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123; <br>  <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;苹果&#x27;</span>,<br>  <span class="hljs-attr">obj</span>: &#123;<br>    <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;苹果&#x27;</span><br>  &#125;<br>&#125;,<br><br><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-comment">// 该方法会在数据变化时，触发执行</span><br>  数据属性名 (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;,<br>  <span class="hljs-string">&#x27;对象.属性名&#x27;</span> (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-侦听器代码准备"><a href="#3-侦听器代码准备" class="headerlink" title="3.侦听器代码准备"></a>3.侦听器代码准备</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">     * &#123;</span><br><span class="language-css">       <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">       <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">       <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.query</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-tag">textarea</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dedede</span>;</span><br><span class="language-css">       <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">       <span class="hljs-attribute">resize</span>: none;</span><br><span class="language-css">       <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-tag">textarea</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#1589f5</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.transbox</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;</span><br><span class="language-css">       <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.tip-box</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.tip-box</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">       <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.query</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css"></span><br><span class="language-css">     <span class="hljs-selector-class">.input-wrap</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.input-wrap</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">       <span class="hljs-attribute">right</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">bottom</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.input-wrap</span> <span class="hljs-selector-tag">i</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">font-style</span>: normal;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 条件选择框 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;query&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>翻译成的语言：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;italy&quot;</span>&gt;</span>意大利<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;english&quot;</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;german&quot;</span>&gt;</span>德语<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!-- 翻译框 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-wrap&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;words&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>⌨️<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>文档翻译<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;output-wrap&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;transbox&quot;</span>&gt;</span>mela<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-comment">// 接口地址：https://applet-base-api-t.itheima.net/api/translate</span></span><br><span class="language-javascript">     <span class="hljs-comment">// 请求方式：get</span></span><br><span class="language-javascript">     <span class="hljs-comment">// 请求参数：</span></span><br><span class="language-javascript">     <span class="hljs-comment">// （1）words：需要被翻译的文本（必传）</span></span><br><span class="language-javascript">     <span class="hljs-comment">// （2）lang： 需要被翻译成的语言（可选）默认值-意大利</span></span><br><span class="language-javascript">     <span class="hljs-comment">// -----------------------------------------------</span></span><br><span class="language-javascript">     </span><br><span class="language-javascript">     <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">       <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">         <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">       &#125;,</span><br><span class="language-javascript">       <span class="hljs-comment">// 具体讲解：(1) watch语法 (2) 具体业务实现</span></span><br><span class="language-javascript">     &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="十二、翻译案例-代码实现"><a href="#十二、翻译案例-代码实现" class="headerlink" title="十二、翻译案例-代码实现"></a>十二、翻译案例-代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 接口地址：https://applet-base-api-t.itheima.net/api/translate</span><br>    <span class="hljs-comment">// 请求方式：get</span><br>    <span class="hljs-comment">// 请求参数：</span><br>    <span class="hljs-comment">// （1）words：需要被翻译的文本（必传）</span><br>    <span class="hljs-comment">// （2）lang： 需要被翻译成的语言（可选）默认值-意大利</span><br>    <span class="hljs-comment">// -----------------------------------------------</span><br>    <br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>      <span class="hljs-attr">data</span>: &#123;<br>         <span class="hljs-comment">//words: &#x27;&#x27;</span><br>         <span class="hljs-attr">obj</span>: &#123;<br>          <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">result</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 翻译结果</span><br>        <span class="hljs-comment">// timer: null // 延时器id</span><br>      &#125;,<br>      <span class="hljs-comment">// 具体讲解：(1) watch语法 (2) 具体业务实现</span><br>      <span class="hljs-attr">watch</span>: &#123;<br>        <span class="hljs-comment">// 该方法会在数据变化时调用执行</span><br>        <span class="hljs-comment">// newValue新值, oldValue老值（一般不用）</span><br>        <span class="hljs-comment">// words (newValue) &#123;</span><br>        <span class="hljs-comment">//   console.log(&#x27;变化了&#x27;, newValue)</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-string">&#x27;obj.words&#x27;</span> (newValue) &#123;<br>          <span class="hljs-comment">// console.log(&#x27;变化了&#x27;, newValue)</span><br>          <span class="hljs-comment">// 防抖: 延迟执行 → 干啥事先等一等，延迟一会，一段时间内没有再次触发，才执行</span><br>          <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>            <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>              <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://applet-base-api-t.itheima.net/api/translate&#x27;</span>,<br>              <span class="hljs-attr">params</span>: &#123;<br>                <span class="hljs-attr">words</span>: newValue<br>              &#125;<br>            &#125;)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>)<br>          &#125;, <span class="hljs-number">300</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十三、watch侦听器"><a href="#十三、watch侦听器" class="headerlink" title="十三、watch侦听器"></a>十三、watch侦听器</h2><h3 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1.语法"></a>1.语法</h3><p>完整写法 —&gt;添加额外的配置项</p>
<ol>
<li>deep:true 对复杂类型进行深度监听</li>
<li>immdiate:true 初始化 立刻执行一次</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">obj</span>: &#123;<br>    <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;苹果&#x27;</span>,<br>    <span class="hljs-attr">lang</span>: <span class="hljs-string">&#x27;italy&#x27;</span><br>  &#125;,<br>&#125;,<br><br><span class="hljs-attr">watch</span>: &#123;<span class="hljs-comment">// watch 完整写法</span><br>  对象: &#123;<br>    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 深度监视</span><br>    <span class="hljs-attr">immdiate</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//立即执行handler函数</span><br>    handler (newValue) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue)<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="2-需求"><a href="#2-需求" class="headerlink" title="2.需求"></a>2.需求</h3><p><img src="/2023/08/07/vue%E5%AD%A6%E4%B9%A0Day2/1682050515722.png" alt="68205051572"></p>
<ul>
<li>当文本框输入的时候 右侧翻译内容要时时变化</li>
<li>当下拉框中的语言发生变化的时候 右侧翻译的内容依然要时时变化</li>
<li>如果文本框中有默认值的话要立即翻译</li>
</ul>
<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script&gt; <br>     <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>       <span class="hljs-attr">data</span>: &#123;<br>         <span class="hljs-attr">obj</span>: &#123;<br>           <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;小黑&#x27;</span>,<br>           <span class="hljs-attr">lang</span>: <span class="hljs-string">&#x27;italy&#x27;</span><br>         &#125;,<br>         <span class="hljs-attr">result</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 翻译结果</span><br>       &#125;,<br>       <span class="hljs-attr">watch</span>: &#123;<br>         <span class="hljs-attr">obj</span>: &#123;<br>           <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 深度监视</span><br>           <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 立刻执行，一进入页面handler就立刻执行一次</span><br>           handler (newValue) &#123;<br>             <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)<br>             <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>               <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>                 <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://applet-base-api-t.itheima.net/api/translate&#x27;</span>,<br>                 <span class="hljs-attr">params</span>: newValue<br>               &#125;)<br>               <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>)<br>             &#125;, <span class="hljs-number">300</span>)<br>           &#125;<br>         &#125; <br>       &#125;<br>     &#125;)<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h3><p>watch侦听器的写法有几种？</p>
<p>1.简单写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>  数据属性名 (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;,<br>  <span class="hljs-string">&#x27;对象.属性名&#x27;</span> (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>2.完整写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<span class="hljs-comment">// watch 完整写法</span><br>  数据属性名: &#123;<br>    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 深度监视(针对复杂类型)</span><br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否立刻执行一次handler</span><br>    handler (newValue) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day4</title>
    <url>/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/</url>
    <content><![CDATA[<h2 id="一、今日学习目标"><a href="#一、今日学习目标" class="headerlink" title="一、今日学习目标"></a>一、今日学习目标</h2><h3 id="1-组件的三大组成部分（结构-样式-逻辑）"><a href="#1-组件的三大组成部分（结构-样式-逻辑）" class="headerlink" title="1.组件的三大组成部分（结构&#x2F;样式&#x2F;逻辑）"></a>1.组件的三大组成部分（结构&#x2F;样式&#x2F;逻辑）</h3><p>​    scoped解决样式冲突&#x2F;data是一个函数</p>
<h3 id="2-组件通信"><a href="#2-组件通信" class="headerlink" title="2.组件通信"></a>2.组件通信</h3><ol>
<li>组件通信语法</li>
<li>父传子</li>
<li>子传父</li>
<li>非父子通信（扩展）</li>
</ol>
<h3 id="3-综合案例：小黑记事本（组件版）"><a href="#3-综合案例：小黑记事本（组件版）" class="headerlink" title="3.综合案例：小黑记事本（组件版）"></a>3.综合案例：小黑记事本（组件版）</h3><ol>
<li>拆分组件</li>
<li>列表渲染</li>
<li>数据添加</li>
<li>数据删除</li>
<li>列表统计</li>
<li>清空</li>
<li>持久化</li>
</ol>
<h3 id="4-进阶语法"><a href="#4-进阶语法" class="headerlink" title="4.进阶语法"></a>4.进阶语法</h3><ol>
<li>v-model原理</li>
<li>v-model应用于组件</li>
<li>sync修饰符</li>
<li>ref和$refs</li>
<li>$nextTick</li>
</ol>
<h2 id="二、scoped解决样式冲突"><a href="#二、scoped解决样式冲突" class="headerlink" title="二、scoped解决样式冲突"></a>二、scoped解决样式冲突</h2><h3 id="1-默认情况："><a href="#1-默认情况：" class="headerlink" title="1.默认情况："></a><strong>1.默认情况</strong>：</h3><p>写在组件中的样式会 <strong>全局生效</strong> →  因此很容易造成多个组件之间的样式冲突问题。</p>
<ol>
<li><p><strong>全局样式</strong>: 默认组件中的样式会作用到全局，任何一个组件中都会受到此样式的影响</p>
</li>
<li><p><strong>局部样式</strong>: 可以给组件加上<strong>scoped</strong> 属性,可以<strong>让样式只作用于当前组件</strong></p>
</li>
</ol>
<h3 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2.代码演示"></a>2.代码演示</h3><p>BaseOne.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-one&quot;&gt;<br>    BaseOne<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseTwo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-one&quot;&gt;<br>    BaseTwo<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;BaseOne&gt;&lt;/BaseOne&gt;<br>    &lt;BaseTwo&gt;&lt;/BaseTwo&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseOne from &#x27;./components/BaseOne&#x27;<br>import BaseTwo from &#x27;./components/BaseTwo&#x27;<br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  components: &#123;<br>    BaseOne,<br>    BaseTwo<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-scoped原理"><a href="#3-scoped原理" class="headerlink" title="3.scoped原理"></a>3.scoped原理</h3><ol>
<li>当前组件内标签都被添加<strong>data-v-hash值</strong> 的属性 </li>
<li>css选择器都被添加 [<strong>data-v-hash值</strong>] 的属性选择器</li>
</ol>
<p>最终效果: <strong>必须是当前组件的元素</strong>, 才会有这个自定义属性, 才会被这个样式作用到 </p>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682306517375.png" alt="68230651737"></p>
<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><ol>
<li>style的默认样式是作用到哪里的？</li>
<li>scoped的作用是什么？</li>
<li>style中推不推荐加scoped？</li>
</ol>
<h2 id="三、data必须是一个函数"><a href="#三、data必须是一个函数" class="headerlink" title="三、data必须是一个函数"></a>三、data必须是一个函数</h2><h3 id="1、data为什么要写成函数"><a href="#1、data为什么要写成函数" class="headerlink" title="1、data为什么要写成函数"></a>1、data为什么要写成函数</h3><p>一个组件的 <strong>data</strong> 选项必须<strong>是一个函数</strong>。目的是为了：保证每个组件实例，维护<strong>独立</strong>的一份<strong>数据</strong>对象。</p>
<p>每次创建新的组件实例，都会新<strong>执行一次data 函数</strong>，得到一个新对象。</p>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682306952078.png" alt="68230695207"></p>
<h3 id="2-代码演示-1"><a href="#2-代码演示-1" class="headerlink" title="2.代码演示"></a>2.代码演示</h3><p>BaseCount.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-count&quot;&gt;<br>    &lt;button @click=&quot;count--&quot;&gt;-&lt;/button&gt;<br>    &lt;span&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt;<br>    &lt;button @click=&quot;count++&quot;&gt;+&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data: function () &#123;<br>    return &#123;<br>      count: 100,<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.base-count &#123;<br>  margin: 20px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseCount&gt;&lt;/BaseCount&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseCount from &#x27;./components/BaseCount&#x27;<br>export default &#123;<br>  components: &#123;<br>    BaseCount,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>data写成函数的目的是什么？</p>
<h2 id="四、组件通信"><a href="#四、组件通信" class="headerlink" title="四、组件通信"></a>四、组件通信</h2><h3 id="1-什么是组件通信？"><a href="#1-什么是组件通信？" class="headerlink" title="1.什么是组件通信？"></a>1.什么是组件通信？</h3><p>组件通信，就是指<strong>组件与组件</strong>之间的<strong>数据传递</strong></p>
<ul>
<li>组件的数据是独立的，无法直接访问其他组件的数据。</li>
<li>想使用其他组件的数据，就需要组件通信</li>
</ul>
<h3 id="2-组件之间如何通信"><a href="#2-组件之间如何通信" class="headerlink" title="2.组件之间如何通信"></a>2.组件之间如何通信</h3><p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682308903094.png" alt="68230890309"></p>
<p>思考：</p>
<ol>
<li>组件之间有哪些关系？</li>
<li>对应的组件通信方案有哪几类？</li>
</ol>
<h3 id="3-组件关系分类"><a href="#3-组件关系分类" class="headerlink" title="3.组件关系分类"></a>3.组件关系分类</h3><ol>
<li>父子关系</li>
<li>非父子关系</li>
</ol>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318073803.png" alt="68231807380"></p>
<h3 id="4-通信解决方案"><a href="#4-通信解决方案" class="headerlink" title="4.通信解决方案"></a>4.通信解决方案</h3><p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318111090.png" alt="68231811109"></p>
<h3 id="5-父子通信流程"><a href="#5-父子通信流程" class="headerlink" title="5.父子通信流程"></a>5.父子通信流程</h3><ol>
<li>父组件通过 <strong>props</strong> 将数据传递给子组件</li>
<li>子组件利用 <strong>$emit</strong> 通知父组件修改更新</li>
</ol>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318444566.png" alt="68231844456"></p>
<h3 id="6-父向子通信代码示例"><a href="#6-父向子通信代码示例" class="headerlink" title="6.父向子通信代码示例"></a>6.父向子通信代码示例</h3><p>父组件通过<strong>props</strong>将数据传递给子组件</p>
<p>父组件App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot; style=&quot;border: 3px solid #000; margin: 10px&quot;&gt;<br>    我是APP组件 <br>    &lt;Son&gt;&lt;/Son&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Son from &#x27;./components/Son.vue&#x27;<br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  data() &#123;<br>    return &#123;<br>      myTitle: &#x27;学前端，就来黑马程序员&#x27;,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Son,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<p>子组件Son.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;son&quot; style=&quot;border:3px solid #000;margin:10px&quot;&gt;<br>    我是Son组件<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Son-Child&#x27;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318711785.png" alt="68231871178"></p>
<p>父向子传值步骤</p>
<ol>
<li>给子组件以添加属性的方式传值</li>
<li>子组件内部通过props接收</li>
<li>模板中直接使用 props接收的值</li>
</ol>
<h3 id="7-子向父通信代码示例"><a href="#7-子向父通信代码示例" class="headerlink" title="7.子向父通信代码示例"></a>7.子向父通信代码示例</h3><p>子组件利用 <strong>$emit</strong> 通知父组件，进行修改更新</p>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682318965635.png" alt="68231896563"></p>
<p>子向父传值步骤</p>
<ol>
<li>$emit触发事件，给父组件发送消息通知</li>
<li>父组件监听$emit触发的事件</li>
<li>提供处理函数，在函数的性参中获取传过来的参数</li>
</ol>
<h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h3><ol>
<li>组件关系分类有哪两种</li>
<li>父子组件通信的流程是什么？<ol>
<li>父向子</li>
<li>子向父</li>
</ol>
</li>
</ol>
<h2 id="五、什么是props"><a href="#五、什么是props" class="headerlink" title="五、什么是props"></a>五、什么是props</h2><h3 id="1-Props-定义"><a href="#1-Props-定义" class="headerlink" title="1.Props 定义"></a>1.Props 定义</h3><p>组件上 注册的一些  自定义属性</p>
<h3 id="2-Props-作用"><a href="#2-Props-作用" class="headerlink" title="2.Props 作用"></a>2.Props 作用</h3><p>向子组件传递数据</p>
<h3 id="3-特点"><a href="#3-特点" class="headerlink" title="3.特点"></a>3.特点</h3><ol>
<li>可以 传递 <strong>任意数量</strong> 的prop</li>
<li>可以 传递 <strong>任意类型</strong> 的prop</li>
</ol>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682320156914.png" alt="68232015691"></p>
<h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>父组件App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;UserInfo<br>      :username=&quot;username&quot;<br>      :age=&quot;age&quot;<br>      :isSingle=&quot;isSingle&quot;<br>      :car=&quot;car&quot;<br>      :hobby=&quot;hobby&quot;<br>    &gt;&lt;/UserInfo&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import UserInfo from &#x27;./components/UserInfo.vue&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      username: &#x27;小帅&#x27;,<br>      age: 28,<br>      isSingle: true,<br>      car: &#123;<br>        brand: &#x27;宝马&#x27;,<br>      &#125;,<br>      hobby: [&#x27;篮球&#x27;, &#x27;足球&#x27;, &#x27;羽毛球&#x27;],<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    UserInfo,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>子组件UserInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;userinfo&quot;&gt;<br>    &lt;h3&gt;我是个人信息组件&lt;/h3&gt;<br>    &lt;div&gt;姓名：&lt;/div&gt;<br>    &lt;div&gt;年龄：&lt;/div&gt;<br>    &lt;div&gt;是否单身：&lt;/div&gt;<br>    &lt;div&gt;座驾：&lt;/div&gt;<br>    &lt;div&gt;兴趣爱好：&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  <br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.userinfo &#123;<br>  width: 300px;<br>  border: 3px solid #000;<br>  padding: 20px;<br>&#125;<br>.userinfo &gt; div &#123;<br>  margin: 20px 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="六、props校验"><a href="#六、props校验" class="headerlink" title="六、props校验"></a>六、props校验</h2><h3 id="1-思考"><a href="#1-思考" class="headerlink" title="1.思考"></a>1.思考</h3><p>组件的props可以乱传吗</p>
<h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h3><p>为组件的 prop 指定<strong>验证要求</strong>，不符合要求，控制台就会有<strong>错误提示</strong>  → 帮助开发者，快速发现错误</p>
<h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h3><ul>
<li><strong>类型校验</strong></li>
<li>非空校验</li>
<li>默认值</li>
<li>自定义校验</li>
</ul>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682320684053.png" alt="68232068405"></p>
<h3 id="4-代码演示-1"><a href="#4-代码演示-1" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseProgress :w=&quot;width&quot;&gt;&lt;/BaseProgress&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseProgress from &#x27;./components/BaseProgress.vue&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      width: 30,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    BaseProgress,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseProgress.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-progress&quot;&gt;<br>    &lt;div class=&quot;inner&quot; :style=&quot;&#123; width: w + &#x27;%&#x27; &#125;&quot;&gt;<br>      &lt;span&gt;&#123;&#123; w &#125;&#125;%&lt;/span&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: [&#x27;w&#x27;],<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-progress &#123;<br>  height: 26px;<br>  width: 400px;<br>  border-radius: 15px;<br>  background-color: #272425;<br>  border: 3px solid #272425;<br>  box-sizing: border-box;<br>  margin-bottom: 30px;<br>&#125;<br>.inner &#123;<br>  position: relative;<br>  background: #379bff;<br>  border-radius: 15px;<br>  height: 25px;<br>  box-sizing: border-box;<br>  left: -3px;<br>  top: -2px;<br>&#125;<br>.inner span &#123;<br>  position: absolute;<br>  right: 0;<br>  top: 26px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="七、props校验完整写法"><a href="#七、props校验完整写法" class="headerlink" title="七、props校验完整写法"></a>七、props校验完整写法</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">props: &#123;<br>  校验的属性名: &#123;<br>    type: 类型,  // Number String Boolean ...<br>    required: true, // 是否必填<br>    default: 默认值, // 默认值<br>    validator (value) &#123;<br>      // 自定义校验逻辑<br>      return 是否通过校验<br>    &#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>

<h3 id="2-代码实例"><a href="#2-代码实例" class="headerlink" title="2.代码实例"></a>2.代码实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  // 完整写法（类型、默认值、非空、自定义校验）<br>  props: &#123;<br>    w: &#123;<br>      type: Number,<br>      //required: true,<br>      default: 0,<br>      validator(val) &#123;<br>        // console.log(val)<br>        if (val &gt;= 100 || val &lt;= 0) &#123;<br>          console.error(&#x27;传入的范围必须是0-100之间&#x27;)<br>          return false<br>        &#125; else &#123;<br>          return true<br>        &#125;<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><p>1.default和required一般不同时写（因为当时必填项时，肯定是有值的）</p>
<p>2.default后面如果是简单类型的值，可以直接写默认。如果是复杂类型的值，则需要以函数的形式return一个默认值</p>
<h2 id="八、props-data、单向数据流"><a href="#八、props-data、单向数据流" class="headerlink" title="八、props&amp;data、单向数据流"></a>八、props&amp;data、单向数据流</h2><h3 id="1-共同点"><a href="#1-共同点" class="headerlink" title="1.共同点"></a>1.共同点</h3><p>都可以给组件提供数据</p>
<h3 id="2-区别"><a href="#2-区别" class="headerlink" title="2.区别"></a>2.区别</h3><ul>
<li>data 的数据是<strong>自己</strong>的  →   随便改  </li>
<li>prop 的数据是<strong>外部</strong>的  →   不能直接改，要遵循 <strong>单向数据流</strong></li>
</ul>
<h3 id="3-单向数据流："><a href="#3-单向数据流：" class="headerlink" title="3.单向数据流："></a>3.单向数据流：</h3><p>父级props 的数据更新，会向下流动，影响子组件。这个数据流动是单向的</p>
<h3 id="4-代码演示-2"><a href="#4-代码演示-2" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseCount&gt;&lt;/BaseCount&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseCount from &#x27;./components/BaseCount.vue&#x27;<br>export default &#123;<br>  components:&#123;<br>    BaseCount<br>  &#125;,<br>  data()&#123;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseCount.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-count&quot;&gt;<br>    &lt;button @click=&quot;count--&quot;&gt;-&lt;/button&gt;<br>    &lt;span&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt;<br>    &lt;button @click=&quot;count++&quot;&gt;+&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  // 1.自己的数据随便修改  （谁的数据 谁负责）<br>   data () &#123;<br>     return &#123;<br>       count: 100,<br>     &#125;<br>   &#125;,<br>  // 2.外部传过来的数据 不能随便修改<br>  //props: &#123;<br>  //  count: &#123;<br>  //    type: Number,<br>  //  &#125;, <br>  //&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.base-count &#123;<br>  margin: 20px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682323734228.png" alt="68232373422"></p>
<h3 id="5-口诀"><a href="#5-口诀" class="headerlink" title="5.口诀"></a>5.口诀</h3><p><strong>谁的数据谁负责</strong></p>
<h2 id="九、综合案例-组件拆分"><a href="#九、综合案例-组件拆分" class="headerlink" title="九、综合案例-组件拆分"></a>九、综合案例-组件拆分</h2><h3 id="1-需求说明"><a href="#1-需求说明" class="headerlink" title="1.需求说明"></a>1.需求说明</h3><ul>
<li>拆分基础组件</li>
<li>渲染待办任务</li>
<li>添加任务</li>
<li>删除任务</li>
<li>底部合计 和 清空功能</li>
<li>持久化存储</li>
</ul>
<h3 id="2-拆分基础组件"><a href="#2-拆分基础组件" class="headerlink" title="2.拆分基础组件"></a>2.拆分基础组件</h3><p>咱们可以把小黑记事本原有的结构拆成三部分内容：头部（TodoHeader）、列表(TodoMain)、底部(TodoFooter)</p>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682325598418.png" alt="68232559841"></p>
<h2 id="十、综合案例-列表渲染"><a href="#十、综合案例-列表渲染" class="headerlink" title="十、综合案例-列表渲染"></a>十、综合案例-列表渲染</h2><p>思路分析：</p>
<ol>
<li>提供数据：提供在公共的父组件 App.vue</li>
<li>通过父传子，将数据传递给TodoMain</li>
<li>利用v-for进行渲染</li>
</ol>
<h2 id="十一、综合案例-添加功能"><a href="#十一、综合案例-添加功能" class="headerlink" title="十一、综合案例-添加功能"></a>十一、综合案例-添加功能</h2><p>思路分析：</p>
<ol>
<li>收集表单数据  v-model</li>
<li>监听时间 （回车+点击 都要进行添加）</li>
<li>子传父，将任务名称传递给父组件App.vue</li>
<li>父组件接受到数据后 进行添加 <strong>unshift</strong>(自己的数据自己负责)</li>
</ol>
<h2 id="十二、综合案例-删除功能"><a href="#十二、综合案例-删除功能" class="headerlink" title="十二、综合案例-删除功能"></a>十二、综合案例-删除功能</h2><p>思路分析：</p>
<ol>
<li>监听时间（监听删除的点击）携带id</li>
<li>子传父，将删除的id传递给父组件App.vue</li>
<li>进行删除 <strong>filter</strong>  (自己的数据自己负责)</li>
</ol>
<h2 id="十三、综合案例-底部功能及持久化存储"><a href="#十三、综合案例-底部功能及持久化存储" class="headerlink" title="十三、综合案例-底部功能及持久化存储"></a>十三、综合案例-底部功能及持久化存储</h2><p>思路分析：</p>
<ol>
<li>底部合计：父组件传递list到底部组件  —&gt;展示合计</li>
<li>清空功能：监听事件 —&gt; <strong>子组件</strong>通知父组件 —&gt;父组件清空</li>
<li>持久化存储：watch监听数据变化，持久化到本地</li>
</ol>
<h2 id="十四、非父子通信-event-bus-事件总线"><a href="#十四、非父子通信-event-bus-事件总线" class="headerlink" title="十四、非父子通信-event bus 事件总线"></a>十四、非父子通信-event bus 事件总线</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><p>非父子组件之间，进行简易消息传递。(复杂场景→ Vuex)</p>
<h3 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h3><ol>
<li><p>创建一个都能访问的事件总线 （空Vue实例）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Bus</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Bus</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>A组件（接受方），监听Bus的 $on事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created () &#123;<br>  Bus.$on(&#x27;sendMsg&#x27;, (msg) =&gt; &#123;<br>    this.msg = msg<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>B组件（发送方），触发Bus的$emit事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">Bus.$emit(&#x27;sendMsg&#x27;, &#x27;这是一个消息&#x27;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682328392400.png" alt="68232839240"></p>
</li>
</ol>
<h3 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3.代码示例"></a>3.代码示例</h3><p>EventBus.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Bus</span>  =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Bus</span><br></code></pre></td></tr></table></figure>

<p>BaseA.vue(接受方)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-a&quot;&gt;<br>    我是A组件（接收方）<br>    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;  <br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Bus from &#x27;../utils/EventBus&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg: &#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-a &#123;<br>  width: 200px;<br>  height: 200px;<br>  border: 3px solid #000;<br>  border-radius: 3px;<br>  margin: 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseB.vue(发送方)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-b&quot;&gt;<br>    &lt;div&gt;我是B组件（发布方）&lt;/div&gt;<br>    &lt;button&gt;发送消息&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Bus from &#x27;../utils/EventBus&#x27;<br>export default &#123;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-b &#123;<br>  width: 200px;<br>  height: 200px;<br>  border: 3px solid #000;<br>  border-radius: 3px;<br>  margin: 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseA&gt;&lt;/BaseA&gt;<br>    &lt;BaseB&gt;&lt;/BaseB&gt; <br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseA from &#x27;./components/BaseA.vue&#x27;<br>import BaseB from &#x27;./components/BaseB.vue&#x27; <br>export default &#123;<br>  components:&#123;<br>    BaseA,<br>    BaseB<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h3><p>1.非父子组件传值借助什么？</p>
<p>2.什么是事件总线</p>
<p>3.发送方应该调用事件总线的哪个方法</p>
<p>4.接收方应该调用事件总线的哪个方法</p>
<p>5.一个组件发送数据，可不可以被多个组件接收</p>
<h2 id="十五、非父子通信-provide-inject"><a href="#十五、非父子通信-provide-inject" class="headerlink" title="十五、非父子通信-provide&amp;inject"></a>十五、非父子通信-provide&amp;inject</h2><h3 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1.作用"></a>1.作用</h3><p>跨层级共享数据</p>
<h3 id="2-场景"><a href="#2-场景" class="headerlink" title="2.场景"></a>2.场景</h3><p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682329516878.png" alt="68232950551"></p>
<h3 id="3-语法-1"><a href="#3-语法-1" class="headerlink" title="3.语法"></a>3.语法</h3><ol>
<li>父组件 provide提供数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  provide () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-comment">// 普通类型【非响应式】</span><br>       <span class="hljs-attr">color</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>, <br>       <span class="hljs-comment">// 复杂类型【响应式】</span><br>       <span class="hljs-attr">userInfo</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">userInfo</span>, <br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>2.子&#x2F;孙组件 inject获取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-string">&#x27;color&#x27;</span>,<span class="hljs-string">&#x27;userInfo&#x27;</span>],<br>  created () &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">userInfo</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a>4.注意</h3><ul>
<li>provide提供的简单类型的数据不是响应式的，复杂类型数据是响应式。（推荐提供复杂类型数据）</li>
<li>子&#x2F;孙组件通过inject获取的数据，不能在自身组件内修改</li>
</ul>
<h2 id="十六、v-model原理"><a href="#十六、v-model原理" class="headerlink" title="十六、v-model原理"></a>十六、v-model原理</h2><h3 id="1-原理："><a href="#1-原理：" class="headerlink" title="1.原理："></a>1.原理：</h3><p>v-model本质上是一个语法糖。例如应用在输入框上，就是value属性 和 input事件 的合写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot; &gt;<br>    &lt;input v-model=&quot;msg&quot; type=&quot;text&quot;&gt;<br><br>    &lt;input :value=&quot;msg&quot; @input=&quot;msg = $event.target.value&quot; type=&quot;text&quot;&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure>

<h3 id="2-作用："><a href="#2-作用：" class="headerlink" title="2.作用："></a>2.作用：</h3><p>提供数据的双向绑定</p>
<ul>
<li>数据变，视图跟着变 :value</li>
<li>视图变，数据跟着变 @input</li>
</ul>
<h3 id="3-注意-1"><a href="#3-注意-1" class="headerlink" title="3.注意"></a>3.注意</h3><p><strong>$event</strong> 用于在模板中，获取事件的形参</p>
<h3 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4.代码示例"></a>4.代码示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;input type=&quot;text&quot;  /&gt;<br>    &lt;br /&gt; <br>    &lt;input type=&quot;text&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg1: &#x27;&#x27;,<br>      msg2: &#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt; <br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="5-v-model使用在其他表单元素上的原理"><a href="#5-v-model使用在其他表单元素上的原理" class="headerlink" title="5.v-model使用在其他表单元素上的原理"></a>5.v-model使用在其他表单元素上的原理</h3><p>不同的表单元素， v-model在底层的处理机制是不一样的。比如给checkbox使用v-model</p>
<p>底层处理的是 checked属性和change事件。</p>
<p><strong>不过咱们只需要掌握应用在文本框上的原理即可</strong></p>
<h2 id="十七、表单类组件封装"><a href="#十七、表单类组件封装" class="headerlink" title="十七、表单类组件封装"></a>十七、表单类组件封装</h2><h3 id="1-需求目标"><a href="#1-需求目标" class="headerlink" title="1.需求目标"></a>1.需求目标</h3><p>实现子组件和父组件数据的双向绑定 （实现App.vue中的selectId和子组件选中的数据进行双向绑定）</p>
<h3 id="2-代码演示-2"><a href="#2-代码演示-2" class="headerlink" title="2.代码演示"></a>2.代码演示</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseSelect&gt;&lt;/BaseSelect&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseSelect from &#x27;./components/BaseSelect.vue&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      selectId: &#x27;102&#x27;,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    BaseSelect,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseSelect.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;select&gt;<br>      &lt;option value=&quot;101&quot;&gt;北京&lt;/option&gt;<br>      &lt;option value=&quot;102&quot;&gt;上海&lt;/option&gt;<br>      &lt;option value=&quot;103&quot;&gt;武汉&lt;/option&gt;<br>      &lt;option value=&quot;104&quot;&gt;广州&lt;/option&gt;<br>      &lt;option value=&quot;105&quot;&gt;深圳&lt;/option&gt;<br>    &lt;/select&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十八、v-model简化代码"><a href="#十八、v-model简化代码" class="headerlink" title="十八、v-model简化代码"></a>十八、v-model简化代码</h2><h3 id="1-目标："><a href="#1-目标：" class="headerlink" title="1.目标："></a>1.目标：</h3><p>父组件通过v-model <strong>简化代码</strong>，实现子组件和父组件数据 <strong>双向绑定</strong></p>
<h3 id="2-如何简化："><a href="#2-如何简化：" class="headerlink" title="2.如何简化："></a>2.如何简化：</h3><p>v-model其实就是 :value和@input事件的简写</p>
<ul>
<li>子组件：props通过value接收数据，事件触发 input</li>
<li>父组件：v-model直接绑定数据</li>
</ul>
<h3 id="3-代码示例-1"><a href="#3-代码示例-1" class="headerlink" title="3.代码示例"></a>3.代码示例</h3><p>子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;select :value=&quot;value&quot; @change=&quot;handleChange&quot;&gt;...&lt;/select&gt;<br>props: &#123;<br>  value: String<br>&#125;,<br>methods: &#123;<br>  handleChange (e) &#123;<br>    this.$emit(&#x27;input&#x27;, e.target.value)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;BaseSelect v-model=&quot;selectId&quot;&gt;&lt;/BaseSelect&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十九、-sync修饰符"><a href="#十九、-sync修饰符" class="headerlink" title="十九、.sync修饰符"></a>十九、.sync修饰符</h2><h3 id="1-作用-2"><a href="#1-作用-2" class="headerlink" title="1.作用"></a>1.作用</h3><p>可以实现 <strong>子组件</strong> 与 <strong>父组件数据</strong> 的 <strong>双向绑定</strong>，简化代码</p>
<p>简单理解：<strong>子组件可以修改父组件传过来的props值</strong></p>
<h3 id="2-场景-1"><a href="#2-场景-1" class="headerlink" title="2.场景"></a>2.场景</h3><p>封装弹框类的基础组件， visible属性 true显示 false隐藏</p>
<h3 id="3-本质"><a href="#3-本质" class="headerlink" title="3.本质"></a>3.本质</h3><p>.sync修饰符 就是 <strong>:属性名</strong> 和 <strong>@update:属性名</strong> 合写</p>
<h3 id="4-语法"><a href="#4-语法" class="headerlink" title="4.语法"></a>4.语法</h3><p>父组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">//.sync写法<br>&lt;BaseDialog :visible.sync=&quot;isShow&quot; /&gt;<br>--------------------------------------<br>//完整写法<br>&lt;BaseDialog <br>  :visible=&quot;isShow&quot; <br>  @update:visible=&quot;isShow = $event&quot; <br>/&gt;<br></code></pre></td></tr></table></figure>

<p>子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">props: &#123;<br>  visible: Boolean<br>&#125;,<br><br>this.$emit(&#x27;update:visible&#x27;, false)<br></code></pre></td></tr></table></figure>

<h3 id="5-代码示例"><a href="#5-代码示例" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;button @click=&quot;openDialog&quot;&gt;退出按钮&lt;/button&gt;<br>    &lt;BaseDialog :isShow=&quot;isShow&quot;&gt;&lt;/BaseDialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseDialog from &#x27;./components/BaseDialog.vue&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      isShow: false,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    BaseDialog,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseDialog.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-dialog-wrap&quot; v-show=&quot;isShow&quot;&gt;<br>    &lt;div class=&quot;base-dialog&quot;&gt;<br>      &lt;div class=&quot;title&quot;&gt;<br>        &lt;h3&gt;温馨提示：&lt;/h3&gt;<br>        &lt;button class=&quot;close&quot;&gt;x&lt;/button&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;content&quot;&gt;<br>        &lt;p&gt;你确认要退出本系统么？&lt;/p&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;footer&quot;&gt;<br>        &lt;button&gt;确认&lt;/button&gt;<br>        &lt;button&gt;取消&lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    isShow: Boolean,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-dialog-wrap &#123;<br>  width: 300px;<br>  height: 200px;<br>  box-shadow: 2px 2px 2px 2px #ccc;<br>  position: fixed;<br>  left: 50%;<br>  top: 50%;<br>  transform: translate(-50%, -50%);<br>  padding: 0 10px;<br>&#125;<br>.base-dialog .title &#123;<br>  display: flex;<br>  justify-content: space-between;<br>  align-items: center;<br>  border-bottom: 2px solid #000;<br>&#125;<br>.base-dialog .content &#123;<br>  margin-top: 38px;<br>&#125;<br>.base-dialog .title .close &#123;<br>  width: 20px;<br>  height: 20px;<br>  cursor: pointer;<br>  line-height: 10px;<br>&#125;<br>.footer &#123;<br>  display: flex;<br>  justify-content: flex-end;<br>  margin-top: 26px;<br>&#125;<br>.footer button &#123;<br>  width: 80px;<br>  height: 40px;<br>&#125;<br>.footer button:nth-child(1) &#123;<br>  margin-right: 10px;<br>  cursor: pointer;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>1.父组件如果想让子组件修改传过去的值 必须加什么修饰符？</p>
<p>2.子组件要修改父组件的props值 必须使用什么语法？</p>
<h2 id="二十、ref和-refs"><a href="#二十、ref和-refs" class="headerlink" title="二十、ref和$refs"></a>二十、ref和$refs</h2><h3 id="1-作用-3"><a href="#1-作用-3" class="headerlink" title="1.作用"></a>1.作用</h3><p>利用ref 和 $refs 可以用于 获取 dom 元素 或 组件实例</p>
<h3 id="2-特点："><a href="#2-特点：" class="headerlink" title="2.特点："></a>2.特点：</h3><p>查找范围 →  当前组件内(更精确稳定)</p>
<h3 id="3-语法-2"><a href="#3-语法-2" class="headerlink" title="3.语法"></a>3.语法</h3><p>1.给要获取的盒子添加ref属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;chartRef&quot;</span>&gt;</span>我是渲染图表的容器<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>2.获取时通过 $refs获取  this.$refs.chartRef 获取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">mounted () &#123;<br>  console.log(this.$refs.chartRef)<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="4-注意-1"><a href="#4-注意-1" class="headerlink" title="4.注意"></a>4.注意</h3><p>之前只用document.querySelect(‘.box’) 获取的是整个页面中的盒子</p>
<h3 id="5-代码示例-1"><a href="#5-代码示例-1" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseChart&gt;&lt;/BaseChart&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseChart from &#x27;./components/BaseChart.vue&#x27;<br>export default &#123;<br>  components:&#123;<br>    BaseChart<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>BaseChart.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-chart-box&quot; ref=&quot;baseChartBox&quot;&gt;子组件&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// yarn add echarts 或者 npm i echarts<br>import * as echarts from &#x27;echarts&#x27;<br><br>export default &#123;<br>  mounted() &#123;<br>    // 基于准备好的dom，初始化echarts实例<br>    var myChart = echarts.init(document.querySelect(&#x27;.base-chart-box&#x27;))<br>    // 绘制图表<br>    myChart.setOption(&#123;<br>      title: &#123;<br>        text: &#x27;ECharts 入门示例&#x27;,<br>      &#125;,<br>      tooltip: &#123;&#125;,<br>      xAxis: &#123;<br>        data: [&#x27;衬衫&#x27;, &#x27;羊毛衫&#x27;, &#x27;雪纺衫&#x27;, &#x27;裤子&#x27;, &#x27;高跟鞋&#x27;, &#x27;袜子&#x27;],<br>      &#125;,<br>      yAxis: &#123;&#125;,<br>      series: [<br>        &#123;<br>          name: &#x27;销量&#x27;,<br>          type: &#x27;bar&#x27;,<br>          data: [5, 20, 36, 10, 10, 20],<br>        &#125;,<br>      ],<br>    &#125;)<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-chart-box &#123;<br>  width: 400px;<br>  height: 300px;<br>  border: 3px solid #000;<br>  border-radius: 6px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="二十一、异步更新-nextTick"><a href="#二十一、异步更新-nextTick" class="headerlink" title="二十一、异步更新 &amp; $nextTick"></a>二十一、异步更新 &amp; $nextTick</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>编辑标题,  编辑框自动聚焦</p>
<ol>
<li>点击编辑，显示编辑框</li>
<li>让编辑框，立刻获取焦点</li>
</ol>
<p><img src="/2023/08/11/vue%E5%AD%A6%E4%B9%A0Day4/1682394495346.png" alt="68239449534"></p>
<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;div v-if=&quot;isShowEdit&quot;&gt;<br>      &lt;input type=&quot;text&quot; v-model=&quot;editValue&quot; ref=&quot;inp&quot; /&gt;<br>      &lt;button&gt;确认&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;div v-else&gt;<br>      &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;<br>      &lt;button @click=&quot;editFn&quot;&gt;编辑&lt;/button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      title: &#x27;大标题&#x27;,<br>      isShowEdit: false,<br>      editValue: &#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    editFn() &#123;<br>        // 显示输入框<br>        this.isShowEdit = true  <br>        // 获取焦点<br>        this.$refs.inp.focus() <br>    &#125;  &#125;,<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure>



<h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3.问题"></a>3.问题</h3><p>“显示之后”，立刻获取焦点是不能成功的！</p>
<p>原因：Vue 是异步更新DOM  (提升性能)</p>
<h3 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h3><p>$nextTick：<strong>等 DOM更新后</strong>,才会触发执行此方法里的函数体</p>
<p><strong>语法:</strong> this.$nextTick(函数体)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">inp</span>.<span class="hljs-title function_">focus</span>()<br>&#125;)<br></code></pre></td></tr></table></figure>

<p><strong>注意：</strong>$nextTick 内的函数体 一定是<strong>箭头函数</strong>，这样才能让函数内部的this指向Vue实例</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day3</title>
    <url>/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/</url>
    <content><![CDATA[<h2 id="一、今日学习目标"><a href="#一、今日学习目标" class="headerlink" title="一、今日学习目标"></a>一、今日学习目标</h2><h3 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1.生命周期"></a>1.生命周期</h3><ol>
<li>生命周期介绍</li>
<li>生命周期的四个阶段</li>
<li>生命周期钩子</li>
<li>声明周期案例</li>
</ol>
<h3 id="2-工程化开发入门"><a href="#2-工程化开发入门" class="headerlink" title="2.工程化开发入门"></a>2.工程化开发入门</h3><ol>
<li>工程化开发和脚手架</li>
<li>项目运行流程</li>
<li>组件化</li>
<li>组件注册</li>
</ol>
<h2 id="二、Vue生命周期"><a href="#二、Vue生命周期" class="headerlink" title="二、Vue生命周期"></a>二、Vue生命周期</h2><p>思考：什么时候可以发送初始化渲染请求？（越早越好）什么时候可以开始操作dom？（至少dom得渲染出来）</p>
<p>Vue生命周期：就是一个Vue实例从创建 到 销毁 的整个过程。</p>
<p>生命周期四个阶段：① 创建 ② 挂载 ③ 更新 ④ 销毁</p>
<p>1.创建阶段：创建响应式数据</p>
<p>2.挂载阶段：渲染模板</p>
<p>3.更新阶段：修改数据，更新视图</p>
<p>4.销毁阶段：销毁Vue实例</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682065937815.png" alt="68206593781"></p>
<h2 id="三、Vue生命周期钩子"><a href="#三、Vue生命周期钩子" class="headerlink" title="三、Vue生命周期钩子"></a>三、Vue生命周期钩子</h2><p>Vue生命周期过程中，会<strong>自动运行一些函数</strong>，被称为【<strong>生命周期钩子</strong>】→  让开发者可以在【<strong>特定阶段</strong>】运行<strong>自己的代码</strong></p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682066040295.png" alt="68206604029"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count--&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;计数器&#x27;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 1. 创建阶段（准备数据）</span></span><br><span class="language-javascript">     </span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 2. 挂载阶段（渲染模板）</span></span><br><span class="language-javascript">      </span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 3. 更新阶段(修改数据 → 更新视图)</span></span><br><span class="language-javascript">      </span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 4. 卸载阶段</span></span><br><span class="language-javascript">     </span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="四、生命周期钩子小案例"><a href="#四、生命周期钩子小案例" class="headerlink" title="四、生命周期钩子小案例"></a>四、生命周期钩子小案例</h2><h3 id="1-在created中发送数据"><a href="#1-在created中发送数据" class="headerlink" title="1.在created中发送数据"></a>1.在created中发送数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   * &#123;</span><br><span class="language-css">     <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">     <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">     <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">     <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">     <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">     <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">     <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">     <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">     <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">     <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">     <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">     <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">     <span class="hljs-attribute">object-fit</span>: cover;</span><br><span class="language-css">   &#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>5G商用在即，三大运营商营收持续下降<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>新京报经济新闻<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2222-10-28 11:50:28<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax-api.itheima.net/public/images/0.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>5G商用在即，三大运营商营收持续下降<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>新京报经济新闻<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2222-10-28 11:50:28<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax-api.itheima.net/public/images/0.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>5G商用在即，三大运营商营收持续下降<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>新京报经济新闻<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2222-10-28 11:50:28<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax-api.itheima.net/public/images/0.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">// 接口地址：http://hmajax.itheima.net/api/news</span></span><br><span class="language-javascript">   <span class="hljs-comment">// 请求方式：get</span></span><br><span class="language-javascript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">       <span class="hljs-attr">list</span>: []</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   &#125;)</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h3 id="2-在mounted中获取焦点"><a href="#2-在mounted中获取焦点" class="headerlink" title="2.在mounted中获取焦点"></a>2.在mounted中获取焦点</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">html</span>,</span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-class">.search-box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-class">.search-box</span> <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">512px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">vertical-align</span>: top;</span><br><span class="language-css">      <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-shadow</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#c4c7ce</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#222</span>;</span><br><span class="language-css">      <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">      <span class="hljs-attribute">box-sizing</span>: content-box;</span><br><span class="language-css">      -webkit-tap-highlight-<span class="hljs-attribute">color</span>: transparent;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-class">.search-box</span> <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">112px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">44px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">41px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">42px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ad2a27</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-shadow</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">letter-spacing</span>: normal;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: no-repeat center /cover;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#edf0f5</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.itheima.com/images/logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;words&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>搜索一下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="五、工程化开发和脚手架"><a href="#五、工程化开发和脚手架" class="headerlink" title="五、工程化开发和脚手架"></a>五、工程化开发和脚手架</h2><h3 id="1-开发Vue的两种方式"><a href="#1-开发Vue的两种方式" class="headerlink" title="1.开发Vue的两种方式"></a>1.开发Vue的两种方式</h3><ul>
<li>核心包传统开发模式：基于html &#x2F; css &#x2F; js 文件，直接引入核心包，开发 Vue。</li>
<li><strong>工程化开发模式：基于构建工具（例如：webpack）的环境中开发Vue。</strong></li>
</ul>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682090039070.png" alt="68209003907"></p>
<p>工程化开发模式优点：</p>
<p>   提高编码效率，比如使用JS新语法、Less&#x2F;Sass、Typescript等通过webpack都可以编译成浏览器识别的ES3&#x2F;ES5&#x2F;CSS等</p>
<p>工程化开发模式问题：</p>
<ul>
<li>webpack配置<strong>不简单</strong></li>
<li><strong>雷同</strong>的基础配置</li>
<li>缺乏<strong>统一的标准</strong></li>
</ul>
<p>为了解决以上问题，所以我们需要一个工具，生成标准化的配置</p>
<h3 id="2-脚手架Vue-CLI"><a href="#2-脚手架Vue-CLI" class="headerlink" title="2.脚手架Vue CLI"></a>2.脚手架Vue CLI</h3><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>   Vue CLI 是Vue官方提供的一个<strong>全局命令工具</strong></p>
<p>   可以帮助我们<strong>快速创建</strong>一个开发Vue项目的<strong>标准化基础架子</strong>。【集成了webpack配置】</p>
<h4 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h4><ol>
<li>开箱即用，零配置</li>
<li>内置babel等工具</li>
<li>标准化的webpack配置</li>
</ol>
<h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ol>
<li>全局安装（只需安装一次即可） yarn global add @vue&#x2F;cli 或者 npm i @vue&#x2F;cli -g</li>
<li>查看vue&#x2F;cli版本： vue –version</li>
<li>创建项目架子：<strong>vue create project-name</strong>(项目名不能使用中文)</li>
<li>启动项目：<strong>yarn serve</strong> 或者 <strong>npm run serve</strong>(命令不固定，找package.json)</li>
</ol>
<h2 id="六、项目目录介绍和运行流程"><a href="#六、项目目录介绍和运行流程" class="headerlink" title="六、项目目录介绍和运行流程"></a>六、项目目录介绍和运行流程</h2><h3 id="1-项目目录介绍"><a href="#1-项目目录介绍" class="headerlink" title="1.项目目录介绍"></a>1.项目目录介绍</h3><p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682092148521.png" alt="68209214852"></p>
<p>虽然脚手架中的文件有很多，目前咱们只需人事三个文件即可</p>
<ol>
<li>main.js  入口文件</li>
<li>App.vue  App根组件 </li>
<li>index.html 模板文件</li>
</ol>
<h3 id="2-运行流程"><a href="#2-运行流程" class="headerlink" title="2.运行流程"></a>2.运行流程</h3><p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682094032876.png" alt="68209403287"></p>
<h2 id="七、组件化开发"><a href="#七、组件化开发" class="headerlink" title="七、组件化开发"></a>七、组件化开发</h2><p>​     组件化：一个页面可以拆分成一个个组件，每个组件有着自己独立的结构、样式、行为。</p>
<p>​     好处：便于维护，利于复用 → 提升开发效率。</p>
<p>​     组件分类：普通组件、根组件。</p>
<p>​      比如：下面这个页面，可以把所有的代码都写在一个页面中，但是这样显得代码比较混乱，难易维护。咱们可以按模块进行组件划分</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682168852372.png" alt="68216885237"></p>
<h2 id="八、根组件-App-vue"><a href="#八、根组件-App-vue" class="headerlink" title="八、根组件 App.vue"></a>八、根组件 App.vue</h2><h3 id="1-根组件介绍"><a href="#1-根组件介绍" class="headerlink" title="1.根组件介绍"></a>1.根组件介绍</h3><p>整个应用最上层的组件，包裹所有普通小组件</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682169131688.png" alt="68216913168"></p>
<h3 id="2-组件是由三部分构成"><a href="#2-组件是由三部分构成" class="headerlink" title="2.组件是由三部分构成"></a>2.组件是由三部分构成</h3><ul>
<li>语法高亮插件</li>
</ul>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682169264266.png" alt="68216926426"></p>
<ul>
<li><p><strong>三部分构成</strong></p>
<ul>
<li>template：结构 （有且只能一个根元素）</li>
<li>script:   js逻辑 </li>
<li>style： 样式 (可支持less，需要装包)</li>
</ul>
</li>
<li><p>让组件支持less</p>
<p>（1） style标签，lang&#x3D;”less” 开启less功能 </p>
<p>（2） 装包: yarn add less less-loader -D 或者npm i less less-loader -D</p>
</li>
</ul>
<h2 id="九、普通组件的注册使用-局部注册"><a href="#九、普通组件的注册使用-局部注册" class="headerlink" title="九、普通组件的注册使用-局部注册"></a>九、普通组件的注册使用-局部注册</h2><h3 id="1-特点："><a href="#1-特点：" class="headerlink" title="1.特点："></a>1.特点：</h3><p>只能在注册的组件内使用</p>
<h3 id="2-步骤："><a href="#2-步骤：" class="headerlink" title="2.步骤："></a>2.步骤：</h3><ol>
<li>创建.vue文件（三个组成部分）</li>
<li>在使用的组件内先导入再注册，最后使用</li>
</ol>
<h3 id="3-使用方式："><a href="#3-使用方式：" class="headerlink" title="3.使用方式："></a>3.使用方式：</h3><p>当成html标签使用即可  &lt;组件名&gt;&lt;&#x2F;组件名&gt;</p>
<h3 id="4-注意："><a href="#4-注意：" class="headerlink" title="4.注意："></a>4.注意：</h3><p>组件名规范 —&gt; 大驼峰命名法， 如 HmHeader</p>
<h3 id="5-语法："><a href="#5-语法：" class="headerlink" title="5.语法："></a>5.语法：</h3><p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682227966812.png" alt="68222796681"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入需要注册的组件</span><br><span class="hljs-keyword">import</span> 组件对象 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;.vue文件路径&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HmHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/HmHeader&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-comment">// 局部注册</span><br>  <span class="hljs-attr">components</span>: &#123;<br>   <span class="hljs-string">&#x27;组件名&#x27;</span>: 组件对象,<br>    <span class="hljs-title class_">HmHeader</span>:<span class="hljs-title class_">HmHeaer</span>,<br>    <span class="hljs-title class_">HmHeader</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="6-练习"><a href="#6-练习" class="headerlink" title="6.练习"></a>6.练习</h3><p>在App.vue中使用组件的方式完成下面布局</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682227902873.png" alt="68222790287"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hm-header&quot;&gt;<br>    我是hm-header<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.hm-header &#123;<br>  height: 100px;<br>  line-height: 100px;<br>  text-align: center;<br>  font-size: 30px;<br>  background-color: #8064a2;<br>  color: white;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hm-main&quot;&gt;<br>    我是hm-main<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.hm-main &#123;<br>  height: 400px;<br>  line-height: 400px;<br>  text-align: center;<br>  font-size: 30px;<br>  background-color: #f79646;<br>  color: white;<br>  margin: 20px 0;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hm-footer&quot;&gt;<br>    我是hm-footer<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.hm-footer &#123;<br>  height: 100px;<br>  line-height: 100px;<br>  text-align: center;<br>  font-size: 30px;<br>  background-color: #4f81bd;<br>  color: white;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><ul>
<li>A组件内部注册的局部组件能在B组件使用吗</li>
<li>局部注册组件的步骤是什么</li>
<li>使用组件时 应该按照什么命名法</li>
</ul>
<h2 id="十、普通组件的注册使用-全局注册"><a href="#十、普通组件的注册使用-全局注册" class="headerlink" title="十、普通组件的注册使用-全局注册"></a>十、普通组件的注册使用-全局注册</h2><h3 id="1-特点：-1"><a href="#1-特点：-1" class="headerlink" title="1.特点："></a>1.特点：</h3><p>全局注册的组件，在项目的<strong>任何组件</strong>中都能使用</p>
<h3 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h3><ol>
<li>创建.vue组件（三个组成部分）</li>
<li><strong>main.js</strong>中进行全局注册</li>
</ol>
<h3 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="3.使用方式"></a>3.使用方式</h3><p>当成HTML标签直接使用</p>
<blockquote>
<p>&lt;组件名&gt;&lt;&#x2F;组件名&gt;</p>
</blockquote>
<h3 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a>4.注意</h3><p>组件名规范 —&gt; 大驼峰命名法， 如 HmHeader</p>
<h3 id="5-语法"><a href="#5-语法" class="headerlink" title="5.语法"></a>5.语法</h3><p>Vue.component(‘组件名’, 组件对象)</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入需要全局注册的组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HmButton</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/HmButton&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;HmButton&#x27;</span>, <span class="hljs-title class_">HmButton</span>)<br></code></pre></td></tr></table></figure>

<h3 id="6-练习-1"><a href="#6-练习-1" class="headerlink" title="6.练习"></a>6.练习</h3><p>在以下3个局部组件中是展示一个通用按钮</p>
<p><img src="/2023/08/09/vue%E5%AD%A6%E4%B9%A0Day3/1682263187344.png" alt="68226318734"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button class=&quot;hm-button&quot;&gt;通用按钮&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.hm-button &#123;<br>  height: 50px;<br>  line-height: 50px;<br>  padding: 0 20px;<br>  background-color: #3bae56;<br>  border-radius: 5px;<br>  color: white;<br>  border: none;<br>  vertical-align: middle;<br>  cursor: pointer;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="7-总结-1"><a href="#7-总结-1" class="headerlink" title="7.总结"></a>7.总结</h3><p>1.全局注册组件应该在哪个文件中注册以及语法是什么</p>
<p>2.全局组件在项目中的任何一个组件中可不可以使用</p>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day5</title>
    <url>/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/</url>
    <content><![CDATA[<h2 id="一、今日学习目标"><a href="#一、今日学习目标" class="headerlink" title="一、今日学习目标"></a>一、今日学习目标</h2><h3 id="1-自定义指令"><a href="#1-自定义指令" class="headerlink" title="1.自定义指令"></a>1.自定义指令</h3><ul>
<li>基本语法（全局、局部注册）</li>
<li>指令的值</li>
<li>v-loading的指令封装</li>
</ul>
<h3 id="2-插槽"><a href="#2-插槽" class="headerlink" title="2.插槽"></a>2.插槽</h3><ul>
<li>默认插槽</li>
<li>具名插槽</li>
<li>作用域插槽</li>
</ul>
<h3 id="3-综合案例：商品列表"><a href="#3-综合案例：商品列表" class="headerlink" title="3.综合案例：商品列表"></a>3.综合案例：商品列表</h3><ul>
<li>MyTag组件封装</li>
<li>MyTable组件封装</li>
</ul>
<h3 id="4-路由入门"><a href="#4-路由入门" class="headerlink" title="4.路由入门"></a>4.路由入门</h3><ul>
<li>单页应用程序</li>
<li>路由</li>
<li>VueRouter的基本使用</li>
</ul>
<h2 id="二、自定义指令"><a href="#二、自定义指令" class="headerlink" title="二、自定义指令"></a>二、自定义指令</h2><h3 id="1-指令介绍"><a href="#1-指令介绍" class="headerlink" title="1.指令介绍"></a>1.指令介绍</h3><ul>
<li><p>内置指令：<strong>v-html、v-if、v-bind、v-on</strong>… 这都是Vue给咱们内置的一些指令，可以直接使用</p>
</li>
<li><p>自定义指令：同时Vue也支持让开发者，自己注册一些指令。这些指令被称为<strong>自定义指令</strong></p>
<p>每个指令都有自己各自独立的功能</p>
</li>
</ul>
<h3 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2.自定义指令"></a>2.自定义指令</h3><p>概念：自己定义的指令，可以<strong>封装一些DOM操作</strong>，扩展额外的功能</p>
<h3 id="3-自定义指令语法"><a href="#3-自定义指令语法" class="headerlink" title="3.自定义指令语法"></a>3.自定义指令语法</h3><ul>
<li><p>全局注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在main.js中</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;指令名&#x27;</span>, &#123;<br>  <span class="hljs-string">&quot;inserted&quot;</span> (el) &#123;<br>    <span class="hljs-comment">// 可以对 el 标签，扩展额外功能</span><br>    el.<span class="hljs-title function_">focus</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>局部注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">//在Vue组件的配置项中<br>directives: &#123;<br>  &quot;指令名&quot;: &#123;<br>    inserted () &#123;<br>      // 可以对 el 标签，扩展额外功能<br>      el.focus()<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>使用指令</p>
<p>注意：在使用指令的时候，一定要<strong>先注册</strong>，<strong>再使用</strong>，否则会报错<br>使用指令语法： v-指令名。如：<input type="text" v-focus>  </p>
<p><strong>注册</strong>指令时<strong>不用</strong>加<strong>v-前缀</strong>，但<strong>使用时</strong>一定要<strong>加v-前缀</strong></p>
</li>
</ul>
<h3 id="4-指令中的配置项介绍"><a href="#4-指令中的配置项介绍" class="headerlink" title="4.指令中的配置项介绍"></a>4.指令中的配置项介绍</h3><p>inserted:被绑定元素插入父节点时调用的钩子函数</p>
<p>el：使用指令的那个DOM元素</p>
<h3 id="5-代码示例"><a href="#5-代码示例" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>需求：当页面加载时，让元素获取焦点（<strong>autofocus在safari浏览器有兼容性</strong>）</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;<br>  &lt;h1&gt;自定义指令&lt;/h1&gt;<br>  &lt;input v-focus ref=&quot;inp&quot; type=&quot;text&quot;&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>



<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>1.自定义指令的作用是什么？</p>
<p>2.使用自定义指令的步骤是哪两步？</p>
<h2 id="三、自定义指令-指令的值"><a href="#三、自定义指令-指令的值" class="headerlink" title="三、自定义指令-指令的值"></a>三、自定义指令-指令的值</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>实现一个 color 指令 - 传入不同的颜色, 给标签设置文字颜色</p>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><p>1.在绑定指令时，可以通过“等号”的形式为指令 绑定 具体的参数值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>2.通过 binding.value 可以拿到指令值，<strong>指令值修改会 触发 update 函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">directives</span>: &#123;<br>  <span class="hljs-attr">color</span>: &#123;<br>    inserted (el, binding) &#123;<br>      el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = binding.<span class="hljs-property">value</span><br>    &#125;,<br>    update (el, binding) &#123;<br>      el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = binding.<span class="hljs-property">value</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3.代码示例"></a>3.代码示例</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>     &lt;!--显示红色--&gt; <br>    &lt;h2 v-color=&quot;color1&quot;&gt;指令的值1测试&lt;/h2&gt;<br>     &lt;!--显示蓝色--&gt; <br>    &lt;h2 v-color=&quot;color2&quot;&gt;指令的值2测试&lt;/h2&gt;<br>     &lt;button&gt;<br>        改变第一个h1的颜色<br>    &lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      color1: &#x27;red&#x27;,<br>      color2: &#x27;blue&#x27;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="四、自定义指令-v-loading指令的封装"><a href="#四、自定义指令-v-loading指令的封装" class="headerlink" title="四、自定义指令-v-loading指令的封装"></a>四、自定义指令-v-loading指令的封装</h2><h3 id="1-场景"><a href="#1-场景" class="headerlink" title="1.场景"></a>1.场景</h3><p>实际开发过程中，发送请求需要时间，在请求的数据未回来时，页面会处于<strong>空白状态</strong>  &#x3D;&gt;  用户体验不好</p>
<h3 id="2-需求"><a href="#2-需求" class="headerlink" title="2.需求"></a>2.需求</h3><p>封装一个 v-loading 指令，实现加载中的效果</p>
<h3 id="3-分析"><a href="#3-分析" class="headerlink" title="3.分析"></a>3.分析</h3><p>1.本质 loading效果就是一个蒙层，盖在了盒子上</p>
<p>2.数据请求中，开启loading状态，添加蒙层</p>
<p>3.数据请求完毕，关闭loading状态，移除蒙层</p>
<h3 id="4-实现"><a href="#4-实现" class="headerlink" title="4.实现"></a>4.实现</h3><p>1.准备一个 loading类，通过伪元素定位，设置宽高，实现蒙层</p>
<p>2.开启关闭 loading状态（添加移除蒙层），本质只需要添加移除类即可</p>
<p>3.结合自定义指令的语法进行封装复用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;./loading.gif&quot;</span>) no-repeat center;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="5-准备代码"><a href="#5-准备代码" class="headerlink" title="5.准备代码"></a>5.准备代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.source &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.time &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.img&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 安装axios =&gt;  yarn add axios || npm i axios</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 接口地址：http://hmajax.itheima.net/api/news</span></span><br><span class="language-javascript"><span class="hljs-comment">// 请求方式：get</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  data () &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">list</span>: [],</span><br><span class="language-javascript">      <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">isLoading2</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-keyword">async</span> created () &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 发送请求获取数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://hmajax.itheima.net/api/news&#x27;</span>)</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 2. 更新到 list 中，用于页面渲染 v-for</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">    &#125;, <span class="hljs-number">2000</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./loading.gif&#x27;</span>) no-repeat center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid orange;</span><br><span class="language-css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">  <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">object-fit</span>: cover;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="五、插槽-默认插槽"><a href="#五、插槽-默认插槽" class="headerlink" title="五、插槽-默认插槽"></a>五、插槽-默认插槽</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><p>让组件内部的一些 <strong>结构</strong> 支持 <strong>自定义</strong></p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682410215245.png" alt="68241021524"></p>
<h3 id="2-需求-1"><a href="#2-需求-1" class="headerlink" title="2.需求"></a>2.需求</h3><p>将需要多次显示的对话框,封装成一个组件</p>
<h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3.问题"></a>3.问题</h3><p>组件的内容部分，<strong>不希望写死</strong>，希望能使用的时候<strong>自定义</strong>。怎么办</p>
<h3 id="4-插槽的基本语法"><a href="#4-插槽的基本语法" class="headerlink" title="4.插槽的基本语法"></a>4.插槽的基本语法</h3><ol>
<li>组件内需要定制的结构部分，改用**<slot></slot>**占位</li>
<li>使用组件时, **<MyDialog></MyDialog>**标签内部, 传入结构替换slot</li>
<li>给插槽传入内容时，可以传入<strong>纯文本、html标签、组件</strong></li>
</ol>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682410329794.png" alt="68241032979"></p>
<h3 id="5-代码示例-1"><a href="#5-代码示例-1" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>MyDialog.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;dialog&quot;&gt;<br>    &lt;div class=&quot;dialog-header&quot;&gt;<br>      &lt;h3&gt;友情提示&lt;/h3&gt;<br>      &lt;span class=&quot;close&quot;&gt;✖️&lt;/span&gt;<br>    &lt;/div&gt;<br><br>    &lt;div class=&quot;dialog-content&quot;&gt;<br>      您确定要进行删除操作吗？<br>    &lt;/div&gt;<br>    &lt;div class=&quot;dialog-footer&quot;&gt;<br>      &lt;button&gt;取消&lt;/button&gt;<br>      &lt;button&gt;确认&lt;/button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>* &#123;<br>  margin: 0;<br>  padding: 0;<br>&#125;<br>.dialog &#123;<br>  width: 470px;<br>  height: 230px;<br>  padding: 0 25px;<br>  background-color: #ffffff;<br>  margin: 40px auto;<br>  border-radius: 5px;<br>&#125;<br>.dialog-header &#123;<br>  height: 70px;<br>  line-height: 70px;<br>  font-size: 20px;<br>  border-bottom: 1px solid #ccc;<br>  position: relative;<br>&#125;<br>.dialog-header .close &#123;<br>  position: absolute;<br>  right: 0px;<br>  top: 0px;<br>  cursor: pointer;<br>&#125;<br>.dialog-content &#123;<br>  height: 80px;<br>  font-size: 18px;<br>  padding: 15px 0;<br>&#125;<br>.dialog-footer &#123;<br>  display: flex;<br>  justify-content: flex-end;<br>&#125;<br>.dialog-footer button &#123;<br>  width: 65px;<br>  height: 35px;<br>  background-color: #ffffff;<br>  border: 1px solid #e1e3e9;<br>  cursor: pointer;<br>  outline: none;<br>  margin-left: 10px;<br>  border-radius: 3px;<br>&#125;<br>.dialog-footer button:last-child &#123;<br>  background-color: #007acc;<br>  color: #fff;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;MyDialog&gt;<br>    &lt;/MyDialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyDialog from &#x27;./components/MyDialog.vue&#x27;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br><br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    MyDialog<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>body &#123;<br>  background-color: #b3b3b3;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="6-总结-1"><a href="#6-总结-1" class="headerlink" title="6.总结"></a>6.总结</h3><p>场景：组件内某一部分结构不确定，想要自定义怎么办</p>
<p>使用：插槽的步骤分为哪几步？</p>
<h2 id="六、插槽-后备内容（默认值）"><a href="#六、插槽-后备内容（默认值）" class="headerlink" title="六、插槽-后备内容（默认值）"></a>六、插槽-后备内容（默认值）</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h3><p>通过插槽完成了内容的定制，传什么显示什么, 但是如果不传，则是空白</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682411494612.png" alt="68241149461"></p>
<p>能否给插槽设置 默认显示内容 呢？</p>
<h3 id="2-插槽的后备内容"><a href="#2-插槽的后备内容" class="headerlink" title="2.插槽的后备内容"></a>2.插槽的后备内容</h3><p>封装组件时，可以为预留的 <code>&lt;slot&gt;</code> 插槽提供后备内容（默认内容）。</p>
<h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h3><p>在 <slot> 标签内，放置内容, 作为默认显示内容</slot></p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682412365046.png" alt="68241233912"></p>
<h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h3><ul>
<li><p>外部使用组件时，不传东西，则slot会显示后备内容 </p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682412432656.png" alt="68241243265"></p>
</li>
<li><p>外部使用组件时，传东西了，则slot整体会被换掉</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682412459027.png" alt="68241245902"></p>
</li>
</ul>
<h3 id="5-代码示例-2"><a href="#5-代码示例-2" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;MyDialog&gt;&lt;/MyDialog&gt;<br>    &lt;MyDialog&gt;<br>      你确认要退出么<br>    &lt;/MyDialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyDialog from &#x27;./components/MyDialog.vue&#x27;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br><br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    MyDialog<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>body &#123;<br>  background-color: #b3b3b3;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="七、插槽-具名插槽"><a href="#七、插槽-具名插槽" class="headerlink" title="七、插槽-具名插槽"></a>七、插槽-具名插槽</h2><h3 id="1-需求-1"><a href="#1-需求-1" class="headerlink" title="1.需求"></a>1.需求</h3><p>一个组件内有多处结构，需要外部传入标签，进行定制 <img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682413134876.png" alt="68241313487"></p>
<p>上面的弹框中有<strong>三处不同</strong>，但是<strong>默认插槽</strong>只能<strong>定制一个位置</strong>，这时候怎么办呢?</p>
<h3 id="2-具名插槽语法"><a href="#2-具名插槽语法" class="headerlink" title="2.具名插槽语法"></a>2.具名插槽语法</h3><ul>
<li><p>多个slot使用name属性区分名字 </p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682413391727.png" alt="68241339172"></p>
</li>
<li><p>template配合v-slot:名字来分发对应标签</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682413411921.png" alt="68241341192"></p>
</li>
</ul>
<h3 id="3-v-slot的简写"><a href="#3-v-slot的简写" class="headerlink" title="3.v-slot的简写"></a>3.v-slot的简写</h3><p>v-slot写起来太长，vue给我们提供一个简单写法 <strong>v-slot —&gt; #</strong></p>
<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><ul>
<li>组件内 有多处不确定的结构 怎么办?</li>
<li>具名插槽的语法是什么？</li>
<li>v-slot:插槽名可以简化成什么?</li>
</ul>
<h2 id="八、作用域插槽"><a href="#八、作用域插槽" class="headerlink" title="八、作用域插槽"></a>八、作用域插槽</h2><h3 id="1-插槽分类"><a href="#1-插槽分类" class="headerlink" title="1.插槽分类"></a>1.插槽分类</h3><ul>
<li><p>默认插槽</p>
</li>
<li><p>具名插槽</p>
<p>插槽只有两种，作用域插槽不属于插槽的一种分类</p>
</li>
</ul>
<h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h3><p>定义slot 插槽的同时, 是可以<strong>传值</strong>的。给 <strong>插槽</strong> 上可以 <strong>绑定数据</strong>，将来 <strong>使用组件时可以用</strong></p>
<h3 id="3-场景"><a href="#3-场景" class="headerlink" title="3.场景"></a>3.场景</h3><p>封装表格组件</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682414342139.png" alt="68241434213"></p>
<h3 id="4-使用步骤"><a href="#4-使用步骤" class="headerlink" title="4.使用步骤"></a>4.使用步骤</h3><ol>
<li><p>给 slot 标签, 以 添加属性的方式传值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;slot :id=&quot;item.id&quot; msg=&quot;测试文本&quot;&gt;&lt;/slot&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>所有添加的属性, 都会被收集到一个对象中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&#123; id: 3, msg: &#x27;测试文本&#x27; &#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>在template中, 通过  <code> #插槽名= &quot;obj&quot;</code> 接收，默认插槽名为 default</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;MyTable :list=&quot;list&quot;&gt;<br>  &lt;template #default=&quot;obj&quot;&gt;<br>    &lt;button @click=&quot;del(obj.id)&quot;&gt;删除&lt;/button&gt;<br>  &lt;/template&gt;<br>&lt;/MyTable&gt;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-代码示例-3"><a href="#5-代码示例-3" class="headerlink" title="5.代码示例"></a>5.代码示例</h3><p>MyTable.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;table class=&quot;my-table&quot;&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;th&gt;序号&lt;/th&gt;<br>        &lt;th&gt;姓名&lt;/th&gt;<br>        &lt;th&gt;年纪&lt;/th&gt;<br>        &lt;th&gt;操作&lt;/th&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;1&lt;/td&gt;<br>        &lt;td&gt;赵小云&lt;/td&gt;<br>        &lt;td&gt;19&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;button&gt;<br>          	查看    <br>    	  &lt;/button&gt;<br>        &lt;/td&gt;<br>      &lt;/tr&gt;<br>        &lt;tr&gt;<br>        &lt;td&gt;1&lt;/td&gt;<br>        &lt;td&gt;张小花&lt;/td&gt;<br>        &lt;td&gt;19&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;button&gt;<br>          	查看    <br>    	  &lt;/button&gt;<br>        &lt;/td&gt;<br>      &lt;/tr&gt;<br>        &lt;tr&gt;<br>        &lt;td&gt;1&lt;/td&gt;<br>        &lt;td&gt;孙大明&lt;/td&gt;<br>        &lt;td&gt;19&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;button&gt;<br>          	查看    <br>    	  &lt;/button&gt;<br>        &lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    data: Array<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.my-table &#123;<br>  width: 450px;<br>  text-align: center;<br>  border: 1px solid #ccc;<br>  font-size: 24px;<br>  margin: 30px auto;<br>&#125;<br>.my-table thead &#123;<br>  background-color: #1f74ff;<br>  color: #fff;<br>&#125;<br>.my-table thead th &#123;<br>  font-weight: normal;<br>&#125;<br>.my-table thead tr &#123;<br>  line-height: 40px;<br>&#125;<br>.my-table th,<br>.my-table td &#123;<br>  border-bottom: 1px solid #ccc;<br>  border-right: 1px solid #ccc;<br>&#125;<br>.my-table td:last-child &#123;<br>  border-right: none;<br>&#125;<br>.my-table tr:last-child td &#123;<br>  border-bottom: none;<br>&#125;<br>.my-table button &#123;<br>  width: 65px;<br>  height: 35px;<br>  font-size: 18px;<br>  border: 1px solid #ccc;<br>  outline: none;<br>  border-radius: 3px;<br>  cursor: pointer;<br>  background-color: #ffffff;<br>  margin-left: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;MyTable :data=&quot;list&quot;&gt;&lt;/MyTable&gt;<br>    &lt;MyTable :data=&quot;list2&quot;&gt;&lt;/MyTable&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  import MyTable from &#x27;./components/MyTable.vue&#x27;<br>  export default &#123;<br>    data () &#123;<br>      return &#123;<br>     	list: [<br>            &#123; id: 1, name: &#x27;张小花&#x27;, age: 18 &#125;,<br>            &#123; id: 2, name: &#x27;孙大明&#x27;, age: 19 &#125;,<br>            &#123; id: 3, name: &#x27;刘德忠&#x27;, age: 17 &#125;,<br>          ],<br>          list2: [<br>            &#123; id: 1, name: &#x27;赵小云&#x27;, age: 18 &#125;,<br>            &#123; id: 2, name: &#x27;刘蓓蓓&#x27;, age: 19 &#125;,<br>            &#123; id: 3, name: &#x27;姜肖泰&#x27;, age: 17 &#125;,<br>          ]<br>      &#125;<br>    &#125;,<br>    components: &#123;<br>      MyTable<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="6-总结-2"><a href="#6-总结-2" class="headerlink" title="6.总结"></a>6.总结</h3><p>1.作用域插槽的作用是什么？</p>
<p>2.作用域插槽的使用步骤是什么？</p>
<h2 id="九、综合案例-商品列表-MyTag组件抽离"><a href="#九、综合案例-商品列表-MyTag组件抽离" class="headerlink" title="九、综合案例 - 商品列表-MyTag组件抽离"></a>九、综合案例 - 商品列表-MyTag组件抽离</h2><p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682416406585.png" alt="68241640658"></p>
<h3 id="1-需求说明"><a href="#1-需求说明" class="headerlink" title="1.需求说明"></a>1.需求说明</h3><ol>
<li><strong>my-tag 标签组件封装</strong></li>
</ol>
<p>​    (1) 双击显示输入框，输入框获取焦点</p>
<p>​    (2) 失去焦点，隐藏输入框</p>
<p>​    (3) 回显标签信息</p>
<p>​    (4) 内容修改，回车 → 修改标签信息</p>
<ol start="2">
<li><strong>my-table 表格组件封装</strong></li>
</ol>
<p>​    (1) 动态传递表格数据渲染</p>
<p>​    (2) 表头支持用户自定义</p>
<p>​    (3) 主体支持用户自定义</p>
<h3 id="2-代码准备"><a href="#2-代码准备" class="headerlink" title="2.代码准备"></a>2.代码准备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;table-case&quot;&gt;<br>    &lt;table class=&quot;my-table&quot;&gt;<br>      &lt;thead&gt;<br>        &lt;tr&gt;<br>          &lt;th&gt;编号&lt;/th&gt;<br>          &lt;th&gt;名称&lt;/th&gt;<br>          &lt;th&gt;图片&lt;/th&gt;<br>          &lt;th width=&quot;100px&quot;&gt;标签&lt;/th&gt;<br>        &lt;/tr&gt;<br>      &lt;/thead&gt;<br>      &lt;tbody&gt;<br>        &lt;tr&gt;<br>          &lt;td&gt;1&lt;/td&gt;<br>          &lt;td&gt;梨皮朱泥三绝清代小品壶经典款紫砂壶&lt;/td&gt;<br>          &lt;td&gt;<br>            &lt;img src=&quot;https://yanxuan-item.nosdn.127.net/f8c37ffa41ab1eb84bff499e1f6acfc7.jpg&quot; /&gt;<br>          &lt;/td&gt;<br>          &lt;td&gt;<br>            &lt;div class=&quot;my-tag&quot;&gt;<br>              &lt;!-- &lt;input <br>                class=&quot;input&quot;<br>                type=&quot;text&quot;<br>                placeholder=&quot;输入标签&quot;<br>              /&gt; --&gt;<br>              &lt;div class=&quot;text&quot;&gt;<br>                茶具<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>          &lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>          &lt;td&gt;1&lt;/td&gt;<br>          &lt;td&gt;梨皮朱泥三绝清代小品壶经典款紫砂壶&lt;/td&gt;<br>          &lt;td&gt;<br>            &lt;img src=&quot;https://yanxuan-item.nosdn.127.net/221317c85274a188174352474b859d7b.jpg&quot; /&gt;<br>          &lt;/td&gt;<br>          &lt;td&gt;<br>            &lt;div class=&quot;my-tag&quot;&gt;<br>              &lt;!-- &lt;input<br>                ref=&quot;inp&quot;<br>                class=&quot;input&quot;<br>                type=&quot;text&quot;<br>                placeholder=&quot;输入标签&quot;<br>              /&gt; --&gt;<br>              &lt;div class=&quot;text&quot;&gt;<br>                男靴<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>          &lt;/td&gt;<br>        &lt;/tr&gt;<br>      &lt;/tbody&gt;<br>    &lt;/table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;TableCase&#x27;,<br>  components: &#123;&#125;,<br>  data() &#123;<br>    return &#123;<br>      goods: [<br>        &#123;<br>          id: 101,<br>          picture:<br>            &#x27;https://yanxuan-item.nosdn.127.net/f8c37ffa41ab1eb84bff499e1f6acfc7.jpg&#x27;,<br>          name: &#x27;梨皮朱泥三绝清代小品壶经典款紫砂壶&#x27;,<br>          tag: &#x27;茶具&#x27;,<br>        &#125;,<br>        &#123;<br>          id: 102,<br>          picture:<br>            &#x27;https://yanxuan-item.nosdn.127.net/221317c85274a188174352474b859d7b.jpg&#x27;,<br>          name: &#x27;全防水HABU旋钮牛皮户外徒步鞋山宁泰抗菌&#x27;,<br>          tag: &#x27;男鞋&#x27;,<br>        &#125;,<br>        &#123;<br>          id: 103,<br>          picture:<br>            &#x27;https://yanxuan-item.nosdn.127.net/cd4b840751ef4f7505c85004f0bebcb5.png&#x27;,<br>          name: &#x27;毛茸茸小熊出没，儿童羊羔绒背心73-90cm&#x27;,<br>          tag: &#x27;儿童服饰&#x27;,<br>        &#125;,<br>        &#123;<br>          id: 104,<br>          picture:<br>            &#x27;https://yanxuan-item.nosdn.127.net/56eb25a38d7a630e76a608a9360eec6b.jpg&#x27;,<br>          name: &#x27;基础百搭，儿童套头针织毛衣1-9岁&#x27;,<br>          tag: &#x27;儿童服饰&#x27;,<br>        &#125;,<br>      ],<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.table-case &#123;<br>  width: 1000px;<br>  margin: 50px auto;<br>  img &#123;<br>    width: 100px;<br>    height: 100px;<br>    object-fit: contain;<br>    vertical-align: middle;<br>  &#125;<br><br>  .my-table &#123;<br>    width: 100%;<br>    border-spacing: 0;<br>    img &#123;<br>      width: 100px;<br>      height: 100px;<br>      object-fit: contain;<br>      vertical-align: middle;<br>    &#125;<br>    th &#123;<br>      background: #f5f5f5;<br>      border-bottom: 2px solid #069;<br>    &#125;<br>    td &#123;<br>      border-bottom: 1px dashed #ccc;<br>    &#125;<br>    td,<br>    th &#123;<br>      text-align: center;<br>      padding: 10px;<br>      transition: all 0.5s;<br>      &amp;.red &#123;<br>        color: red;<br>      &#125;<br>    &#125;<br>    .none &#123;<br>      height: 100px;<br>      line-height: 100px;<br>      color: #999;<br>    &#125;<br>  &#125;<br>  .my-tag &#123;<br>    cursor: pointer;<br>    .input &#123;<br>      appearance: none;<br>      outline: none;<br>      border: 1px solid #ccc;<br>      width: 100px;<br>      height: 40px;<br>      box-sizing: border-box;<br>      padding: 10px;<br>      color: #666;<br>      &amp;::placeholder &#123;<br>        color: #666;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-my-tag组件封装-创建组件"><a href="#3-my-tag组件封装-创建组件" class="headerlink" title="3.my-tag组件封装-创建组件"></a>3.my-tag组件封装-创建组件</h3><p>MyTag.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;my-tag&quot;&gt;<br>  &lt;!--  &lt;input<br>      class=&quot;input&quot;<br>      type=&quot;text&quot;<br>      placeholder=&quot;输入标签&quot; <br>    /&gt; --&gt;<br>    &lt;div  <br>      class=&quot;text&quot;&gt;<br>       茶具<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br> <br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.my-tag &#123;<br>  cursor: pointer;<br>  .input &#123;<br>    appearance: none;<br>    outline: none;<br>    border: 1px solid #ccc;<br>    width: 100px;<br>    height: 40px;<br>    box-sizing: border-box;<br>    padding: 10px;<br>    color: #666;<br>    &amp;::placeholder &#123;<br>      color: #666;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  ...<br> &lt;tbody&gt;<br>       &lt;tr&gt;<br>          ....<br>          &lt;td&gt;<br>            &lt;MyTag&gt;&lt;/MyTag&gt;<br>          &lt;/td&gt;<br>       &lt;/tr&gt;<br> &lt;/tbody&gt;<br> ...<br>&lt;/template&gt;<br>&lt;script&gt;<br>import MyTag from &#x27;./components/MyTag.vue&#x27;<br>export default &#123;<br>  name: &#x27;TableCase&#x27;,<br>  components: &#123;<br>    MyTag,<br>  &#125;,<br> ....<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十、综合案例-MyTag组件控制显示隐藏"><a href="#十、综合案例-MyTag组件控制显示隐藏" class="headerlink" title="十、综合案例-MyTag组件控制显示隐藏"></a>十、综合案例-MyTag组件控制显示隐藏</h2><p>MyTag.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;my-tag&quot;&gt;<br>    &lt;input<br>      v-if=&quot;isEdit&quot;<br>      v-focus<br>      ref=&quot;inp&quot;<br>      class=&quot;input&quot;<br>      type=&quot;text&quot;<br>      placeholder=&quot;输入标签&quot; <br>      @blur=&quot;isEdit = false&quot; <br>    /&gt;<br>    &lt;div <br>      v-else<br>      @dblclick=&quot;handleClick&quot;<br>      class=&quot;text&quot;&gt;<br>       茶具<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      isEdit: false<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    handleClick () &#123;<br>      this.isEdit = true<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 封装全局指令 focus</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-comment">// 指令所在的dom元素，被插入到页面中时触发</span><br>  inserted (el) &#123;<br>    el.<span class="hljs-title function_">focus</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="十一、综合案例-MyTag组件进行v-model绑定"><a href="#十一、综合案例-MyTag组件进行v-model绑定" class="headerlink" title="十一、综合案例-MyTag组件进行v-model绑定"></a>十一、综合案例-MyTag组件进行v-model绑定</h2><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;MyTag v-model=&quot;tempText&quot;&gt;&lt;/MyTag&gt;<br>&lt;script&gt;<br>    export default &#123;<br>        data()&#123;<br>            tempText:&#x27;水杯&#x27;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>MyTag.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;template&gt;<br>  &lt;div class=&quot;my-tag&quot;&gt;<br>    &lt;input<br>      v-if=&quot;isEdit&quot;<br>      v-focus<br>      ref=&quot;inp&quot;<br>      class=&quot;input&quot;<br>      type=&quot;text&quot;<br>      placeholder=&quot;输入标签&quot;<br>      :value=&quot;value&quot;<br>      @blur=&quot;isEdit = false&quot;<br>      @keyup.enter=&quot;handleEnter&quot;<br>    /&gt;<br>    &lt;div <br>      v-else<br>      @dblclick=&quot;handleClick&quot;<br>      class=&quot;text&quot;&gt;<br>      &#123;&#123; value &#125;&#125;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    value: String<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br>      isEdit: false<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    handleClick () &#123;<br>      this.isEdit = true<br>    &#125;,<br>    handleEnter (e) &#123;<br>      // 非空处理<br>      if (e.target.value.trim() === &#x27;&#x27;) return alert(&#x27;标签内容不能为空&#x27;)<br>      this.$emit(&#x27;input&#x27;, e.target.value)<br>      // 提交完成，关闭输入状态<br>      this.isEdit = false<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure>



<h2 id="十二、综合案例-封装MyTable组件-动态渲染数据"><a href="#十二、综合案例-封装MyTable组件-动态渲染数据" class="headerlink" title="十二、综合案例-封装MyTable组件-动态渲染数据"></a>十二、综合案例-封装MyTable组件-动态渲染数据</h2><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;table-case&quot;&gt;<br>    &lt;MyTable :data=&quot;goods&quot;&gt;&lt;/MyTable&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyTable from &#x27;./components/MyTable.vue&#x27;<br>export default &#123;<br>  name: &#x27;TableCase&#x27;,<br>  components: &#123; <br>    MyTable<br>  &#125;,<br>  data()&#123;<br>    return &#123;<br>        ....<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure>

<p>MyTable.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;table class=&quot;my-table&quot;&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;th&gt;编号&lt;/th&gt;<br>        &lt;th&gt;名称&lt;/th&gt;<br>        &lt;th&gt;图片&lt;/th&gt;<br>        &lt;th width=&quot;100px&quot;&gt;标签&lt;/th&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr v-for=&quot;(item, index) in data&quot; :key=&quot;item.id&quot;&gt;<br>       &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;img<br>            :src=&quot;item.picture&quot;<br>          /&gt;<br>        &lt;/td&gt;<br>        &lt;td&gt;<br>          标签内容<br>         &lt;!-- &lt;MyTag v-model=&quot;item.tag&quot;&gt;&lt;/MyTag&gt; --&gt;<br>        &lt;/td&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    data: &#123;<br>      type: Array,<br>      required: true<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br><br>.my-table &#123;<br>  width: 100%;<br>  border-spacing: 0;<br>  img &#123;<br>    width: 100px;<br>    height: 100px;<br>    object-fit: contain;<br>    vertical-align: middle;<br>  &#125;<br>  th &#123;<br>    background: #f5f5f5;<br>    border-bottom: 2px solid #069;<br>  &#125;<br>  td &#123;<br>    border-bottom: 1px dashed #ccc;<br>  &#125;<br>  td,<br>  th &#123;<br>    text-align: center;<br>    padding: 10px;<br>    transition: all .5s;<br>    &amp;.red &#123;<br>      color: red;<br>    &#125;<br>  &#125;<br>  .none &#123;<br>    height: 100px;<br>    line-height: 100px;<br>    color: #999;<br>  &#125;<br>&#125;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十三、综合案例-封装MyTable组件-自定义结构"><a href="#十三、综合案例-封装MyTable组件-自定义结构" class="headerlink" title="十三、综合案例-封装MyTable组件-自定义结构"></a>十三、综合案例-封装MyTable组件-自定义结构</h2><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;table-case&quot;&gt;<br>    &lt;MyTable :data=&quot;goods&quot;&gt;<br>      &lt;template #head&gt;<br>        &lt;th&gt;编号&lt;/th&gt;<br>        &lt;th&gt;名称&lt;/th&gt;<br>        &lt;th&gt;图片&lt;/th&gt;<br>        &lt;th width=&quot;100px&quot;&gt;标签&lt;/th&gt;<br>      &lt;/template&gt;<br><br>      &lt;template #body=&quot;&#123; item, index &#125;&quot;&gt;<br>        &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;img<br>            :src=&quot;item.picture&quot;<br>          /&gt;<br>        &lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;MyTag v-model=&quot;item.tag&quot;&gt;&lt;/MyTag&gt;<br>        &lt;/td&gt;<br>      &lt;/template&gt;<br>    &lt;/MyTable&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyTag from &#x27;./components/MyTag.vue&#x27;<br>import MyTable from &#x27;./components/MyTable.vue&#x27;<br>export default &#123;<br>  name: &#x27;TableCase&#x27;,<br>  components: &#123;<br>    MyTag,<br>    MyTable<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br>      ....<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br> <br></code></pre></td></tr></table></figure>

<p>MyTable.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;table class=&quot;my-table&quot;&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;slot name=&quot;head&quot;&gt;&lt;/slot&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>      &lt;tr v-for=&quot;(item, index) in data&quot; :key=&quot;item.id&quot;&gt;<br>        &lt;slot name=&quot;body&quot; :item=&quot;item&quot; :index=&quot;index&quot; &gt;&lt;/slot&gt;<br>      &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    data: &#123;<br>      type: Array,<br>      required: true<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十四、单页应用程序介绍"><a href="#十四、单页应用程序介绍" class="headerlink" title="十四、单页应用程序介绍"></a>十四、单页应用程序介绍</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>单页应用程序：SPA【Single Page Application】是指所有的功能都在<strong>一个html页面</strong>上实现</p>
<h3 id="2-具体示例"><a href="#2-具体示例" class="headerlink" title="2.具体示例"></a>2.具体示例</h3><p>单页应用网站： 网易云音乐  <a href="https://music.163.com/">https://music.163.com/</a></p>
<p>多页应用网站：京东  <a href="https://jd.com/">https://jd.com/</a></p>
<h3 id="3-单页应用-VS-多页面应用"><a href="#3-单页应用-VS-多页面应用" class="headerlink" title="3.单页应用 VS 多页面应用"></a>3.单页应用 VS 多页面应用</h3><p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682441912977.png" alt="68244191297"></p>
<p>单页应用类网站：系统类网站 &#x2F; 内部网站 &#x2F; 文档类网站 &#x2F; 移动端站点</p>
<p>多页应用类网站：公司官网 &#x2F; 电商类网站 </p>
<h3 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h3><p>1.什么是单页面应用程序?</p>
<p>2.单页面应用优缺点?</p>
<p>3.单页应用场景？</p>
<h2 id="十五、路由介绍"><a href="#十五、路由介绍" class="headerlink" title="十五、路由介绍"></a>十五、路由介绍</h2><h3 id="1-思考"><a href="#1-思考" class="headerlink" title="1.思考"></a>1.思考</h3><p>单页面应用程序，之所以开发效率高，性能好，用户体验好</p>
<p>最大的原因就是：<strong>页面按需更新</strong></p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682442699775.png" alt="68244269977"></p>
<p>比如当点击【发现音乐】和【关注】时，<strong>只是更新下面部分内容</strong>，对于头部是不更新的</p>
<p>要按需更新，首先就需要明确：<strong>访问路径</strong>和 <strong>组件</strong>的对应关系！</p>
<p>访问路径 和 组件的对应关系如何确定呢？ <strong>路由</strong></p>
<h3 id="2-路由的介绍"><a href="#2-路由的介绍" class="headerlink" title="2.路由的介绍"></a>2.路由的介绍</h3><p>生活中的路由：设备和ip的映射关系</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682442945057.png" alt="68244294505"></p>
<p>Vue中的路由：<strong>路径和组件</strong>的<strong>映射</strong>关系</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682443040372.png" alt="68244304037"></p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><ul>
<li>什么是路由</li>
<li>Vue中的路由是什么</li>
</ul>
<h2 id="十六、路由的基本使用"><a href="#十六、路由的基本使用" class="headerlink" title="十六、路由的基本使用"></a>十六、路由的基本使用</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><p>认识插件 VueRouter，掌握 VueRouter 的基本使用步骤</p>
<h3 id="2-作用-1"><a href="#2-作用-1" class="headerlink" title="2.作用"></a>2.作用</h3><p><strong>修改</strong>地址栏路径时，<strong>切换显示</strong>匹配的<strong>组件</strong></p>
<h3 id="3-说明"><a href="#3-说明" class="headerlink" title="3.说明"></a>3.说明</h3><p>Vue 官方的一个路由插件，是一个第三方包</p>
<h3 id="4-官网"><a href="#4-官网" class="headerlink" title="4.官网"></a>4.官网</h3><p><a href="https://v3.router.vuejs.org/zh/">https://v3.router.vuejs.org/zh/</a></p>
<h3 id="5-VueRouter的使用（5-2）"><a href="#5-VueRouter的使用（5-2）" class="headerlink" title="5.VueRouter的使用（5+2）"></a>5.VueRouter的使用（5+2）</h3><p>固定5个固定的步骤（不用死背，熟能生巧）</p>
<ol>
<li><p>下载 VueRouter 模块到当前工程，版本3.6.5</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn add vue-router@3.6.5<br></code></pre></td></tr></table></figure>
</li>
<li><p>main.js中引入VueRouter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import VueRouter from &#x27;vue-router&#x27;<br></code></pre></td></tr></table></figure>
</li>
<li><p>安装注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">Vue.use(VueRouter)<br></code></pre></td></tr></table></figure>
</li>
<li><p>创建路由对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">const router = new VueRouter()<br></code></pre></td></tr></table></figure>
</li>
<li><p>注入，将路由对象注入到new Vue实例中，建立关联</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>  render: h =&gt; h(App),<br>  router:router<br>&#125;).$mount(&#x27;#app&#x27;)<br><br></code></pre></td></tr></table></figure></li>
</ol>
<p>当我们配置完以上5步之后 就可以看到浏览器地址栏中的路由 变成了 &#x2F;#&#x2F;的形式。表示项目的路由已经被Vue-Router管理了</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682479207453.png" alt="68247920745"></p>
<h3 id="6-代码示例"><a href="#6-代码示例" class="headerlink" title="6.代码示例"></a>6.代码示例</h3><p>main.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 路由的使用步骤 5 + 2<br>// 5个基础步骤<br>// 1. 下载 v3.6.5<br>// yarn add vue-router@3.6.5<br>// 2. 引入<br>// 3. 安装注册 Vue.use(Vue插件)<br>// 4. 创建路由对象<br>// 5. 注入到new Vue中，建立关联<br><br><br>import VueRouter from &#x27;vue-router&#x27;<br>Vue.use(VueRouter) // VueRouter插件初始化<br><br>const router = new VueRouter()<br><br>new Vue(&#123;<br>  render: h =&gt; h(App),<br>  router<br>&#125;).$mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure>



<h3 id="7-两个核心步骤"><a href="#7-两个核心步骤" class="headerlink" title="7.两个核心步骤"></a>7.两个核心步骤</h3><ol>
<li><p>创建需要的组件 (views目录)，配置路由规则</p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682479639666.png" alt="68247963966"></p>
</li>
<li><p>配置导航，配置路由出口(路径匹配的组件显示的位置)</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;footer_wrap&quot;&gt;<br>  &lt;a href=&quot;#/find&quot;&gt;发现音乐&lt;/a&gt;<br>  &lt;a href=&quot;#/my&quot;&gt;我的音乐&lt;/a&gt;<br>  &lt;a href=&quot;#/friend&quot;&gt;朋友&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;top&quot;&gt;<br>  &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h3><ol>
<li>如何实现 路径改变，对应组件 切换,应该使用哪个插件?</li>
<li>Vue-Router的使用步骤是什么(5+2)?</li>
</ol>
<h2 id="十七、组件的存放目录问题"><a href="#十七、组件的存放目录问题" class="headerlink" title="十七、组件的存放目录问题"></a>十七、组件的存放目录问题</h2><p>注意： <strong>.vue文件</strong> 本质无区别</p>
<h3 id="1-组件分类"><a href="#1-组件分类" class="headerlink" title="1.组件分类"></a>1.组件分类</h3><p> .vue文件分为2类，都是 <strong>.vue文件（本质无区别）</strong></p>
<ul>
<li>页面组件 （配置路由规则时使用的组件）</li>
<li>复用组件（多个组件中都使用到的组件）</li>
</ul>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682445397959.png" alt="68244539795"></p>
<h3 id="2-存放目录"><a href="#2-存放目录" class="headerlink" title="2.存放目录"></a>2.存放目录</h3><p>分类开来的目的就是为了 <strong>更易维护</strong></p>
<ol>
<li><p>src&#x2F;views文件夹</p>
<p>页面组件 - 页面展示 - 配合路由用</p>
</li>
<li><p>src&#x2F;components文件夹</p>
<p>复用组件 - 展示数据 - 常用于复用</p>
</li>
</ol>
<h3 id="3-总结-1"><a href="#3-总结-1" class="headerlink" title="3.总结"></a>3.总结</h3><ul>
<li>组件分类有哪两类？分类的目的？</li>
<li>不同分类的组件应该放在什么文件夹？作用分别是什么？</li>
</ul>
<h2 id="十八、路由的封装抽离"><a href="#十八、路由的封装抽离" class="headerlink" title="十八、路由的封装抽离"></a>十八、路由的封装抽离</h2><p>问题：所有的路由配置都在main.js中合适吗？</p>
<p>目标：将路由模块抽离出来。  好处：<strong>拆分模块，利于维护</strong></p>
<p><img src="/2023/08/12/vue%E5%AD%A6%E4%B9%A0Day5/1682481410304.png" alt="68248141030"></p>
<p>路径简写：</p>
<p><strong>脚手架环境下</strong> @指代src目录，可以用于快速引入组件</p>
<p>总结：</p>
<ul>
<li>路由模块的封装抽离的好处是什么？</li>
<li>以后如何快速引入组件？</li>
</ul>
]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day7</title>
    <url>/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/</url>
    <content><![CDATA[<h2 id="一、Vuex-概述"><a href="#一、Vuex-概述" class="headerlink" title="一、Vuex 概述"></a>一、<a href="https://vuex.vuejs.org/zh/">Vuex</a> 概述</h2><p>目标：明确<a href="https://vuex.vuejs.org/zh/">Vuex</a>是什么，应用场景以及优势</p>
<h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h3><p>Vuex 是一个 Vue 的 状态管理工具，状态就是数据。</p>
<p>大白话：Vuex 是一个插件，可以帮我们管理 Vue 通用的数据 (多组件共享的数据)。例如：购物车数据   个人信息数</p>
<h3 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.使用场景"></a>2.使用场景</h3><ul>
<li><p>某个状态 在 很多个组件 来使用 (个人信息)</p>
</li>
<li><p>多个组件 共同维护 一份数据 (购物车)</p>
</li>
</ul>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683178186642.png" alt="68317818664"></p>
<h3 id="3-优势"><a href="#3-优势" class="headerlink" title="3.优势"></a>3.优势</h3><ul>
<li>共同维护一份数据，<strong>数据集中化管理</strong></li>
<li><strong>响应式变化</strong></li>
<li>操作简洁 (vuex提供了一些辅助函数)</li>
</ul>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683178293366.png" alt="68317829336"></p>
<h3 id="4-注意："><a href="#4-注意：" class="headerlink" title="4.注意："></a>4.注意：</h3><p>官方原文：</p>
<ul>
<li>不是所有的场景都适用于vuex，只有在必要的时候才使用vuex</li>
<li>使用了vuex之后，会附加更多的框架中的概念进来，增加了项目的复杂度  （数据的操作更便捷，数据的流动更清晰）</li>
</ul>
<p>Vuex就像《近视眼镜》, 你自然会知道什么时候需要用它~</p>
<h2 id="二、需求-多组件共享数据"><a href="#二、需求-多组件共享数据" class="headerlink" title="二、需求: 多组件共享数据"></a>二、需求: 多组件共享数据</h2><p>目标：基于脚手架创建项目，构建 vuex 多组件数据共享环境</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683178912695.png" alt="68317891269"></p>
<p>效果是三个组件共享一份数据:</p>
<ul>
<li>任意一个组件都可以修改数据</li>
<li>三个组件的数据是同步的</li>
</ul>
<h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">vue create vuex-demo<br></code></pre></td></tr></table></figure>

<h3 id="2-创建三个组件-目录如下"><a href="#2-创建三个组件-目录如下" class="headerlink" title="2.创建三个组件, 目录如下"></a>2.创建三个组件, 目录如下</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">|-components<br>|--Son1.vue<br>|--Son2.vue<br>|-App.vue<br></code></pre></td></tr></table></figure>

<h3 id="3-源代码如下"><a href="#3-源代码如下" class="headerlink" title="3.源代码如下"></a>3.源代码如下</h3><p><code>App.vue</code>在入口组件中引入 Son1 和 Son2 这两个子组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>根组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Son1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Son2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son1</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son1.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son2</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Son2.vue&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;app&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">Son1</span>,</span><br><span class="language-javascript">    <span class="hljs-title class_">Son2</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<p><code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p><code>Son1.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Son1 子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    从vuex中获取的值: <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>值 + 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Son1Com&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;css&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box</span>&#123;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<p><code>Son2.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Son2 子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    从vuex中获取的值:<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>值 - 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Son2Com&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;css&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="三、vuex-的使用-创建仓库"><a href="#三、vuex-的使用-创建仓库" class="headerlink" title="三、vuex 的使用 - 创建仓库"></a>三、vuex 的使用 - 创建仓库</h2><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683212784179.png" alt="68321278417"></p>
<h3 id="1-安装-vuex"><a href="#1-安装-vuex" class="headerlink" title="1.安装 vuex"></a>1.安装 vuex</h3><p>安装vuex与vue-router类似，vuex是一个独立存在的插件，如果脚手架初始化没有选 vuex，就需要额外安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn add vuex@3 或者 npm i vuex@3<br></code></pre></td></tr></table></figure>

<h3 id="2-新建-store-index-js-专门存放-vuex"><a href="#2-新建-store-index-js-专门存放-vuex" class="headerlink" title="2.新建 store/index.js 专门存放 vuex"></a>2.新建 <code>store/index.js</code> 专门存放 vuex</h3><p>​	为了维护项目目录的整洁，在src目录下新建一个store目录其下放置一个index.js文件。 (和 <code>router/index.js</code> 类似)</p>
<p>​	<img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683212805824.png" alt="68321280582"></p>
<h3 id="3-创建仓库-store-index-js"><a href="#3-创建仓库-store-index-js" class="headerlink" title="3.创建仓库 store/index.js"></a>3.创建仓库 <code>store/index.js</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 导入 vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 导入 vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// vuex也是vue的插件, 需要use一下, 进行插件的安装初始化</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>()<br><br><span class="hljs-comment">// 导出仓库</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure>

<h3 id="4-在-main-js-中导入挂载到-Vue-实例上"><a href="#4-在-main-js-中导入挂载到-Vue-实例上" class="headerlink" title="4 在 main.js 中导入挂载到 Vue 实例上"></a>4 在 main.js 中导入挂载到 Vue 实例上</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>  store<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>此刻起, 就成功创建了一个 <strong>空仓库!!</strong></p>
<h3 id="5-测试打印Vuex"><a href="#5-测试打印Vuex" class="headerlink" title="5.测试打印Vuex"></a>5.测试打印Vuex</h3><p>App.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>)<br>&#125;<br></code></pre></td></tr></table></figure>





<h2 id="四、核心概念-state-状态"><a href="#四、核心概念-state-状态" class="headerlink" title="四、核心概念 - state 状态"></a>四、核心概念 - state 状态</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><p>明确如何给仓库 提供 数据，如何 使用 仓库的数据</p>
<h3 id="2-提供数据"><a href="#2-提供数据" class="headerlink" title="2.提供数据"></a>2.提供数据</h3><p>State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储。</p>
<p>打开项目中的store.js文件，在state对象中可以添加我们要共享的数据。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// state 状态, 即数据, 类似于vue组件中的data,</span><br>  <span class="hljs-comment">// 区别：</span><br>  <span class="hljs-comment">// 1.data 是组件自己的数据, </span><br>  <span class="hljs-comment">// 2.state 中的数据整个vue项目的组件都能访问到</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">101</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="3-访问Vuex中的数据"><a href="#3-访问Vuex中的数据" class="headerlink" title="3.访问Vuex中的数据"></a>3.访问Vuex中的数据</h3><p>问题: 如何在组件中获取count?</p>
<ol>
<li>通过$store直接访问  —&gt;  </li>
<li>通过辅助函数mapState 映射计算属性  —&gt;  </li>
</ol>
<h3 id="4-通过-store访问的语法"><a href="#4-通过-store访问的语法" class="headerlink" title="4.通过$store访问的语法"></a>4.通过$store访问的语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">获取 store：<br> <span class="hljs-number">1.</span><span class="hljs-title class_">Vue</span>模板中获取 <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span><br> <span class="hljs-number">2.</span>js文件中获取 <span class="hljs-keyword">import</span> 导入 store<br><br><br>模板中：     &#123;&#123; $store.<span class="hljs-property">state</span>.<span class="hljs-property">xxx</span> &#125;&#125;<br>组件逻辑中：  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">xxx</span><br><span class="hljs-variable constant_">JS</span>模块中：   store.<span class="hljs-property">state</span>.<span class="hljs-property">xxx</span><br></code></pre></td></tr></table></figure>



<h3 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5.代码实现"></a>5.代码实现</h3><h4 id="5-1模板中使用"><a href="#5-1模板中使用" class="headerlink" title="5.1模板中使用"></a>5.1模板中使用</h4><p>组件中可以使用  <strong>$store</strong> 获取到vuex中的store对象实例，可通过<strong>state</strong>属性属性获取<strong>count</strong>， 如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;h1&gt;state的数据 - &#123;&#123; $store.state.count &#125;&#125;&lt;/h1&gt;<br></code></pre></td></tr></table></figure>

<h4 id="5-2组件逻辑中使用"><a href="#5-2组件逻辑中使用" class="headerlink" title="5.2组件逻辑中使用"></a>5.2组件逻辑中使用</h4><p>将state属性定义在计算属性中 <a href="https://vuex.vuejs.org/zh/guide/state.html">https://vuex.vuejs.org/zh/guide/state.html</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;h1&gt;state的数据 - &#123;&#123; count &#125;&#125;&lt;/h1&gt;<br><br><span class="hljs-comment">// 把state中数据，定义在组件内的计算属性中</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>    count () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>

<h4 id="5-3-js文件中使用"><a href="#5-3-js文件中使用" class="headerlink" title="5.3 js文件中使用"></a>5.3 js文件中使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">//main.js<br><br>import store from &quot;@/store&quot;<br><br>console.log(store.state.count)<br></code></pre></td></tr></table></figure>

<p>每次都像这样一个个的提供计算属性, 太麻烦了,我们有没有简单的语法帮我们获取state中的值呢？</p>
<h2 id="五、通过辅助函数-mapState获取-state中的数据"><a href="#五、通过辅助函数-mapState获取-state中的数据" class="headerlink" title="五、通过辅助函数  - mapState获取 state中的数据"></a>五、通过辅助函数  - mapState获取 state中的数据</h2><blockquote>
<p>mapState是辅助函数，帮助我们把store中的数据映射到 组件的计算属性中, 它属于一种方便的用法</p>
</blockquote>
<p>用法 ：</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683214719574.png" alt="68321471957"> </p>
<h3 id="1-第一步：导入mapState-mapState是vuex中的一个函数"><a href="#1-第一步：导入mapState-mapState是vuex中的一个函数" class="headerlink" title="1.第一步：导入mapState (mapState是vuex中的一个函数)"></a>1.第一步：导入mapState (mapState是vuex中的一个函数)</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure>

<h3 id="2-第二步：采用数组形式引入state属性"><a href="#2-第二步：采用数组形式引入state属性" class="headerlink" title="2.第二步：采用数组形式引入state属性"></a>2.第二步：采用数组形式引入state属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>]) <br></code></pre></td></tr></table></figure>

<blockquote>
<p>上面代码的最终得到的是 <strong>类似于</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">count () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-第三步：利用展开运算符将导出的状态映射给计算属性"><a href="#3-第三步：利用展开运算符将导出的状态映射给计算属性" class="headerlink" title="3.第三步：利用展开运算符将导出的状态映射给计算属性"></a>3.第三步：利用<strong>展开运算符</strong>将导出的状态映射给计算属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt; state的数据：&#123;&#123; count &#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure>



<h2 id="六、开启严格模式及Vuex的单项数据流"><a href="#六、开启严格模式及Vuex的单项数据流" class="headerlink" title="六、开启严格模式及Vuex的单项数据流"></a>六、开启严格模式及Vuex的单项数据流</h2><h3 id="1-目标-1"><a href="#1-目标-1" class="headerlink" title="1.目标"></a>1.目标</h3><p>明确 vuex 同样遵循单向数据流，组件中不能直接修改仓库的数据</p>
<h3 id="2-直接在组件中修改Vuex中state的值"><a href="#2-直接在组件中修改Vuex中state的值" class="headerlink" title="2.直接在组件中修改Vuex中state的值"></a>2.直接在组件中修改Vuex中state的值</h3><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683215892288.png" alt="68321589228"></p>
<p>Son1.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">button @click=&quot;handleAdd&quot;&gt;值 + 1&lt;/button&gt;<br><br><br>methods:&#123;<br>	 handleAdd (n) &#123;<br>      // 错误代码(vue默认不会监测，监测需要成本)<br>       this.$store.state.count++<br>      // console.log(this.$store.state.count) <br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-开启严格模式"><a href="#3-开启严格模式" class="headerlink" title="3.开启严格模式"></a>3.开启严格模式</h3><p>通过 <code>strict: true</code> 可以开启严格模式,开启严格模式后，直接修改state中的值会报错</p>
<blockquote>
<p><strong>state数据的修改只能通过mutations，并且mutations必须是同步的</strong></p>
</blockquote>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683215821033.png" alt="68321471957"></p>
<h2 id="七、核心概念-mutations"><a href="#七、核心概念-mutations" class="headerlink" title="七、核心概念-mutations"></a>七、核心概念-mutations</h2><h3 id="1-定义mutations"><a href="#1-定义mutations" class="headerlink" title="1.定义mutations"></a>1.定义mutations</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-comment">// 定义mutations</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>     <br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="2-格式说明"><a href="#2-格式说明" class="headerlink" title="2.格式说明"></a>2.格式说明</h3><p>mutations是一个对象，对象中存放修改state的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 方法里参数 第一个参数是当前store的state属性</span><br>    <span class="hljs-comment">// payload 载荷 运输参数 调用mutaiions的时候 可以传递参数 传递载荷</span><br>    addCount (state) &#123;<br>      state.<span class="hljs-property">count</span> += <span class="hljs-number">1</span><br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure>

<h3 id="3-组件中提交-mutations"><a href="#3-组件中提交-mutations" class="headerlink" title="3.组件中提交 mutations"></a>3.组件中提交 mutations</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h3 id="4-练习"><a href="#4-练习" class="headerlink" title="4.练习"></a>4.练习</h3><p>1.在mutations中定义个点击按钮进行 +5 的方法</p>
<p>2.在mutations中定义个点击按钮进行 改变title 的方法</p>
<p>3.在组件中调用mutations修改state中的值</p>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><p>通过mutations修改state的步骤</p>
<p>1.定义 mutations 对象，对象中存放修改 state 的方法</p>
<p>2.组件中提交调用 mutations(通过$store.commit(‘mutations的方法名’))</p>
<h2 id="八、带参数的-mutations"><a href="#八、带参数的-mutations" class="headerlink" title="八、带参数的 mutations"></a>八、带参数的 mutations</h2><h3 id="1-目标："><a href="#1-目标：" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握 mutations 传参语法</p>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><p>看下面这个案例，每次点击不同的按钮，加的值都不同，每次都要定义不同的mutations处理吗？</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217004239.png" alt="68321700423"></p>
<p>提交 mutation 是可以传递参数的  <code>this.$store.commit(&#39;xxx&#39;,  参数)</code></p>
<h4 id="2-1-提供mutation函数（带参数）"><a href="#2-1-提供mutation函数（带参数）" class="headerlink" title="2.1 提供mutation函数（带参数）"></a>2.1 提供mutation函数（带参数）</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br>  ...<br>  addCount (state, count) &#123;<br>    state.<span class="hljs-property">count</span> = count<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>

<h4 id="2-2-提交mutation"><a href="#2-2-提交mutation" class="headerlink" title="2.2 提交mutation"></a>2.2 提交mutation</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">handle ( ) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>, <span class="hljs-number">10</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>小tips: 提交的参数只能是一个, 如果有多个参数要传, 可以传递一个对象</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>, &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">10</span><br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="九、练习-mutations的减法功能"><a href="#九、练习-mutations的减法功能" class="headerlink" title="九、练习-mutations的减法功能"></a>九、练习-mutations的减法功能</h2><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217248752.png" alt="68321724875"></p>
<h3 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h3><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217268256.png" alt="68321726825"></p>
<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>Son2.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;subCount(1)&quot;&gt;值 - 1&lt;/button&gt;<br>&lt;button @click=&quot;subCount(5)&quot;&gt;值 - 5&lt;/button&gt;<br>&lt;button @click=&quot;subCount(10)&quot;&gt;值 - 10&lt;/button&gt;<br><br>export default &#123;<br>    methods:&#123;<br>         subCount (n) &#123; <br>            this.$store.commit(&#x27;addCount&#x27;, n)<br>    &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>store&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>:&#123;<br>    subCount (state, n) &#123;<br>      state.<span class="hljs-property">count</span> -= n<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="十、练习-Vuex中的值和组件中的input双向绑定"><a href="#十、练习-Vuex中的值和组件中的input双向绑定" class="headerlink" title="十、练习-Vuex中的值和组件中的input双向绑定"></a>十、练习-Vuex中的值和组件中的input双向绑定</h2><h3 id="1-目标-2"><a href="#1-目标-2" class="headerlink" title="1.目标"></a>1.目标</h3><p>实时输入，实时更新，巩固 mutations 传参语法</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217697064.png" alt="68321769706"></p>
<h3 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683217717788.png" alt="68321771778"></p>
<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;input :value=&quot;count&quot; @input=&quot;handleInput&quot; type=&quot;text&quot;&gt;<br><br>export default &#123;<br>  methods: &#123;<br>    handleInput (e) &#123;<br>      // 1. 实时获取输入框的值<br>      const num = +e.target.value<br>      // 2. 提交mutation，调用mutation函数<br>      this.$store.commit(&#x27;changeCount&#x27;, num)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>store&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123; <br>   changeCount (state, newCount) &#123;<br>      state.<span class="hljs-property">count</span> = newCount<br>   &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>



<h2 id="十一、辅助函数-mapMutations"><a href="#十一、辅助函数-mapMutations" class="headerlink" title="十一、辅助函数- mapMutations"></a>十一、辅助函数- mapMutations</h2><blockquote>
<p>mapMutations和mapState很像，它把位于mutations中的方法提取了出来，我们可以将它导入</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span>  &#123; mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;addCount&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>上面代码的含义是将mutations的方法导入了methods中，等价于</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>      <span class="hljs-comment">// commit(方法名, 载荷参数)</span><br>      addCount () &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>)<br>      &#125;<br> &#125;<br></code></pre></td></tr></table></figure>

<p>此时，就可以直接通过this.addCount调用了</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;button @click=<span class="hljs-string">&quot;addCount&quot;</span>&gt;值+<span class="hljs-number">1</span>&lt;/button&gt;<br></code></pre></td></tr></table></figure>

<p>但是请注意： Vuex中mutations中要求不能写异步代码，如果有异步的ajax请求，应该放置在actions中</p>
<h2 id="十二、核心概念-actions"><a href="#十二、核心概念-actions" class="headerlink" title="十二、核心概念 - actions"></a>十二、核心概念 - actions</h2><blockquote>
<p>state是存放数据的，mutations是同步更新数据 (便于监测数据的变化, 更新视图等, 方便于调试工具查看变化)，</p>
<p>actions则负责进行异步操作</p>
</blockquote>
<p><strong>说明：mutations必须是同步的</strong></p>
<p><strong>需求: 一秒钟之后, 要给一个数 去修改state</strong></p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683218603674.png" alt="68321860367"></p>
<h3 id="1-定义actions"><a href="#1-定义actions" class="headerlink" title="1.定义actions"></a><strong>1.定义actions</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br>  changeCount (state, newCount) &#123;<br>    state.<span class="hljs-property">count</span> = newCount<br>  &#125;<br>&#125;<br><br><br><span class="hljs-attr">actions</span>: &#123;<br>  setAsyncCount (context, num) &#123;<br>    <span class="hljs-comment">// 一秒后, 给一个数, 去修改 num</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;changeCount&#x27;</span>, num)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>

<h3 id="2-组件中通过dispatch调用"><a href="#2-组件中通过dispatch调用" class="headerlink" title="2.组件中通过dispatch调用"></a><strong>2.组件中通过dispatch调用</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">setAsyncCount () &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;setAsyncCount&#x27;</span>, <span class="hljs-number">666</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683441987572.png" alt="68344198757"></p>
<h2 id="十三、辅助函数-mapActions"><a href="#十三、辅助函数-mapActions" class="headerlink" title="十三、辅助函数 -mapActions"></a>十三、辅助函数 -mapActions</h2><p>1.目标：掌握辅助函数 mapActions，映射方法</p>
<blockquote>
<p>mapActions 是把位于 actions中的方法提取了出来，映射到组件methods中</p>
</blockquote>
<p>Son2.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-attr">methods</span>: &#123;<br>   ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;changeCountAction&#x27;</span>])<br>&#125;<br><br><span class="hljs-comment">//mapActions映射的代码 本质上是以下代码的写法</span><br><span class="hljs-comment">//methods: &#123;</span><br><span class="hljs-comment">//  changeCountAction (n) &#123;</span><br><span class="hljs-comment">//    this.$store.dispatch(&#x27;changeCountAction&#x27;, n)</span><br><span class="hljs-comment">//  &#125;,</span><br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure>

<p>直接通过 this.方法 就可以调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;changeCountAction(200)&quot;&gt;+异步&lt;/button&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十四、核心概念-getters"><a href="#十四、核心概念-getters" class="headerlink" title="十四、核心概念 - getters"></a>十四、核心概念 - getters</h2><blockquote>
<p>除了state之外，有时我们还需要从state中<strong>筛选出符合条件的一些数据</strong>，这些数据是依赖state的，此时会用到getters</p>
</blockquote>
<p>例如，state中定义了list，为1-10的数组，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">list</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>&#125;<br></code></pre></td></tr></table></figure>

<p>组件中，需要显示所有大于5的数据，正常的方式，是需要list在组件中进行再一步的处理，但是getters可以帮助我们实现它</p>
<h3 id="1-定义getters"><a href="#1-定义getters" class="headerlink" title="1.定义getters"></a>1.定义getters</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// getters函数的第一个参数是 state</span><br>  <span class="hljs-comment">// 必须要有返回值</span><br>   <span class="hljs-attr">filterList</span>:  <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span>  state.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">5</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="2-使用getters"><a href="#2-使用getters" class="headerlink" title="2.使用getters"></a>2.使用getters</h3><h4 id="2-1原始方式-store"><a href="#2-1原始方式-store" class="headerlink" title="2.1原始方式-$store"></a>2.1原始方式-$store</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;&#123;&#123; $store.getters.filterList &#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h4 id="2-2辅助函数-mapGetters"><a href="#2-2辅助函数-mapGetters" class="headerlink" title="2.2辅助函数 - mapGetters"></a>2.2辅助函数 - mapGetters</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;filterList&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;&#123;&#123; filterList &#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h2 id="十五、使用小结"><a href="#十五、使用小结" class="headerlink" title="十五、使用小结"></a>十五、使用小结</h2><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683442133911.png" alt="68344213391"></p>
<h2 id="十六、核心概念-module"><a href="#十六、核心概念-module" class="headerlink" title="十六、核心概念 - module"></a>十六、核心概念 - module</h2><h3 id="1-目标-3"><a href="#1-目标-3" class="headerlink" title="1.目标"></a>1.目标</h3><p>掌握核心概念 module 模块的创建</p>
<h3 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h3><p>由于使用<strong>单一状态树</strong>，应用的所有状态<strong>会集中到一个比较大的对象</strong>。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>
<p>这句话的意思是，如果把所有的状态都放在state中，当项目变得越来越大的时候，Vuex会变得越来越难以维护</p>
<p>由此，又有了Vuex的模块化</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683425758358.png" alt="68342575835"></p>
<h3 id="3-模块定义-准备-state"><a href="#3-模块定义-准备-state" class="headerlink" title="3.模块定义 - 准备 state"></a><strong>3.模块定义</strong> - 准备 state</h3><p>定义两个模块   <strong>user</strong> 和  <strong>setting</strong></p>
<p>user中管理用户的信息状态  userInfo  <code>modules/user.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">userInfo</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  state,<br>  mutations,<br>  actions,<br>  getters<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>setting中管理项目应用的  主题色 theme，描述 desc， <code>modules/setting.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;dark&#x27;</span><br>  <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;描述真呀真不错&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  state,<br>  mutations,<br>  actions,<br>  getters<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在<code>store/index.js</code>文件中的modules配置项中，注册这两个模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/user&#x27;</span><br><span class="hljs-keyword">import</span> setting <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/setting&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">modules</span>:&#123;<br>        user,<br>        setting<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>使用模块中的数据,  可以直接通过模块名访问 <code>$store.state.模块名.xxx</code>  &#x3D;&gt;  <code>$store.state.setting.desc</code></p>
<p>也可以通过 mapState 映射</p>
<h2 id="十七、获取模块内的state数据"><a href="#十七、获取模块内的state数据" class="headerlink" title="十七、获取模块内的state数据"></a>十七、获取模块内的state数据</h2><h3 id="1-目标：-1"><a href="#1-目标：-1" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握模块中 state 的访问语法</p>
<p>尽管已经分模块了，但其实子模块的状态，还是会挂到根级别的 state 中，属性名就是模块名</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683427841660.png" alt="68342784166"></p>
<h3 id="2-使用模块中的数据"><a href="#2-使用模块中的数据" class="headerlink" title="2.使用模块中的数据"></a>2.使用模块中的数据</h3><ol>
<li>直接通过模块名访问 $store.state.模块名.xxx</li>
<li>通过 mapState 映射：<ol>
<li>默认根级别的映射  mapState([ ‘xxx’ ])     </li>
<li>子模块的映射 ：mapState(‘模块名’, [‘xxx’])  -  需要开启命名空间 <strong>namespaced:true</strong></li>
</ol>
</li>
</ol>
<p><code>modules/user.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">userInfo</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>  &#125;,<br>  <span class="hljs-attr">myMsg</span>: <span class="hljs-string">&#x27;我的数据&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br>  updateMsg (state, msg) &#123;<br>    state.<span class="hljs-property">myMsg</span> = msg<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  state,<br>  mutations,<br>  actions,<br>  getters<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3.代码示例"></a>3.代码示例</h3><p>$store直接访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$store.<span class="hljs-property">state</span>.<span class="hljs-property">user</span>.<span class="hljs-property">userInfo</span>.<span class="hljs-property">name</span><br></code></pre></td></tr></table></figure>

<p>mapState辅助函数访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;user&#x27;</span>, [<span class="hljs-string">&#x27;userInfo&#x27;</span>]),<br>...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;setting&#x27;</span>, [<span class="hljs-string">&#x27;theme&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>]),<br></code></pre></td></tr></table></figure>



<h2 id="十八、获取模块内的getters数据"><a href="#十八、获取模块内的getters数据" class="headerlink" title="十八、获取模块内的getters数据"></a>十八、获取模块内的getters数据</h2><h3 id="1-目标：-2"><a href="#1-目标：-2" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握模块中 getters 的访问语</p>
<h3 id="2-语法："><a href="#2-语法：" class="headerlink" title="2.语法："></a>2.语法：</h3><p>使用模块中 getters 中的数据： </p>
<ol>
<li>直接通过模块名访问<code> $store.getters[&#39;模块名/xxx &#39;]</code></li>
<li>通过 mapGetters 映射      <ol>
<li>默认根级别的映射  <code>mapGetters([ &#39;xxx&#39; ]) </code></li>
<li>子模块的映射  <code>mapGetters(&#39;模块名&#39;, [&#39;xxx&#39;])</code> -  需要开启命名空间</li>
</ol>
</li>
</ol>
<h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3.代码演示"></a>3.代码演示</h3><p><code>modules/user.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-comment">// 分模块后，state指代子模块的state</span><br>  <span class="hljs-title class_">UpperCaseName</span> (state) &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">userInfo</span>.<span class="hljs-property">name</span>.<span class="hljs-title function_">toUpperCase</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Son1.vue 直接访问getters</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 测试访问模块中的getters - 原生 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; $store.getters[&#x27;user/UpperCaseName&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>Son2.vue 通过命名空间访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>:&#123;<br>  ...<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&#x27;user&#x27;</span>, [<span class="hljs-string">&#x27;UpperCaseName&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="十九、获取模块内的mutations方法"><a href="#十九、获取模块内的mutations方法" class="headerlink" title="十九、获取模块内的mutations方法"></a>十九、获取模块内的mutations方法</h2><h3 id="1-目标：-3"><a href="#1-目标：-3" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握模块中 mutation 的调用语法</p>
<h3 id="2-注意："><a href="#2-注意：" class="headerlink" title="2.注意："></a>2.注意：</h3><p>默认模块中的 mutation 和 actions 会被挂载到全局，<strong>需要开启命名空间</strong>，才会挂载到子模块。</p>
<h3 id="3-调用方式："><a href="#3-调用方式：" class="headerlink" title="3.调用方式："></a>3.调用方式：</h3><ol>
<li>直接通过 store 调用   $store.commit(‘模块名&#x2F;xxx ‘,  额外参数)</li>
<li>通过 mapMutations 映射    <ol>
<li>默认根级别的映射  mapMutations([ ‘xxx’ ])     </li>
<li>子模块的映射 mapMutations(‘模块名’, [‘xxx’])  -  需要开启命名空间</li>
</ol>
</li>
</ol>
<h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><p><code>modules/user.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mutations = &#123;<br>  setUser (state, newUserInfo) &#123;<br>    state.<span class="hljs-property">userInfo</span> = newUserInfo<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><code>modules/setting.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mutations = &#123;<br>  setTheme (state, newTheme) &#123;<br>    state.<span class="hljs-property">theme</span> = newTheme<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Son1.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;updateUser&quot;&gt;更新个人信息&lt;/button&gt; <br>&lt;button @click=&quot;updateTheme&quot;&gt;更新主题色&lt;/button&gt;<br><br><br>export default &#123;<br>  methods: &#123;<br>    updateUser () &#123;<br>      // $store.commit(&#x27;模块名/mutation名&#x27;, 额外传参)<br>      this.$store.commit(&#x27;user/setUser&#x27;, &#123;<br>        name: &#x27;xiaowang&#x27;,<br>        age: 25<br>      &#125;)<br>    &#125;, <br>    updateTheme () &#123;<br>      this.$store.commit(&#x27;setting/setTheme&#x27;, &#x27;pink&#x27;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>Son2.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;setUser(&#123; name: &#x27;xiaoli&#x27;, age: 80 &#125;)&quot;&gt;更新个人信息&lt;/button&gt;<br>&lt;button @click=&quot;setTheme(&#x27;skyblue&#x27;)&quot;&gt;更新主题&lt;/button&gt;<br><br>methods:&#123;<br>// 分模块的映射<br>...mapMutations(&#x27;setting&#x27;, [&#x27;setTheme&#x27;]),<br>...mapMutations(&#x27;user&#x27;, [&#x27;setUser&#x27;]),<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="二十、获取模块内的actions方法"><a href="#二十、获取模块内的actions方法" class="headerlink" title="二十、获取模块内的actions方法"></a>二十、获取模块内的actions方法</h2><h3 id="1-目标：-4"><a href="#1-目标：-4" class="headerlink" title="1.目标："></a>1.目标：</h3><p>掌握模块中 action 的调用语法 (同理 - 直接类比 mutation 即可)</p>
<h3 id="2-注意：-1"><a href="#2-注意：-1" class="headerlink" title="2.注意："></a>2.注意：</h3><p>默认模块中的 mutation 和 actions 会被挂载到全局，<strong>需要开启命名空间</strong>，才会挂载到子模块。</p>
<h3 id="3-调用语法："><a href="#3-调用语法：" class="headerlink" title="3.调用语法："></a>3.调用语法：</h3><ol>
<li>直接通过 store 调用   $store.dispatch(‘模块名&#x2F;xxx ‘,  额外参数)</li>
<li>通过 mapActions 映射     <ol>
<li>默认根级别的映射  mapActions([ ‘xxx’ ])     </li>
<li>子模块的映射 mapActions(‘模块名’, [‘xxx’])  -  需要开启命名空间</li>
</ol>
</li>
</ol>
<h3 id="4-代码实现-1"><a href="#4-代码实现-1" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><p>需求：</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683431615694.png" alt="68343161569"></p>
<p><code>modules/user.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = &#123;<br>  setUserSecond (context, newUserInfo) &#123;<br>    <span class="hljs-comment">// 将异步在action中进行封装</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 调用mutation   context上下文，默认提交的就是自己模块的action和mutation</span><br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setUser&#x27;</span>, newUserInfo)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Son1.vue  直接通过store调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;button @click=&quot;updateUser2&quot;&gt;一秒后更新信息&lt;/button&gt;<br><br>methods:&#123;<br>    updateUser2 () &#123;<br>      // 调用action dispatch<br>      this.$store.dispatch(&#x27;user/setUserSecond&#x27;, &#123;<br>        name: &#x27;xiaohong&#x27;,<br>        age: 28<br>      &#125;)<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>



<p>Son2.vue mapActions映射</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;button @click=<span class="hljs-string">&quot;setUserSecond(&#123; name: &#x27;xiaoli&#x27;, age: 80 &#125;)&quot;</span>&gt;一秒后更新信息&lt;/button&gt;<br><br><span class="hljs-attr">methods</span>:&#123;<br>  ...<span class="hljs-title function_">mapActions</span>(<span class="hljs-string">&#x27;user&#x27;</span>, [<span class="hljs-string">&#x27;setUserSecond&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="二十一、Vuex模块化的使用小结"><a href="#二十一、Vuex模块化的使用小结" class="headerlink" title="二十一、Vuex模块化的使用小结"></a>二十一、Vuex模块化的使用小结</h2><h3 id="1-直接使用"><a href="#1-直接使用" class="headerlink" title="1.直接使用"></a>1.直接使用</h3><ol>
<li>state –&gt; $store.state.<strong>模块名</strong>.数据项名</li>
<li>getters –&gt; $store.getters[‘<strong>模块名</strong>&#x2F;属性名’]</li>
<li>mutations –&gt; $store.commit(‘<strong>模块名</strong>&#x2F;方法名’, 其他参数)</li>
<li>actions –&gt; $store.dispatch(‘<strong>模块名</strong>&#x2F;方法名’, 其他参数)</li>
</ol>
<h3 id="2-借助辅助方法使用"><a href="#2-借助辅助方法使用" class="headerlink" title="2.借助辅助方法使用"></a>2.借助辅助方法使用</h3><p>1.import { mapXxxx, mapXxx } from ‘vuex’</p>
<p>computed、methods: {</p>
<p>​     &#x2F;&#x2F; <strong>…mapState、…mapGetters放computed中；</strong></p>
<p>​    &#x2F;&#x2F;  <strong>…mapMutations、…mapActions放methods中；</strong></p>
<p>​    …mapXxxx(<strong>‘模块名’</strong>, [‘数据项|方法’]),</p>
<p>​    …mapXxxx(<strong>‘模块名’</strong>, { 新的名字: 原来的名字 }),</p>
<p>}</p>
<p>2.组件中直接使用 属性 <code>&#123;&#123; age &#125;&#125;</code> 或 方法 <code>@click=&quot;updateAge(2)&quot;</code></p>
<h2 id="二十二、综合案例-创建项目"><a href="#二十二、综合案例-创建项目" class="headerlink" title="二十二、综合案例 - 创建项目"></a>二十二、综合案例 - 创建项目</h2><ol>
<li><p>脚手架新建项目 (注意：<strong>勾选vuex</strong>)      </p>
<p>版本说明：</p>
<p>vue2   vue-router3   vuex3               </p>
<p>vue3  vue-router4  vuex4&#x2F;pinia</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">vue create vue-cart-demo<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>将原本src内容清空，替换成教学资料的《vuex-cart-准备代码》</li>
</ol>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683432959356.png" alt="68343295935"></p>
<p>需求：</p>
<ol>
<li>发请求动态渲染购物车，数据存vuex （存cart模块， 将来还会有user模块，article模块…）</li>
<li>数字框可以修改数据</li>
<li>动态计算总价和总数量</li>
</ol>
<h2 id="二十三、综合案例-构建vuex-cart模块"><a href="#二十三、综合案例-构建vuex-cart模块" class="headerlink" title="二十三、综合案例-构建vuex-cart模块"></a>二十三、综合案例-构建vuex-cart模块</h2><ol>
<li>新建 <code>store/modules/cart.js</code></li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  state () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">list</span>: []<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>挂载到 vuex 仓库上 <code>store/cart.js</code></li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">import</span> cart <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/cart&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    cart<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure>



<h2 id="二十四、综合案例-准备后端接口服务环境-了解"><a href="#二十四、综合案例-准备后端接口服务环境-了解" class="headerlink" title="二十四、综合案例-准备后端接口服务环境(了解)"></a>二十四、综合案例-准备后端接口服务环境(了解)</h2><ol>
<li>安装全局工具 json-server （全局工具仅需要安装一次）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">yarn global add json-server 或 npm i json-server  -g<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>代码根目录新建一个 db 目录</li>
<li>将资料 index.json 移入 db 目录</li>
<li>进入 db 目录，执行命令，启动后端接口服务 (使用–watch 参数 可以实时监听 json 文件的修改)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">json-server  --watch  index.json<br></code></pre></td></tr></table></figure>



<h2 id="二十五、综合案例-请求动态渲染数据"><a href="#二十五、综合案例-请求动态渲染数据" class="headerlink" title="二十五、综合案例-请求动态渲染数据"></a>二十五、综合案例-请求动态渲染数据</h2><h3 id="1-目标-4"><a href="#1-目标-4" class="headerlink" title="1.目标"></a>1.目标</h3><p>请求获取数据存入 vuex, 映射渲染</p>
<p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683436471929.png" alt="68343647192"></p>
<ol>
<li>安装 axios</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">yarn add axios<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>准备actions 和 mutations</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  state () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">list</span>: []<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    updateList (state, payload) &#123;<br>      state.<span class="hljs-property">list</span> = payload<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-keyword">async</span> getList (ctx) &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/cart&#x27;</span>)<br>      ctx.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;updateList&#x27;</span>, res.<span class="hljs-property">data</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li><code>App.vue</code>页面中调用 action,  获取数据</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">CartHeader</span>,<br>    <span class="hljs-title class_">CartFooter</span>,<br>    <span class="hljs-title class_">CartItem</span><br>  &#125;,<br>  created () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;cart/getList&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;cart&#x27;</span>, [<span class="hljs-string">&#x27;list&#x27;</span>])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>动态渲染</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;!-- 商品 <span class="hljs-title class_">Item</span> 项组件 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">cart-item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span> <span class="hljs-attr">:item</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cart-item</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p><code>cart-item.vue</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;goods-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 左侧图片区域 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.thumb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 右侧商品区域 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 标题 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 单价 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span>￥&#123;&#123;item.price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btns&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-comment">&lt;!-- 按钮区域 --&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-light&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span>&#123;&#123;item.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-light&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;CartItem&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">item</span>: <span class="hljs-title class_">Object</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h2 id="二十六、综合案例-修改数量"><a href="#二十六、综合案例-修改数量" class="headerlink" title="二十六、综合案例-修改数量"></a>二十六、综合案例-修改数量</h2><p><img src="/2023/08/18/vue%E5%AD%A6%E4%B9%A0Day7/1683437346997.png" alt="68343734699"></p>
<ol>
<li>注册点击事件</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;!-- 按钮区域 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-light&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onBtnClick(-1)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span>&#123;&#123;item.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-light&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onBtnClick(1)&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<ol start="2">
<li>页面中dispatch action</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">onBtnClick (step) &#123;<br>  <span class="hljs-keyword">const</span> newCount = <span class="hljs-variable language_">this</span>.<span class="hljs-property">item</span>.<span class="hljs-property">count</span> + step<br>  <span class="hljs-keyword">if</span> (newCount &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span><br><br>  <span class="hljs-comment">// 发送修改数量请求</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;cart/updateCount&#x27;</span>, &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">item</span>.<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">count</span>: newCount<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>提供action函数</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">async</span> updateCount (ctx, payload) &#123;<br>  <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">patch</span>(<span class="hljs-string">&#x27;http://localhost:3000/cart/&#x27;</span> + payload.<span class="hljs-property">id</span>, &#123;<br>    <span class="hljs-attr">count</span>: payload.<span class="hljs-property">count</span><br>  &#125;)<br>  ctx.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;updateCount&#x27;</span>, payload)<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>提供mutation处理函数</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">mutations</span>: &#123;<br>  ...,<br>  updateCount (state, payload) &#123;<br>    <span class="hljs-keyword">const</span> goods = state.<span class="hljs-property">list</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> === payload.<span class="hljs-property">id</span>)<br>    goods.<span class="hljs-property">count</span> = payload.<span class="hljs-property">count</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>



<h2 id="二十七、综合案例-底部总价展示"><a href="#二十七、综合案例-底部总价展示" class="headerlink" title="二十七、综合案例-底部总价展示"></a>二十七、综合案例-底部总价展示</h2><ol>
<li>提供getters</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-title function_">total</span>(<span class="hljs-params">state</span>) &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">p, c</span>) =&gt;</span> p + c.<span class="hljs-property">count</span>, <span class="hljs-number">0</span>);<br>  &#125;,<br>  totalPrice (state) &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">p, c</span>) =&gt;</span> p + c.<span class="hljs-property">count</span> * c.<span class="hljs-property">price</span>, <span class="hljs-number">0</span>);<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>动态渲染</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 中间的合计 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>共 &#123;&#123;total&#125;&#125; 件商品，合计：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span>￥&#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 右侧结算按钮 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success btn-settle&quot;</span>&gt;</span>结算<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;CartFooter&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&#x27;cart&#x27;</span>, [<span class="hljs-string">&#x27;total&#x27;</span>, <span class="hljs-string">&#x27;totalPrice&#x27;</span>])</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day6</title>
    <url>/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/</url>
    <content><![CDATA[<h2 id="一、声明式导航-导航链接"><a href="#一、声明式导航-导航链接" class="headerlink" title="一、声明式导航-导航链接"></a>一、声明式导航-导航链接</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>实现导航高亮效果</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682492044744.png" alt="68249204474"></p>
<p>如果使用a标签进行跳转的话，需要给当前跳转的导航加样式，同时要移除上一个a标签的样式，太麻烦！！！</p>
<h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h3><p>vue-router 提供了一个全局组件 router-link (取代 a 标签)</p>
<ul>
<li><strong>能跳转</strong>，配置 to 属性指定路径(<strong>必须</strong>) 。本质还是 a 标签 ，<strong>to 无需 #</strong></li>
<li><strong>能高亮</strong>，默认就会提供<strong>高亮类名</strong>，可以直接设置高亮样式</li>
</ul>
<p>语法： <router-link to="path的值">发现音乐</router-link></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;<br>  &lt;div class=&quot;footer_wrap&quot;&gt;<br>    &lt;router-link to=&quot;/find&quot;&gt;发现音乐&lt;/router-link&gt;<br>    &lt;router-link to=&quot;/my&quot;&gt;我的音乐&lt;/router-link&gt;<br>    &lt;router-link to=&quot;/friend&quot;&gt;朋友&lt;/router-link&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;top&quot;&gt;<br>    &lt;!-- 路由出口 → 匹配的组件所展示的位置 --&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-通过router-link自带的两个样式进行高亮"><a href="#3-通过router-link自带的两个样式进行高亮" class="headerlink" title="3.通过router-link自带的两个样式进行高亮"></a>3.通过router-link自带的两个样式进行高亮</h3><p>使用router-link跳转后，我们发现。当前点击的链接默认加了两个class的值 <code>router-link-exact-active</code>和<code>router-link-active</code></p>
<p>我们可以给任意一个class属性添加高亮样式即可实现功能</p>
<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><ul>
<li>router-link是什么？</li>
<li>router-link怎么用？</li>
<li>router-link的好处是什么？</li>
</ul>
<h2 id="二、声明式导航-两个类名"><a href="#二、声明式导航-两个类名" class="headerlink" title="二、声明式导航-两个类名"></a>二、声明式导航-两个类名</h2><p>当我们使用<router-link></router-link>跳转时，自动给当前导航加了<strong>两个类名</strong></p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682493121052.png" alt="68249312105"></p>
<h3 id="1-router-link-active"><a href="#1-router-link-active" class="headerlink" title="1.router-link-active"></a>1.router-link-active</h3><p><strong>模糊匹配（用的多）</strong></p>
<p>to&#x3D;”&#x2F;my”  可以匹配 &#x2F;my    &#x2F;my&#x2F;a    &#x2F;my&#x2F;b    ….  </p>
<p>只要是以&#x2F;my开头的路径 都可以和 to&#x3D;”&#x2F;my”匹配到</p>
<h3 id="2-router-link-exact-active"><a href="#2-router-link-exact-active" class="headerlink" title="2.router-link-exact-active"></a>2.router-link-exact-active</h3><p><strong>精确匹配</strong></p>
<p>to&#x3D;”&#x2F;my” 仅可以匹配  &#x2F;my</p>
<h3 id="3-在地址栏中输入二级路由查看类名的添加"><a href="#3-在地址栏中输入二级路由查看类名的添加" class="headerlink" title="3.在地址栏中输入二级路由查看类名的添加"></a>3.在地址栏中输入二级路由查看类名的添加</h3><h3 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h3><ul>
<li>router-link 会自动给当前导航添加两个类名，有什么区别呢？</li>
</ul>
<h2 id="三、声明式导航-自定义类名（了解）"><a href="#三、声明式导航-自定义类名（了解）" class="headerlink" title="三、声明式导航-自定义类名（了解）"></a>三、声明式导航-自定义类名（了解）</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h3><p>router-link的<strong>两个高亮类名 太长了</strong>，我们希望能定制怎么办</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682493610911.png" alt="68249361091"></p>
<h3 id="2-解决方案-1"><a href="#2-解决方案-1" class="headerlink" title="2.解决方案"></a>2.解决方案</h3><p>我们可以在创建路由对象时，额外配置两个配置项即可。 <code>linkActiveClass</code>和<code>linkExactActiveClass</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [...],<br>  <span class="hljs-attr">linkActiveClass</span>: <span class="hljs-string">&quot;类名1&quot;</span>,<br>  <span class="hljs-attr">linkExactActiveClass</span>: <span class="hljs-string">&quot;类名2&quot;</span><br>&#125;)<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682493729456.png" alt="68249372945"></p>
<h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3.代码演示"></a>3.代码演示</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建了一个路由对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    ...<br>  ], <br>  <span class="hljs-attr">linkActiveClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>, <span class="hljs-comment">// 配置模糊匹配的类名</span><br>  <span class="hljs-attr">linkExactActiveClass</span>: <span class="hljs-string">&#x27;exact-active&#x27;</span> <span class="hljs-comment">// 配置精确匹配的类名</span><br>&#125;)<br></code></pre></td></tr></table></figure>



<h3 id="4-总结-2"><a href="#4-总结-2" class="headerlink" title="4.总结"></a>4.总结</h3><p>如何自定义router-link的两个<strong>高亮类名</strong></p>
<h2 id="四、声明式导航-查询参数传参"><a href="#四、声明式导航-查询参数传参" class="headerlink" title="四、声明式导航-查询参数传参"></a>四、声明式导航-查询参数传参</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><p>在跳转路由时，进行传参</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682494423923.png" alt="68249442392"></p>
<p>比如：现在我们在搜索页点击了热门搜索链接，跳转到详情页，<strong>需要把点击的内容带到详情页</strong>，改怎么办呢？</p>
<h3 id="2-跳转传参"><a href="#2-跳转传参" class="headerlink" title="2.跳转传参"></a>2.跳转传参</h3><p>我们可以通过两种方式，在跳转的时候把所需要的参数传到其他页面中</p>
<ul>
<li>查询参数传参</li>
<li>动态路由传参</li>
</ul>
<h3 id="3-查询参数传参"><a href="#3-查询参数传参" class="headerlink" title="3.查询参数传参"></a>3.查询参数传参</h3><ul>
<li><p>如何传参？</p>
<p><router-link to="/path?参数名=值"></router-link></p>
</li>
<li><p>如何接受参数</p>
<p>固定用法：$router.query.参数名</p>
</li>
</ul>
<h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;div class=&quot;link&quot;&gt;<br>      &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;<br>      &lt;router-link to=&quot;/search&quot;&gt;搜索页&lt;/router-link&gt;<br>    &lt;/div&gt;<br><br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.link &#123;<br>  height: 50px;<br>  line-height: 50px;<br>  background-color: #495150;<br>  display: flex;<br>  margin: -8px -8px 0 -8px;<br>  margin-bottom: 50px;<br>&#125;<br>.link a &#123;<br>  display: block;<br>  text-decoration: none;<br>  background-color: #ad2a26;<br>  width: 100px;<br>  text-align: center;<br>  margin-right: 5px;<br>  color: #fff;<br>  border-radius: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home&quot;&gt;<br>    &lt;div class=&quot;logo-box&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;search-box&quot;&gt;<br>      &lt;input type=&quot;text&quot;&gt;<br>      &lt;button&gt;搜索一下&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;div class=&quot;hot-link&quot;&gt;<br>      热门搜索：<br>      &lt;router-link to=&quot;&quot;&gt;黑马程序员&lt;/router-link&gt;<br>      &lt;router-link to=&quot;&quot;&gt;前端培训&lt;/router-link&gt;<br>      &lt;router-link to=&quot;&quot;&gt;如何成为前端大牛&lt;/router-link&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;FindMusic&#x27;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.logo-box &#123;<br>  height: 150px;<br>  background: url(&#x27;@/assets/logo.jpeg&#x27;) no-repeat center;<br>&#125;<br>.search-box &#123;<br>  display: flex;<br>  justify-content: center;<br>&#125;<br>.search-box input &#123;<br>  width: 400px;<br>  height: 30px;<br>  line-height: 30px;<br>  border: 2px solid #c4c7ce;<br>  border-radius: 4px 0 0 4px;<br>  outline: none;<br>&#125;<br>.search-box input:focus &#123;<br>  border: 2px solid #ad2a26;<br>&#125;<br>.search-box button &#123;<br>  width: 100px;<br>  height: 36px;<br>  border: none;<br>  background-color: #ad2a26;<br>  color: #fff;<br>  position: relative;<br>  left: -2px;<br>  border-radius: 0 4px 4px 0;<br>&#125;<br>.hot-link &#123;<br>  width: 508px;<br>  height: 60px;<br>  line-height: 60px;<br>  margin: 0 auto;<br>&#125;<br>.hot-link a &#123;<br>  margin: 0 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>Search.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;search&quot;&gt;<br>    &lt;p&gt;搜索关键字: 黑马程序员&lt;/p&gt;<br>    &lt;p&gt;搜索结果: &lt;/p&gt;<br>    &lt;ul&gt;<br>      &lt;li&gt;.............&lt;/li&gt;<br>      &lt;li&gt;.............&lt;/li&gt;<br>      &lt;li&gt;.............&lt;/li&gt;<br>      &lt;li&gt;.............&lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;MyFriend&#x27;,<br>  created () &#123;<br>    // 在created中，获取路由参数<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.search &#123;<br>  width: 400px;<br>  height: 240px;<br>  padding: 0 20px;<br>  margin: 0 auto;<br>  border: 2px solid #c4c7ce;<br>  border-radius: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>router&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Search&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>) <span class="hljs-comment">// VueRouter插件初始化</span><br><br><span class="hljs-comment">// 创建了一个路由对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Search</span> &#125;<br>  ]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">...<br>import router from &#x27;./router/index&#x27;<br>...<br>new Vue(&#123;<br>  render: h =&gt; h(App),<br>  router<br>&#125;).$mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure>



<h2 id="五、声明式导航-动态路由传参"><a href="#五、声明式导航-动态路由传参" class="headerlink" title="五、声明式导航-动态路由传参"></a>五、声明式导航-动态路由传参</h2><h3 id="1-动态路由传参方式"><a href="#1-动态路由传参方式" class="headerlink" title="1.动态路由传参方式"></a>1.动态路由传参方式</h3><ul>
<li><p>配置动态路由</p>
<blockquote>
<p>动态路由后面的参数可以随便起名，但要有语义</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    ...,<br>    &#123; <br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search/:words&#x27;</span>, <br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Search</span> <br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>配置导航链接</p>
<p>to&#x3D;”&#x2F;path&#x2F;参数值”</p>
</li>
<li><p>对应页面组件<strong>接受参数</strong></p>
<p>$route.<strong>params</strong>.参数名</p>
<blockquote>
<p>params后面的参数名要和动态路由配置的参数保持一致</p>
</blockquote>
</li>
</ul>
<h3 id="2-查询参数传参-VS-动态路由传参"><a href="#2-查询参数传参-VS-动态路由传参" class="headerlink" title="2.查询参数传参 VS 动态路由传参"></a>2.查询参数传参 VS 动态路由传参</h3><ol>
<li><p>查询参数传参  (比较适合传<strong>多个参数</strong>) </p>
<ol>
<li>跳转：to&#x3D;”&#x2F;path?参数名&#x3D;值&amp;参数名2&#x3D;值”</li>
<li>获取：$route.query.参数名</li>
</ol>
</li>
<li><p>动态路由传参 (<strong>优雅简洁</strong>，传单个参数比较方便)</p>
<ol>
<li>配置动态路由：path: “&#x2F;path&#x2F;:参数名” </li>
<li>跳转：to&#x3D;”&#x2F;path&#x2F;参数值”</li>
<li>获取：$route.params.参数名</li>
</ol>
<p>注意：动态路由也可以传多个参数，但一般只传一个</p>
</li>
</ol>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>声明式导航跳转时, 有几种方式传值给路由页面？</p>
<ul>
<li>查询参数传参（多个参数）</li>
<li>动态路由传参（一个参数，优雅简洁）</li>
</ul>
<h2 id="六、动态路由参数的可选符-了解"><a href="#六、动态路由参数的可选符-了解" class="headerlink" title="六、动态路由参数的可选符(了解)"></a>六、动态路由参数的可选符(了解)</h2><h3 id="1-问题-1"><a href="#1-问题-1" class="headerlink" title="1.问题"></a>1.问题</h3><p>配了路由 path:”&#x2F;search&#x2F;:words”  为什么按下面步骤操作，会未匹配到组件，显示空白？</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682497238305.png" alt="68249723830"></p>
<h3 id="2-原因"><a href="#2-原因" class="headerlink" title="2.原因"></a>2.原因</h3><p>&#x2F;search&#x2F;:words  表示，<strong>必须要传参数</strong>。如果不传参数，也希望匹配，可以加个可选符”？”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br> 	...<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search/:words?&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Search</span> &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="七、Vue路由-重定向"><a href="#七、Vue路由-重定向" class="headerlink" title="七、Vue路由-重定向"></a>七、Vue路由-重定向</h2><h3 id="1-问题-2"><a href="#1-问题-2" class="headerlink" title="1.问题"></a>1.问题</h3><p>网页打开时， url 默认是 &#x2F; 路径，未匹配到组件时，会出现空白</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682497872821.png" alt="68249787282"></p>
<h3 id="2-解决方案-2"><a href="#2-解决方案-2" class="headerlink" title="2.解决方案"></a>2.解决方案</h3><p><strong>重定向</strong> → 匹配 &#x2F; 后, 强制跳转 &#x2F;home 路径</p>
<h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">path</span>: 匹配路径, <span class="hljs-attr">redirect</span>: 重定向到的路径 &#125;,<br>比如：<br>&#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span> ,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/home&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>



<h3 id="4-代码演示-1"><a href="#4-代码演示-1" class="headerlink" title="4.代码演示"></a>4.代码演示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">const router = new VueRouter(&#123;<br>  routes: [<br>    &#123; path: &#x27;/&#x27;, redirect: &#x27;/home&#x27;&#125;,<br> 	 ...<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="八、Vue路由-404"><a href="#八、Vue路由-404" class="headerlink" title="八、Vue路由-404"></a>八、Vue路由-404</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><p>当路径找不到匹配时，给个提示页面</p>
<h3 id="2-位置"><a href="#2-位置" class="headerlink" title="2.位置"></a>2.位置</h3><p>404的路由，虽然配置在任何一个位置都可以，但一般都<strong>配置在其他路由规则的最后面</strong></p>
<h3 id="3-语法-1"><a href="#3-语法-1" class="headerlink" title="3.语法"></a>3.语法</h3><p>path: “*”   (任意路径) – 前面不匹配就命中最后这个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">NotFind</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/NotFind&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    ...<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">NotFind</span> &#125; <span class="hljs-comment">//最后一个</span><br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4.代码示例"></a>4.代码示例</h3><p>NotFound.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;404 Not Found&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>router&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NotFound</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/NotFound&#x27;</span><br>...<br><br><span class="hljs-comment">// 创建了一个路由对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>     ...<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">NotFound</span> &#125;<br>  ]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure>



<h2 id="九、Vue路由-模式设置"><a href="#九、Vue路由-模式设置" class="headerlink" title="九、Vue路由-模式设置"></a>九、Vue路由-模式设置</h2><h3 id="1-问题-3"><a href="#1-问题-3" class="headerlink" title="1.问题"></a>1.问题</h3><p>路由的路径看起来不自然, 有#，能否切成真正路径形式?</p>
<ul>
<li>hash路由(默认)        例如:  <a href="http://localhost:8080/#/home">http://localhost:8080/#/home</a></li>
<li>history路由(常用)     例如: <a href="http://localhost:8080/home">http://localhost:8080/home</a>   (以后上线需要服务器端支持，开发环境webpack给规避掉了history模式的问题)</li>
</ul>
<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">mode</span>:<span class="hljs-string">&#x27;histroy&#x27;</span>, <span class="hljs-comment">//默认是hash</span><br>    <span class="hljs-attr">routes</span>:[]<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="十、编程式导航-两种路由跳转方式"><a href="#十、编程式导航-两种路由跳转方式" class="headerlink" title="十、编程式导航-两种路由跳转方式"></a>十、编程式导航-两种路由跳转方式</h2><h3 id="1-问题-4"><a href="#1-问题-4" class="headerlink" title="1.问题"></a>1.问题</h3><p>点击按钮跳转如何实现？</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682500481059.png" alt="68250048105"></p>
<h3 id="2-方案"><a href="#2-方案" class="headerlink" title="2.方案"></a>2.方案</h3><p>编程式导航：用JS代码来进行跳转</p>
<h3 id="3-语法-2"><a href="#3-语法-2" class="headerlink" title="3.语法"></a>3.语法</h3><p>两种语法：</p>
<ul>
<li>path 路径跳转 （简易方便）</li>
<li>name 命名路由跳转 (适合 path 路径长的场景)</li>
</ul>
<h3 id="4-path路径跳转语法"><a href="#4-path路径跳转语法" class="headerlink" title="4.path路径跳转语法"></a>4.path路径跳转语法</h3><p>特点：简易方便</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//简单写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;路由路径&#x27;</span>)<br><br><span class="hljs-comment">//完整写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;路由路径&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="5-代码演示-path跳转方式"><a href="#5-代码演示-path跳转方式" class="headerlink" title="5.代码演示 path跳转方式"></a>5.代码演示 path跳转方式</h3><h3 id="6-name命名路由跳转"><a href="#6-name命名路由跳转" class="headerlink" title="6.name命名路由跳转"></a>6.name命名路由跳转</h3><p>特点：适合 path 路径长的场景</p>
<p>语法：</p>
<ul>
<li><p>路由规则，必须配置name配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名&#x27;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/path/xxx&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-variable constant_">XXX</span> &#125;,<br></code></pre></td></tr></table></figure>
</li>
<li><p>通过name来进行跳转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-代码演示通过name命名路由跳转"><a href="#7-代码演示通过name命名路由跳转" class="headerlink" title="7.代码演示通过name命名路由跳转"></a>7.代码演示通过name命名路由跳转</h3><h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h3><p>编程式导航有几种跳转方式？</p>
<h2 id="十一、编程式导航-path路径跳转传参"><a href="#十一、编程式导航-path路径跳转传参" class="headerlink" title="十一、编程式导航-path路径跳转传参"></a>十一、编程式导航-path路径跳转传参</h2><h3 id="1-问题-5"><a href="#1-问题-5" class="headerlink" title="1.问题"></a>1.问题</h3><p>点击搜索按钮，跳转需要把文本框中输入的内容传到下一个页面如何实现？</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682502720585.png" alt="68250272058"></p>
<h3 id="2-两种传参方式"><a href="#2-两种传参方式" class="headerlink" title="2.两种传参方式"></a>2.两种传参方式</h3><p>1.查询参数 </p>
<p>2.动态路由传参</p>
<h3 id="3-传参"><a href="#3-传参" class="headerlink" title="3.传参"></a>3.传参</h3><p>两种跳转方式，对于两种传参方式都支持：</p>
<p>① path 路径跳转传参</p>
<p>② name 命名路由跳转传参</p>
<h3 id="4-path路径跳转传参（query传参）"><a href="#4-path路径跳转传参（query传参）" class="headerlink" title="4.path路径跳转传参（query传参）"></a>4.path路径跳转传参（query传参）</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//简单写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/路径?参数名1=参数值1&amp;参数2=参数值2&#x27;</span>)<br><span class="hljs-comment">//完整写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/路径&#x27;</span>,<br>  <span class="hljs-attr">query</span>: &#123;<br>    参数名<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;参数值1&#x27;</span>,<br>    参数名<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;参数值2&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>接受参数的方式依然是：$route.query.参数名</p>
<h3 id="5-path路径跳转传参（动态路由传参）"><a href="#5-path路径跳转传参（动态路由传参）" class="headerlink" title="5.path路径跳转传参（动态路由传参）"></a>5.path路径跳转传参（动态路由传参）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//简单写法<br>this.$router.push(&#x27;/路径/参数值&#x27;)<br>//完整写法<br>this.$router.push(&#123;<br>  path: &#x27;/路径/参数值&#x27;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>接受参数的方式依然是：$route.params.参数值</p>
<p><strong>注意：</strong>path不能配合params使用</p>
<h2 id="十二、编程式导航-name命名路由传参"><a href="#十二、编程式导航-name命名路由传参" class="headerlink" title="十二、编程式导航-name命名路由传参"></a>十二、编程式导航-name命名路由传参</h2><h3 id="1-name-命名路由跳转传参-query传参"><a href="#1-name-命名路由跳转传参-query传参" class="headerlink" title="1.name 命名路由跳转传参 (query传参)"></a>1.name 命名路由跳转传参 (query传参)</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名字&#x27;</span>,<br>  <span class="hljs-attr">query</span>: &#123;<br>    参数名<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;参数值1&#x27;</span>,<br>    参数名<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;参数值2&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="2-name-命名路由跳转传参-动态路由传参"><a href="#2-name-命名路由跳转传参-动态路由传参" class="headerlink" title="2.name 命名路由跳转传参 (动态路由传参)"></a>2.name 命名路由跳转传参 (动态路由传参)</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名字&#x27;</span>,<br>  <span class="hljs-attr">params</span>: &#123;<br>    参数名: <span class="hljs-string">&#x27;参数值&#x27;</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="3-总结-1"><a href="#3-总结-1" class="headerlink" title="3.总结"></a>3.总结</h3><p>编程式导航，如何跳转传参？</p>
<p>1.path路径跳转</p>
<ul>
<li><p>query传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/路径?参数名1=参数值1&amp;参数2=参数值2&#x27;</span>)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/路径&#x27;</span>,<br>  <span class="hljs-attr">query</span>: &#123;<br>    参数名<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;参数值1&#x27;</span>,<br>    参数名<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;参数值2&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>动态路由传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/路径/参数值&#x27;</span>)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/路径/参数值&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li>
</ul>
<p>2.name命名路由跳转</p>
<ul>
<li><p>query传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名字&#x27;</span>,<br>  <span class="hljs-attr">query</span>: &#123;<br>    参数名<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;参数值1&#x27;</span>,<br>    参数名<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;参数值2&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>动态路由传参 (需要配动态路由)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路由名字&#x27;</span>,<br>  <span class="hljs-attr">params</span>: &#123;<br>    参数名: <span class="hljs-string">&#x27;参数值&#x27;</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="十三、面经基础版-案例效果分析"><a href="#十三、面经基础版-案例效果分析" class="headerlink" title="十三、面经基础版-案例效果分析"></a>十三、面经基础版-案例效果分析</h2><h3 id="1-面经效果演示"><a href="#1-面经效果演示" class="headerlink" title="1.面经效果演示"></a>1.面经效果演示</h3><h3 id="2-功能分析"><a href="#2-功能分析" class="headerlink" title="2.功能分析"></a>2.功能分析</h3><ul>
<li>通过演示效果发现，主要的功能页面有两个，一个是<strong>列表页</strong>，一个是<strong>详情页</strong>，并且在列表页点击时可以跳转到详情页</li>
<li>底部导航可以来回切换，并且切换时，只有上面的主题内容在动态渲染</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682559784643.png" alt="68255978464"></p>
<h3 id="3-实现思路分析：配置路由-功能实现"><a href="#3-实现思路分析：配置路由-功能实现" class="headerlink" title="3.实现思路分析：配置路由+功能实现"></a>3.实现思路分析：配置路由+功能实现</h3><p>1.配置路由</p>
<ul>
<li>首页和面经详情页，两个一级路由</li>
<li>首页内嵌套4个可切换的页面（嵌套二级路由）</li>
</ul>
<p>2.实现功能</p>
<ul>
<li>首页请求渲染</li>
<li><strong>跳转传参</strong> 到 详情页，详情页动态渲染</li>
<li>组件缓存，性能优化</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682560255356.png" alt="68256025535"></p>
<h2 id="十四、面经基础版-一级路由配置"><a href="#十四、面经基础版-一级路由配置" class="headerlink" title="十四、面经基础版-一级路由配置"></a>十四、面经基础版-一级路由配置</h2><p>1.把文档中准备的素材拷贝到项目中</p>
<p>2.针对router&#x2F;index.js文件 进行一级路由配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Layout.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ArticleDetail</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/ArticleDetail.vue&#x27;</span><br>...<br><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/detail&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">ArticleDetail</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>



<h2 id="十五、面经基础版-二级路由配置"><a href="#十五、面经基础版-二级路由配置" class="headerlink" title="十五、面经基础版-二级路由配置"></a>十五、面经基础版-二级路由配置</h2><p>二级路由也叫嵌套路由，当然也可以嵌套三级、四级…</p>
<h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h3><p>当在页面中点击链接跳转，只是部分内容切换时，我们可以使用嵌套路由</p>
<h3 id="2-语法-1"><a href="#2-语法-1" class="headerlink" title="2.语法"></a>2.语法</h3><ul>
<li>在一级路由下，配置children属性即可</li>
<li>配置二级路由的出口</li>
</ul>
<p> 1.在一级路由下，配置children属性</p>
<p> <strong>注意</strong>:一级的路由path 需要加 <code>/</code>   二级路由的path不需要加 <code>/</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>      <span class="hljs-attr">children</span>:[<br>        <span class="hljs-comment">//children中的配置项 跟一级路由中的配置项一模一样 </span><br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-attr">component</span>:xxxx.<span class="hljs-property">vue</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-attr">component</span>:xxxx.<span class="hljs-property">vue</span>&#125;,<br>      ]<br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>技巧：二级路由应该配置到哪个一级路由下呢？</p>
<p><strong>这些二级路由对应的组件渲染到哪个一级路由下，children就配置到哪个路由下边</strong></p>
<p>2.配置二级路由的出口 <router-view></router-view></p>
<p><strong>注意：</strong> 配置了嵌套路由，一定配置对应的路由出口，否则不会渲染出对应的组件</p>
<p>Layout.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;h5-wrapper&quot;&gt;<br>    &lt;div class=&quot;content&quot;&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/div&gt;<br>  ....<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><p>router&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Article</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Article.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Collect</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Collect.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Like</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Like.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/User.vue&#x27;</span><br>...<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>      <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/article&#x27;</span>,<br>      <span class="hljs-attr">children</span>:[<br>        &#123;<br>          <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/article&#x27;</span>,<br>          <span class="hljs-attr">component</span>:<span class="hljs-title class_">Article</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/collect&#x27;</span>,<br>          <span class="hljs-attr">component</span>:<span class="hljs-title class_">Collect</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/like&#x27;</span>,<br>          <span class="hljs-attr">component</span>:<span class="hljs-title class_">Like</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>,<br>          <span class="hljs-attr">component</span>:<span class="hljs-title class_">User</span><br>        &#125;<br>      ]<br>    &#125;,<br>    ....<br>  ]<br>&#125;)<br><br></code></pre></td></tr></table></figure>

<p>Layout.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;h5-wrapper&quot;&gt;<br>    &lt;div class=&quot;content&quot;&gt;<br>      &lt;!-- 内容部分 --&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/div&gt;<br>    &lt;nav class=&quot;tabbar&quot;&gt;<br>      &lt;a href=&quot;#/article&quot;&gt;面经&lt;/a&gt;<br>      &lt;a href=&quot;#/collect&quot;&gt;收藏&lt;/a&gt;<br>      &lt;a href=&quot;#/like&quot;&gt;喜欢&lt;/a&gt;<br>      &lt;a href=&quot;#/user&quot;&gt;我的&lt;/a&gt;<br>    &lt;/nav&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十六、面经基础版-二级导航高亮"><a href="#十六、面经基础版-二级导航高亮" class="headerlink" title="十六、面经基础版-二级导航高亮"></a>十六、面经基础版-二级导航高亮</h2><h3 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1.实现思路"></a>1.实现思路</h3><ul>
<li>将a标签替换成 <router-link></router-link>组件，配置to属性，不用加 #</li>
<li>结合高亮类名实现高亮效果 (推荐模糊匹配：router-link-active)</li>
</ul>
<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>Layout.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">....<br>    &lt;nav class=&quot;tabbar&quot;&gt;<br>      &lt;router-link to=&quot;/article&quot;&gt;面经&lt;/router-link&gt;<br>      &lt;router-link to=&quot;/collect&quot;&gt;收藏&lt;/router-link&gt;<br>      &lt;router-link to=&quot;/like&quot;&gt;喜欢&lt;/router-link&gt;<br>      &lt;router-link to=&quot;/user&quot;&gt;我的&lt;/router-link&gt;<br>    &lt;/nav&gt;<br><br>&lt;style&gt;<br>   a.router-link-active &#123;<br>      color: orange;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十七、面经基础版-首页请求渲染"><a href="#十七、面经基础版-首页请求渲染" class="headerlink" title="十七、面经基础版-首页请求渲染"></a>十七、面经基础版-首页请求渲染</h2><h3 id="1-步骤分析"><a href="#1-步骤分析" class="headerlink" title="1.步骤分析"></a>1.步骤分析</h3><p>1.安装axios </p>
<p>2.看接口文档，确认请求方式，请求地址，请求参数</p>
<p>3.created中发送请求，获取数据，存储到data中</p>
<p>4.页面动态渲染</p>
<h3 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>1.安装axios</p>
<p><code>yarn add axios </code>  <code>npm i axios</code></p>
<p>2.接口文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">请求地址: https://mock.boxuegu.com/mock/3083/articles<br>请求方式: get<br></code></pre></td></tr></table></figure>

<p>3.created中发送请求，获取数据，存储到data中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">data() &#123;<br>   return &#123;<br>     articelList: [],<br>   &#125;<br> &#125;,<br> async created() &#123;<br>   const &#123;  data: &#123; result: &#123; rows &#125; &#125;&#125; = await axios.get(&#x27;https://mock.boxuegu.com/mock/3083/articles&#x27;)<br>   this.articelList = rows<br> &#125;,<br></code></pre></td></tr></table></figure>

<p>4.页面动态渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;article-page&quot;&gt;<br>    &lt;div class=&quot;article-item&quot; v-for=&quot;item in articelList&quot; :key=&quot;item.id&quot;&gt;<br>      &lt;div class=&quot;head&quot;&gt;<br>        &lt;img :src=&quot;item.creatorAvatar&quot; alt=&quot;&quot; /&gt;<br>        &lt;div class=&quot;con&quot;&gt;<br>          &lt;p class=&quot;title&quot;&gt;&#123;&#123; item.stem &#125;&#125;&lt;/p&gt;<br>          &lt;p class=&quot;other&quot;&gt;&#123;&#123; item.creatorName &#125;&#125; | &#123;&#123; item.createdAt &#125;&#125;&lt;/p&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;body&quot;&gt;<br>        &#123;&#123;item.content&#125;&#125;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;foot&quot;&gt;点赞 &#123;&#123;item.likeCount&#125;&#125; | 浏览 &#123;&#123;item.views&#125;&#125;&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<h2 id="十八、面经基础版-查询参数传参"><a href="#十八、面经基础版-查询参数传参" class="headerlink" title="十八、面经基础版-查询参数传参"></a>十八、面经基础版-查询参数传参</h2><h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1.说明"></a>1.说明</h3><p>跳转详情页需要把当前点击的文章id传给详情页，获取数据</p>
<ul>
<li>查询参数传参  this.$router.push(‘&#x2F;detail?参数1&#x3D;参数值&amp;参数2&#x3D;参数值’) </li>
<li>动态路由传参  先改造路由 在传参  this.$router.push(‘&#x2F;detail&#x2F;参数值’)</li>
</ul>
<h3 id="2-查询参数传参实现"><a href="#2-查询参数传参实现" class="headerlink" title="2.查询参数传参实现"></a>2.查询参数传参实现</h3><p>Article.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;article-page&quot;&gt;<br>    &lt;div class=&quot;article-item&quot; <br>      v-for=&quot;item in articelList&quot; :key=&quot;item.id&quot; <br>      @click=&quot;$router.push(`/detail?id=$&#123;item.id&#125;`)&quot;&gt;<br>     ...<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p>ArticleDetail.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created()&#123;<br>  console.log(this.$route.query.id)<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="十九、面经基础版-动态路由传参"><a href="#十九、面经基础版-动态路由传参" class="headerlink" title="十九、面经基础版-动态路由传参"></a>十九、面经基础版-动态路由传参</h2><h3 id="1-实现步骤"><a href="#1-实现步骤" class="headerlink" title="1.实现步骤"></a>1.实现步骤</h3><ul>
<li>改造路由</li>
<li>动态传参</li>
<li>在详情页获取参数</li>
</ul>
<h3 id="2-代码实现-2"><a href="#2-代码实现-2" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>改造路由</p>
<p>router&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">...<br>  &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/detail/:id&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">ArticleDetail</span><br>  &#125;<br></code></pre></td></tr></table></figure>

<p>Article.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;article-item&quot; <br>     v-for=&quot;item in articelList&quot; :key=&quot;item.id&quot; <br>     @click=&quot;$router.push(`/detail/$&#123;item.id&#125;`)&quot;&gt;<br>       ....<br> &lt;/div&gt;<br></code></pre></td></tr></table></figure>

<p>ArticleDetail.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created()&#123;<br>  console.log(this.$route.params.id)<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="3-额外优化功能点-点击回退跳转到上一页"><a href="#3-额外优化功能点-点击回退跳转到上一页" class="headerlink" title="3.额外优化功能点-点击回退跳转到上一页"></a>3.额外优化功能点-点击回退跳转到上一页</h3><p>ArticleDetail.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;article-detail-page&quot;&gt;<br>    &lt;nav class=&quot;nav&quot;&gt;&lt;span class=&quot;back&quot; @click=&quot;$router.back()&quot;&gt;&amp;lt;&lt;/span&gt; 面经详情&lt;/nav&gt;<br>     ....<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<h2 id="二十、面经基础版-详情页渲染"><a href="#二十、面经基础版-详情页渲染" class="headerlink" title="二十、面经基础版-详情页渲染"></a>二十、面经基础版-详情页渲染</h2><h3 id="1-实现步骤分析"><a href="#1-实现步骤分析" class="headerlink" title="1.实现步骤分析"></a>1.实现步骤分析</h3><ul>
<li>导入axios</li>
<li>查看接口文档</li>
<li>在created中发送请求</li>
<li>页面动态渲染</li>
</ul>
<h3 id="2-代码实现-3"><a href="#2-代码实现-3" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>接口文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">请求地址: https://mock.boxuegu.com/mock/3083/articles/:id<br>请求方式: get<br></code></pre></td></tr></table></figure>



<p>在created中发送请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">data() &#123;<br>   return &#123;<br>     articleDetail:&#123;&#125;<br>   &#125;<br> &#125;,<br> async created() &#123;<br>   const id = this.$route.params.id<br>   const &#123;data:&#123;result&#125;&#125; = await axios.get(<br>     `https://mock.boxuegu.com/mock/3083/articles/$&#123;id&#125;`<br>   )<br>   this.articleDetail = result<br> &#125;,<br></code></pre></td></tr></table></figure>



<p>页面动态渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;article-detail-page&quot;&gt;<br>    &lt;nav class=&quot;nav&quot;&gt;<br>      &lt;span class=&quot;back&quot; @click=&quot;$router.back()&quot;&gt;&amp;lt;&lt;/span&gt; 面经详情<br>    &lt;/nav&gt;<br>    &lt;header class=&quot;header&quot;&gt;<br>      &lt;h1&gt;&#123;&#123;articleDetail.stem&#125;&#125;&lt;/h1&gt;<br>      &lt;p&gt;&#123;&#123;articleDetail.createAt&#125;&#125; | &#123;&#123;articleDetail.views&#125;&#125; 浏览量 | &#123;&#123;articleDetail.likeCount&#125;&#125; 点赞数&lt;/p&gt;<br>      &lt;p&gt;<br>        &lt;img<br>          :src=&quot;articleDetail.creatorAvatar&quot;<br>          alt=&quot;&quot;<br>        /&gt;<br>        &lt;span&gt;&#123;&#123;articleDetail.creatorName&#125;&#125;&lt;/span&gt;<br>      &lt;/p&gt;<br>    &lt;/header&gt;<br>    &lt;main class=&quot;body&quot;&gt;<br>      &#123;&#123;articleDetail.content&#125;&#125;<br>    &lt;/main&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure>



<h2 id="二十一、面经基础版-缓存组件"><a href="#二十一、面经基础版-缓存组件" class="headerlink" title="二十一、面经基础版-缓存组件"></a>二十一、面经基础版-缓存组件</h2><h3 id="1-问题-6"><a href="#1-问题-6" class="headerlink" title="1.问题"></a>1.问题</h3><p>从面经列表 点到 详情页，又点返回，数据重新加载了 →  <strong>希望回到原来的位置</strong></p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682578630060.png" alt="68257863006"></p>
<h3 id="2-原因-1"><a href="#2-原因-1" class="headerlink" title="2.原因"></a>2.原因</h3><p>当路由被<strong>跳转</strong>后，原来所看到的组件就<strong>被销毁</strong>了（会执行组件内的beforeDestroy和destroyed生命周期钩子），<strong>重新返回</strong>后组件又被<strong>重新创建</strong>了（会执行组件内的beforeCreate,created,beforeMount,Mounted生命周期钩子），<strong>所以数据被加载了</strong></p>
<h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h3><p>利用keep-alive把原来的组件给缓存下来</p>
<h3 id="4-什么是keep-alive"><a href="#4-什么是keep-alive" class="headerlink" title="4.什么是keep-alive"></a>4.什么是keep-alive</h3><p>keep-alive 是 Vue 的内置组件，当它包裹动态组件时，<strong>会缓存不活动的组件实例，而不是销毁</strong>它们。</p>
<p>keep-alive 是一个抽象组件：它自身不会渲染成一个 DOM 元素，也不会出现在父组件中。</p>
<p><strong>优点：</strong></p>
<p>在组件切换过程中把切换出去的组件保留在内存中，防止重复渲染DOM，</p>
<p>减少加载时间及性能消耗，提高用户体验性。</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;h5-wrapper&quot;&gt;<br>    &lt;keep-alive&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/keep-alive&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<p><strong>问题：</strong></p>
<p>缓存了所有被切换的组件</p>
<h3 id="5-keep-alive的三个属性"><a href="#5-keep-alive的三个属性" class="headerlink" title="5.keep-alive的三个属性"></a>5.keep-alive的三个属性</h3><p>① include  ： 组件名数组，只有匹配的组件<strong>会被缓存</strong></p>
<p>② exclude ： 组件名数组，任何匹配的组件都<strong>不会被缓存</strong></p>
<p>③ max       ： 最多可以<strong>缓存多少</strong>组件实例</p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;h5-wrapper&quot;&gt;<br>    &lt;keep-alive :include=&quot;[&#x27;LayoutPage&#x27;]&quot;&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/keep-alive&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<h3 id="6-额外的两个生命周期钩子"><a href="#6-额外的两个生命周期钩子" class="headerlink" title="6.额外的两个生命周期钩子"></a>6.额外的两个生命周期钩子</h3><p><strong>keep-alive的使用会触发两个生命周期函数</strong></p>
<p><strong>activated</strong> 当组件被激活（使用）的时候触发 →  进入这个页面的时候触发</p>
<p><strong>deactivated</strong> 当组件不被使用的时候触发      →  离开这个页面的时候触发</p>
<p>组件<strong>缓存后</strong>就<strong>不会执行</strong>组件的<strong>created, mounted, destroyed</strong> 等钩子了</p>
<p>所以其提供了<strong>actived 和deactived</strong>钩子，帮我们实现业务需求。</p>
<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><p>1.keep-alive是什么</p>
<p>2.keep-alive的优点</p>
<p>3.keep-alive的三个属性 (了解)</p>
<p>4.keep-alive的使用会触发两个生命周期函数(了解)</p>
<h2 id="二十二、VueCli-自定义创建项目"><a href="#二十二、VueCli-自定义创建项目" class="headerlink" title="二十二、VueCli 自定义创建项目"></a>二十二、VueCli 自定义创建项目</h2><p>1.安装脚手架 (已安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm i @vue/cli -g<br></code></pre></td></tr></table></figure>

<p>2.创建项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">vue create hm-exp-mobile<br></code></pre></td></tr></table></figure>

<ul>
<li>选项</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span> <span class="hljs-variable constant_">CLI</span> v5<span class="hljs-number">.0</span><span class="hljs-number">.8</span><br>? <span class="hljs-title class_">Please</span> pick a <span class="hljs-attr">preset</span>:<br>  <span class="hljs-title class_">Default</span> ([<span class="hljs-title class_">Vue</span> <span class="hljs-number">3</span>] babel, eslint)<br>  <span class="hljs-title class_">Default</span> ([<span class="hljs-title class_">Vue</span> <span class="hljs-number">2</span>] babel, eslint)<br>&gt; <span class="hljs-title class_">Manually</span> select features     选自定义<br></code></pre></td></tr></table></figure>

<ul>
<li>手动选择功能</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941856172.png" alt="68294185617"></p>
<ul>
<li>选择vue的版本</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">  <span class="hljs-number">3.</span>x<br>&gt; <span class="hljs-number">2.</span>x<br></code></pre></td></tr></table></figure>

<ul>
<li>是否使用history模式</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941888453.png" alt="image-20201025150602129"></p>
<ul>
<li>选择css预处理</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941900018.png" alt="image-20220629175133593"></p>
<ul>
<li>选择eslint的风格 （eslint 代码规范的检验工具，检验代码是否符合规范）</li>
<li>比如：const age &#x3D; 18;   &#x3D;&gt;  报错！多加了分号！后面有工具，一保存，全部格式化成最规范的样子</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941918562.png" alt="68294191856"></p>
<ul>
<li>选择校验的时机 （直接回车）</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941935794.png" alt="68294193579"></p>
<ul>
<li>选择配置文件的生成方式 （直接回车）</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941947985.png" alt="68294194798"></p>
<ul>
<li>是否保存预设，下次直接使用？  &#x3D;&gt;   不保存，输入 N</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941961551.png" alt="68294196155"></p>
<ul>
<li>等待安装，项目初始化完成</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682941974763.png" alt="68294197476"></p>
<ul>
<li>启动项目</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm run serve<br></code></pre></td></tr></table></figure>



<h2 id="二十三、ESlint代码规范及手动修复"><a href="#二十三、ESlint代码规范及手动修复" class="headerlink" title="二十三、ESlint代码规范及手动修复"></a>二十三、ESlint代码规范及手动修复</h2><p>代码规范：一套写代码的约定规则。例如：赋值符号的左右是否需要空格？一句结束是否是要加;？… </p>
<blockquote>
<p> 没有规矩不成方圆  </p>
</blockquote>
<p>ESLint:是一个代码检查工具，用来检查你的代码是否符合指定的规则(你和你的团队可以自行约定一套规则)。在创建项目时，我们使用的是 <a href="https://standardjs.com/readme-zhcn.html">JavaScript Standard Style</a> 代码风格的规则。</p>
<h4 id="1-JavaScript-Standard-Style-规范说明"><a href="#1-JavaScript-Standard-Style-规范说明" class="headerlink" title="1.JavaScript Standard Style 规范说明"></a>1.JavaScript Standard Style 规范说明</h4><p>建议把：<a href="https://standardjs.com/rules-zhcn.html">https://standardjs.com/rules-zhcn.html</a> 看一遍，然后在写的时候,  遇到错误就查询解决。</p>
<p>下面是这份规则中的一小部分：</p>
<ul>
<li><em>字符串使用单引号</em> – 需要转义的地方除外</li>
<li><em>无分号</em> – <a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding">这</a><a href="http://inimino.org/~inimino/blog/javascript_semicolons">没什么不好。</a><a href="https://www.youtube.com/watch?v=gsfbh17Ax9I">不骗你！</a></li>
<li><em>关键字后加空格</em> <code>if (condition) &#123; ... &#125;</code></li>
<li><em>函数名后加空格</em> <code>function name (arg) &#123; ... &#125;</code></li>
<li>坚持使用全等 <code>===</code> 摒弃 <code>==</code> 一但在需要检查 <code>null || undefined</code> 时可以使用 <code>obj == null</code></li>
<li>……</li>
</ul>
<h4 id="2-代码规范错误"><a href="#2-代码规范错误" class="headerlink" title="2.代码规范错误"></a>2.代码规范错误</h4><p>如果你的代码不符合standard的要求，eslint会跳出来刀子嘴，豆腐心地提示你。</p>
<p>下面我们在main.js中随意做一些改动：添加一些空行，空格。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./styles/index.less&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span> ( &#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>  router<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure>

<p>按下保存代码之后：</p>
<p>你将会看在控制台中输出如下错误：</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682942554314.png" alt="68294255431"></p>
<blockquote>
<p>eslint 是来帮助你的。心态要好，有错，就改。</p>
</blockquote>
<h4 id="3-手动修正"><a href="#3-手动修正" class="headerlink" title="3.手动修正"></a>3.手动修正</h4><p>根据错误提示来一项一项手动修正。</p>
<p>如果你不认识命令行中的语法报错是什么意思，你可以根据错误代码（func-call-spacing, space-in-parens,…..）去 ESLint 规则列表中查找其具体含义。</p>
<p>打开 <a href="https://zh-hans.eslint.org/docs/latest/rules/">ESLint 规则表</a>，使用页面搜索（Ctrl + F）这个代码，查找对该规则的一个释义。</p>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682942792219.png" alt="68294279221"></p>
<h2 id="二十四、通过eslint插件来实现自动修正"><a href="#二十四、通过eslint插件来实现自动修正" class="headerlink" title="二十四、通过eslint插件来实现自动修正"></a>二十四、通过eslint插件来实现自动修正</h2><blockquote>
<ol>
<li>eslint会自动高亮错误显示</li>
<li>通过配置，eslint会自动帮助我们修复错误</li>
</ol>
</blockquote>
<ul>
<li>如何安装</li>
</ul>
<p><img src="/2023/08/13/vue%E5%AD%A6%E4%B9%A0Day6/1682942920986.png" alt="68294292098"></p>
<ul>
<li>如何配置</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 当保存的时候，eslint自动帮我们修复错误</span><br><span class="hljs-string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;source.fixAll&quot;</span>: <span class="hljs-literal">true</span><br>&#125;,<br><span class="hljs-comment">// 保存代码，不自动格式化</span><br><span class="hljs-string">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<ul>
<li>注意：eslint的配置文件必须在根目录下，这个插件才能才能生效。打开项目必须以根目录打开，一次打开一个项目</li>
<li>注意：使用了eslint校验之后，把vscode带的那些格式化工具全禁用了 Beatify</li>
</ul>
<p>settings.json 参考</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&#123;<br>    <span class="hljs-string">&quot;window.zoomLevel&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;workbench.iconTheme&quot;</span>: <span class="hljs-string">&quot;vscode-icons&quot;</span>,<br>    <span class="hljs-string">&quot;editor.tabSize&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 当保存的时候，eslint自动帮我们修复错误</span><br>    <span class="hljs-string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;source.fixAll&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 保存代码，不自动格式化</span><br>    <span class="hljs-string">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习Day8</title>
    <url>/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/</url>
    <content><![CDATA[<h1 id="认识Vue3"><a href="#认识Vue3" class="headerlink" title="认识Vue3"></a>认识Vue3</h1><h2 id="1-Vue2-选项式-API-vs-Vue3-组合式API"><a href="#1-Vue2-选项式-API-vs-Vue3-组合式API" class="headerlink" title="1. Vue2 选项式 API vs Vue3 组合式API"></a>1. Vue2 选项式 API vs Vue3 组合式API</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  data()&#123;<br>    return &#123;<br>      count:0<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    addCount()&#123;<br>      this.count++<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>const count = ref(0)<br>const addCount = ()=&gt; count.value++<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>特点：</p>
<ol>
<li>代码量变少</li>
<li>分散式维护变成集中式维护</li>
</ol>
<h2 id="2-Vue3的优势"><a href="#2-Vue3的优势" class="headerlink" title="2. Vue3的优势"></a>2. Vue3的优势</h2><p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/01.png" alt="image.png"></p>
<h1 id="使用create-vue搭建Vue3项目"><a href="#使用create-vue搭建Vue3项目" class="headerlink" title="使用create-vue搭建Vue3项目"></a>使用create-vue搭建Vue3项目</h1><h2 id="1-认识create-vue"><a href="#1-认识create-vue" class="headerlink" title="1. 认识create-vue"></a>1. 认识create-vue</h2><blockquote>
<p>create-vue是Vue官方新的脚手架工具，底层切换到了 vite （下一代前端工具链），为开发提供极速响应</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/2.png" alt="image.png"></p>
<h2 id="2-使用create-vue创建项目"><a href="#2-使用create-vue创建项目" class="headerlink" title="2. 使用create-vue创建项目"></a>2. 使用create-vue创建项目</h2><blockquote>
<p>前置条件 - 已安装16.0或更高版本的Node.js</p>
</blockquote>
<p>执行如下命令，这一指令将会安装并执行 create-vue</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm init vue@latest<br></code></pre></td></tr></table></figure>

<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/3.png" alt="image.png"></p>
<h1 id="熟悉项目和关键文件"><a href="#熟悉项目和关键文件" class="headerlink" title="熟悉项目和关键文件"></a>熟悉项目和关键文件</h1><p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/4.png" alt="image.png"></p>
<h1 id="组合式API-setup选项"><a href="#组合式API-setup选项" class="headerlink" title="组合式API - setup选项"></a>组合式API - setup选项</h1><h2 id="1-setup选项的写法和执行时机"><a href="#1-setup选项的写法和执行时机" class="headerlink" title="1. setup选项的写法和执行时机"></a>1. setup选项的写法和执行时机</h2><p>写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>  export default &#123;<br>    setup()&#123;<br>      <br>    &#125;,<br>    beforeCreate()&#123;<br>      <br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>执行时机</p>
<blockquote>
<p>在beforeCreate钩子之前执行</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/5.png" alt="image.png"></p>
<h2 id="2-setup中写代码的特点"><a href="#2-setup中写代码的特点" class="headerlink" title="2. setup中写代码的特点"></a>2. setup中写代码的特点</h2><blockquote>
<p>在setup函数中写的数据和方法需要在末尾以对象的方式return，才能给模版使用</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>  export default &#123;<br>    setup()&#123;<br>      const message = &#x27;this is message&#x27;<br>      const logMessage = ()=&gt;&#123;<br>        console.log(message)<br>      &#125;<br>      // 必须return才可以<br>      return &#123;<br>        message,<br>        logMessage<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="3-语法糖"><a href="#3-语法糖" class="headerlink" title="3. &lt;script setup&gt;语法糖"></a>3. &lt;script setup&gt;语法糖</h2><blockquote>
<p>script标签添加 setup标记，不需要再写导出语句，默认会添加导出语句</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  const message = &#x27;this is message&#x27;<br>  const logMessage = ()=&gt;&#123;<br>    console.log(message)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h1 id="组合式API-reactive和ref函数"><a href="#组合式API-reactive和ref函数" class="headerlink" title="组合式API - reactive和ref函数"></a>组合式API - reactive和ref函数</h1><h2 id="1-reactive"><a href="#1-reactive" class="headerlink" title="1. reactive"></a>1. reactive</h2><blockquote>
<p>接受对象类型数据的参数传入并返回一个响应式的对象</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br> // 导入<br> import &#123; reactive &#125; from &#x27;vue&#x27;<br> // 执行函数 传入参数 变量接收<br> const state = reactive(&#123;<br>   msg:&#x27;this is msg&#x27;<br> &#125;)<br> const setSate = ()=&gt;&#123;<br>   // 修改数据更新视图<br>   state.msg = &#x27;this is new msg&#x27;<br> &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &#123;&#123; state.msg &#125;&#125;<br>  &lt;button @click=&quot;setState&quot;&gt;change msg&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<h2 id="2-ref"><a href="#2-ref" class="headerlink" title="2. ref"></a>2. ref</h2><blockquote>
<p>接收简单类型或者对象类型的数据传入并返回一个响应式的对象</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br> // 导入<br> import &#123; ref &#125; from &#x27;vue&#x27;<br> // 执行函数 传入参数 变量接收<br> const count = ref(0)<br> const setCount = ()=&gt;&#123;<br>   // 修改数据更新视图必须加上.value<br>   count.value++<br> &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;button @click=&quot;setCount&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<h2 id="3-reactive-对比-ref"><a href="#3-reactive-对比-ref" class="headerlink" title="3. reactive 对比 ref"></a>3. reactive 对比 ref</h2><ol>
<li>都是用来生成响应式数据</li>
<li>不同点<ol>
<li>reactive不能处理简单类型的数据</li>
<li>ref参数类型支持更好，但是必须通过.value做访问修改</li>
<li>ref函数内部的实现依赖于reactive函数</li>
</ol>
</li>
<li>在实际工作中的推荐<ol>
<li>推荐使用ref函数，减少记忆负担，小兔鲜项目都使用ref</li>
</ol>
</li>
</ol>
<h1 id="组合式API-computed"><a href="#组合式API-computed" class="headerlink" title="组合式API - computed"></a>组合式API - computed</h1><blockquote>
<p>计算属性基本思想和Vue2保持一致，组合式API下的计算属性只是修改了API写法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>// 导入<br>import &#123;ref, computed &#125; from &#x27;vue&#x27;<br>// 原始数据<br>const count = ref(0)<br>// 计算属性<br>const doubleCount = computed(()=&gt;count.value * 2)<br><br>// 原始数据<br>const list = ref([1,2,3,4,5,6,7,8])<br>// 计算属性list<br>const filterList = computed(item=&gt;item &gt; 2)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h1 id="组合式API-watch"><a href="#组合式API-watch" class="headerlink" title="组合式API - watch"></a>组合式API - watch</h1><blockquote>
<p>侦听一个或者多个数据的变化，数据变化时执行回调函数，俩个额外参数 immediate控制立刻执行，deep开启深度侦听</p>
</blockquote>
<h2 id="1-侦听单个数据"><a href="#1-侦听单个数据" class="headerlink" title="1. 侦听单个数据"></a>1. 侦听单个数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const count = ref(0)<br>  // 2. 调用watch 侦听变化<br>  watch(count, (newValue, oldValue)=&gt;&#123;<br>    console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="2-侦听多个数据"><a href="#2-侦听多个数据" class="headerlink" title="2. 侦听多个数据"></a>2. 侦听多个数据</h2><blockquote>
<p>侦听多个数据，第一个参数可以改写成数组的写法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const count = ref(0)<br>  const name = ref(&#x27;cp&#x27;)<br>  // 2. 调用watch 侦听变化<br>  watch([count, name], ([newCount, newName],[oldCount,oldName])=&gt;&#123;<br>    console.log(`count或者name变化了，[newCount, newName],[oldCount,oldName])<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="3-immediate"><a href="#3-immediate" class="headerlink" title="3. immediate"></a>3. immediate</h2><blockquote>
<p>在侦听器创建时立即出发回调，响应式数据变化之后继续执行回调</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const count = ref(0)<br>  // 2. 调用watch 侦听变化<br>  watch(count, (newValue, oldValue)=&gt;&#123;<br>    console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`)<br>  &#125;,&#123;<br>    immediate: true<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="4-deep"><a href="#4-deep" class="headerlink" title="4. deep"></a>4. deep</h2><blockquote>
<p>通过watch监听的ref对象默认是浅层侦听的，直接修改嵌套的对象属性不会触发回调执行，需要开启deep</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const state = ref(&#123; count: 0 &#125;)<br>  // 2. 监听对象state<br>  watch(state, ()=&gt;&#123;<br>    console.log(&#x27;数据变化了&#x27;)<br>  &#125;)<br>  const changeStateByCount = ()=&gt;&#123;<br>    // 直接修改不会引发回调执行<br>    state.value.count++<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;script setup&gt;<br>  // 1. 导入watch<br>  import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>  const state = ref(&#123; count: 0 &#125;)<br>  // 2. 监听对象state 并开启deep<br>  watch(state, ()=&gt;&#123;<br>    console.log(&#x27;数据变化了&#x27;)<br>  &#125;,&#123;deep:true&#125;)<br>  const changeStateByCount = ()=&gt;&#123;<br>    // 此时修改可以触发回调<br>    state.value.count++<br>  &#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure>

<h1 id="组合式API-生命周期函数"><a href="#组合式API-生命周期函数" class="headerlink" title="组合式API - 生命周期函数"></a>组合式API - 生命周期函数</h1><h2 id="1-选项式对比组合式"><a href="#1-选项式对比组合式" class="headerlink" title="1. 选项式对比组合式"></a>1. 选项式对比组合式</h2><p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/6.png" alt="image.png"></p>
<h2 id="2-生命周期函数基本使用"><a href="#2-生命周期函数基本使用" class="headerlink" title="2. 生命周期函数基本使用"></a>2. 生命周期函数基本使用</h2><blockquote>
<ol>
<li>导入生命周期函数</li>
<li>执行生命周期函数，传入回调</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;scirpt setup&gt;<br>import &#123; onMounted &#125; from &#x27;vue&#x27;<br>onMounted(()=&gt;&#123;<br>  // 自定义逻辑<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="3-执行多次"><a href="#3-执行多次" class="headerlink" title="3. 执行多次"></a>3. 执行多次</h2><blockquote>
<p>生命周期函数执行多次的时候，会按照顺序依次执行</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;scirpt setup&gt;<br>import &#123; onMounted &#125; from &#x27;vue&#x27;<br>onMounted(()=&gt;&#123;<br>  // 自定义逻辑<br>&#125;)<br><br>onMounted(()=&gt;&#123;<br>  // 自定义逻辑<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h1 id="组合式API-父子通信"><a href="#组合式API-父子通信" class="headerlink" title="组合式API - 父子通信"></a>组合式API - 父子通信</h1><h2 id="1-父传子"><a href="#1-父传子" class="headerlink" title="1. 父传子"></a>1. 父传子</h2><blockquote>
<p>基本思想</p>
<ol>
<li>父组件中给子组件绑定属性</li>
<li>子组件内部通过props选项接收数据</li>
</ol>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/7.png" alt="image.png"></p>
<h2 id="2-子传父"><a href="#2-子传父" class="headerlink" title="2. 子传父"></a>2. 子传父</h2><blockquote>
<p>基本思想</p>
<ol>
<li>父组件中给子组件标签通过@绑定事件</li>
<li>子组件内部通过 emit 方法触发事件</li>
</ol>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/8.png" alt="image.png"></p>
<h1 id="组合式API-模版引用"><a href="#组合式API-模版引用" class="headerlink" title="组合式API - 模版引用"></a>组合式API - 模版引用</h1><blockquote>
<p>概念：通过 ref标识 获取真实的 dom对象或者组件实例对象</p>
</blockquote>
<h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h2><blockquote>
<p>实现步骤：</p>
<ol>
<li>调用ref函数生成一个ref对象</li>
<li>通过ref标识绑定ref对象到标签</li>
</ol>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/9.png" alt="image.png"></p>
<h2 id="2-defineExpose"><a href="#2-defineExpose" class="headerlink" title="2. defineExpose"></a>2. defineExpose</h2><blockquote>
<p>默认情况下在 &lt;script setup&gt;语法糖下组件内部的属性和方法是不开放给父组件访问的，可以通过defineExpose编译宏指定哪些属性和方法容许访问<br>说明：指定testMessage属性可以被访问到</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/10.png" alt="image.png"></p>
<h1 id="组合式API-provide和inject"><a href="#组合式API-provide和inject" class="headerlink" title="组合式API - provide和inject"></a>组合式API - provide和inject</h1><h2 id="1-作用和场景"><a href="#1-作用和场景" class="headerlink" title="1. 作用和场景"></a>1. 作用和场景</h2><blockquote>
<p>顶层组件向任意的底层组件传递数据和方法，实现跨层组件通信</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/11.png" alt="image.png"></p>
<h2 id="2-跨层传递普通数据"><a href="#2-跨层传递普通数据" class="headerlink" title="2. 跨层传递普通数据"></a>2. 跨层传递普通数据</h2><blockquote>
<p>实现步骤</p>
<ol>
<li>顶层组件通过 <code>provide</code> 函数提供数据</li>
<li>底层组件通过 <code>inject</code> 函数提供数据</li>
</ol>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/12.png" alt="image.png"></p>
<h2 id="3-跨层传递响应式数据"><a href="#3-跨层传递响应式数据" class="headerlink" title="3. 跨层传递响应式数据"></a>3. 跨层传递响应式数据</h2><blockquote>
<p>在调用provide函数时，第二个参数设置为ref对象</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/13.png" alt="image.png"></p>
<h2 id="4-跨层传递方法"><a href="#4-跨层传递方法" class="headerlink" title="4. 跨层传递方法"></a>4. 跨层传递方法</h2><blockquote>
<p>顶层组件可以向底层组件传递方法，底层组件调用方法修改顶层组件的数据</p>
</blockquote>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/14.png" alt="image.png"></p>
<h1 id="Vue3-3-新特性-defineOptions"><a href="#Vue3-3-新特性-defineOptions" class="headerlink" title="Vue3.3 新特性-defineOptions"></a>Vue3.3 新特性-defineOptions</h1><p>背景说明：</p>
<p>有 &lt;script setup&gt; 之前，如果要定义 props, emits 可以轻而易举地添加一个与 setup 平级的属性。 </p>
<p>但是用了 &lt;script setup&gt; 后，就没法这么干了 setup 属性已经没有了，自然无法添加与其平级的属性。</p>
<hr>
<p>为了解决这一问题，引入了 defineProps 与 defineEmits 这两个宏。但这只解决了 props 与 emits 这两个属性。</p>
<p>如果我们要定义组件的 name 或其他自定义的属性，还是得回到最原始的用法——再添加一个普通的 &lt;script&gt; 标签。</p>
<p>这样就会存在两个 &lt;script&gt;标签。让人无法接受。</p>
<hr>
<p>所以在 Vue 3.3 中新引入了 defineOptions 宏。顾名思义，主要是用来定义 Options API 的选项。可以用 defineOptions 定义任意的选项， props, emits, expose, slots 除外（因为这些可以使用 defineXXX 来做到）</p>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/image-20230704082955748.png" alt="image-20230704082955748"></p>
<h1 id="Vue3-3新特性-defineModel"><a href="#Vue3-3新特性-defineModel" class="headerlink" title="Vue3.3新特性-defineModel"></a>Vue3.3新特性-defineModel</h1><p>在Vue3中，自定义组件上使用v-model, 相当于传递一个modelValue属性，同时触发 update:modelValue 事件</p>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/image-20230704083027349.png" alt="image-20230704083027349"></p>
<p>我们需要先定义 props，再定义 emits 。其中有许多重复的代码。如果需要修改此值，还需要手动调用 emit 函数。</p>
<p>于是乎 defineModel 诞生了。</p>
<p><img src="/2023/08/28/vue%E5%AD%A6%E4%B9%A0Day8/image-20230704083056549.png" alt="image-20230704083056549"></p>
<p>生效需要配置 vite.config.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; fileURLToPath, <span class="hljs-variable constant_">URL</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:url&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(&#123;<br>      <span class="hljs-attr">script</span>: &#123;<br>        <span class="hljs-attr">defineModel</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;./src&#x27;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>))<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>基于echarts的客户消费记账单</title>
    <url>/2023/08/04/%E5%9F%BA%E4%BA%8Eecharts%E7%9A%84%E5%AE%A2%E6%88%B7%E8%AE%B0%E8%B4%A6%E5%8D%95/</url>
    <content><![CDATA[<h1 id="Vue小案例：基于echarts的客户消费记账单"><a href="#Vue小案例：基于echarts的客户消费记账单" class="headerlink" title="Vue小案例：基于echarts的客户消费记账单"></a>Vue小案例：基于echarts的客户消费记账单</h1><blockquote>
<p>  本文是在学习了ajax, vue2的一些基本语法知识，如指令, 计算属性, 生命周期等.以及在接触了echarts这款基于JS的数据可视化图库表和bootstrap框架后,为巩固所学做的小小案例.</p>
</blockquote>
<h4 id="涉及的一些知识分析可查看代码的详细注释"><a href="#涉及的一些知识分析可查看代码的详细注释" class="headerlink" title="涉及的一些知识分析可查看代码的详细注释"></a>涉及的一些知识分析可查看代码的详细注释</h4><h4 id="网页效果如下"><a href="#网页效果如下" class="headerlink" title="网页效果如下"></a>网页效果如下</h4><p><img src="/2023/08/04/%E5%9F%BA%E4%BA%8Eecharts%E7%9A%84%E5%AE%A2%E6%88%B7%E8%AE%B0%E8%B4%A6%E5%8D%95/1.png"></p>
<h4 id="完整代码实现如下-可按需取用"><a href="#完整代码实现如下-可按需取用" class="headerlink" title="完整代码实现如下,可按需取用"></a>完整代码实现如下,可按需取用</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>小菜记账清单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- CSS only --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.red</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.search</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.my-form</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.my-form</span> <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.table</span>&gt; <span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:first</span>-child) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-top</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.contain</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.list-box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.list-box</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.echarts-box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">tfoot</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1000px</span>) &#123;</span><br><span class="language-css">            <span class="hljs-selector-class">.contain</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.list-box</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.echarts-box</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contain&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 左侧列表 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-box&quot;</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 添加资产 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-form&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;消费名称&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;price&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;消费价格&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>添加账单<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>消费名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>消费价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list &quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; red: item.price&gt;500 &#125;&quot;</span>&gt;</span>&#123;&#123;item.price.toFixed(2)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>消费总计: &#123;&#123;totalPrice.toFixed(2)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 右侧图表 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;echarts-box&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 接口文档地址：</span></span><br><span class="hljs-comment"><span class="language-javascript">         * https://www.apifox.cn/apidoc/shared-24459455-ebb1-4fdc-8df8-0aff8dc317a8/api-53371058</span></span><br><span class="hljs-comment"><span class="language-javascript">         * </span></span><br><span class="hljs-comment"><span class="language-javascript">         * 功能需求：</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 1. 基本渲染</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 2. 添加功能</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 3. 删除功能</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 4. 饼图渲染</span></span><br><span class="hljs-comment"><span class="language-javascript">         *  *    (1) 初始化一个饼图 echarts.init(dom)  mounted钩子实现</span></span><br><span class="hljs-comment"><span class="language-javascript">            *    (2) 根据数据实时更新饼图 echarts.setOption(&#123; ... &#125;)</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">         */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">list</span>: [],</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">async</span> <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://applet-base-api-t.itheima.net/bill&#x27;</span>, &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">creator</span>: <span class="hljs-string">&#x27;小黑&#x27;</span></span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 更新图表</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(&#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">series</span>: [&#123;</span><br><span class="language-javascript">                            <span class="hljs-comment">// 箭头函数返回对象要用括号包住</span></span><br><span class="language-javascript">                            <span class="hljs-attr">data</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (&#123;<span class="hljs-attr">value</span>: item.<span class="hljs-property">price</span>, <span class="hljs-attr">name</span>: item.<span class="hljs-property">name</span>&#125;))</span><br><span class="language-javascript">                        &#125;]</span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-keyword">async</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请输入消费名称&#x27;</span>)</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请输入正确的消费价格&#x27;</span>)</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 发送添加请求</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;https://applet-base-api-t.itheima.net/bill&#x27;</span>, &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">creator</span>: <span class="hljs-string">&#x27;小黑&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">price</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span></span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                    <span class="hljs-comment">// 重新渲染一遍</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getList</span>()</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-keyword">async</span> <span class="hljs-title function_">del</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`https://applet-base-api-t.itheima.net/bill/<span class="hljs-subst">$&#123;id&#125;</span>`</span>)</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getList</span>()</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">totalPrice</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item.<span class="hljs-property">price</span>, <span class="hljs-number">0</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-keyword">async</span> <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://www.apifox.cn/apidoc/shared-24459455-ebb1-4fdc-8df8-0aff8dc317a8/api-53371058&#x27;</span>, &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">creator</span>: <span class="hljs-string">&#x27;小黑&#x27;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span> = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#main&#x27;</span>))</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 大标题</span></span><br><span class="language-javascript">                <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;消费账单列表&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;center&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 提示框</span></span><br><span class="language-javascript">                <span class="hljs-attr">tooltip</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 图例</span></span><br><span class="language-javascript">                <span class="hljs-attr">legend</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 对齐方式</span></span><br><span class="language-javascript">                    <span class="hljs-attr">orient</span>: <span class="hljs-string">&#x27;vertical&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;left&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 数据项</span></span><br><span class="language-javascript">                <span class="hljs-attr">series</span>: [</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;消费账单&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-comment">// 类型是饼图</span></span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>: [],</span><br><span class="language-javascript">                    <span class="hljs-attr">emphasis</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">itemStyle</span>:&#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">10</span>,</span><br><span class="language-javascript">                            <span class="hljs-attr">shadowOffsetX</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">                            <span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&#x27;rgba(0,0,0,0.5)&#x27;</span></span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vue小案例</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>毕业学生就业统计表</title>
    <url>/2023/07/26/%E6%AF%95%E4%B8%9A%E5%AD%A6%E7%94%9F%E5%B0%B1%E4%B8%9A%E7%BB%9F%E8%AE%A1%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="js毕业学生就业统计表小案例"><a href="#js毕业学生就业统计表小案例" class="headerlink" title="js毕业学生就业统计表小案例"></a>js毕业学生就业统计表小案例</h1><h3 id="本文是在学习javaScript中Web-APIs板块中localStorage，事件绑定，事件委托等内容为更加熟练掌握理解相关知识的练习小案例"><a href="#本文是在学习javaScript中Web-APIs板块中localStorage，事件绑定，事件委托等内容为更加熟练掌握理解相关知识的练习小案例" class="headerlink" title="本文是在学习javaScript中Web APIs板块中localStorage，事件绑定，事件委托等内容为更加熟练掌握理解相关知识的练习小案例"></a>本文是在学习javaScript中Web APIs板块中localStorage，事件绑定，事件委托等内容为更加熟练掌握理解相关知识的练习小案例</h3><h4 id="涉及的一些知识分析"><a href="#涉及的一些知识分析" class="headerlink" title="涉及的一些知识分析"></a>涉及的一些知识分析</h4><ul>
<li>render页面利用数组中map+join的方法</li>
<li>render完页面后需要reset表单恢复默认值</li>
<li>将数据存入localStorage确保数据不丢失</li>
<li><em>存储复杂数据类型需要JSON.Stringify()方法将其转化成</em>JSON字符串存储到本地*</li>
</ul>
<h4 id="网页效果如下"><a href="#网页效果如下" class="headerlink" title="网页效果如下"></a>网页效果如下</h4><p><img src="/2023/07/26/%E6%AF%95%E4%B8%9A%E5%AD%A6%E7%94%9F%E5%B0%B1%E4%B8%9A%E7%BB%9F%E8%AE%A1%E8%A1%A8/1.png"></p>
<h4 id="完整代码实现以及包含的css代码如下，可按需取用"><a href="#完整代码实现以及包含的css代码如下，可按需取用" class="headerlink" title="完整代码实现以及包含的css代码如下，可按需取用"></a>完整代码实现以及包含的css代码如下，可按需取用</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>毕业学生就业统计表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;./iconfont/iconfont.css&quot;&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/index.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>毕业学生就业统计表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uname&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uname&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;年龄&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;薪资&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;北京&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上海&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;广州&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;深圳&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;西安&quot;</span>&gt;</span>西安<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-tianjia&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>添加<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>共有数据<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>条<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>薪资<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>就业城市<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>录入时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- &lt;tr&gt;</span><br><span class="hljs-comment">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;迪丽热巴&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;23&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;女&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;12000&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;北京&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;2099/9/9 08:08:08&lt;/td&gt;</span><br><span class="hljs-comment">        &lt;td&gt;</span><br><span class="hljs-comment">          &lt;a href=&quot;javascript:&quot;&gt;</span><br><span class="hljs-comment">            &lt;i class=&quot;iconfont icon-shanchu&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-comment">            删除</span><br><span class="hljs-comment">          &lt;/a&gt;</span><br><span class="hljs-comment">        &lt;/td&gt;</span><br><span class="hljs-comment">      &lt;/tr&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 参考数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> initData = [</span><br><span class="language-javascript">      &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">stuId</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;迪丽热巴&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">salary</span>: <span class="hljs-string">&#x27;12000&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;女&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;北京&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">time</span>: <span class="hljs-string">&#x27;2099/9/9 08:08:08&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    ]</span><br><span class="language-javascript">    <span class="hljs-comment">// localStorage.setItem(&#x27;data&#x27;, JSON.stringify(initData))</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 渲染业务</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 1.1 先读取本地存储的数据</span></span><br><span class="language-javascript">    <span class="hljs-comment">// (1). 本地存储有数据则记得转换为对象然后存储到变量里面，后期用于渲染页面</span></span><br><span class="language-javascript">    <span class="hljs-comment">// (2). 如果没有数据，则用 空数组来代替</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;data&#x27;</span>)) || []</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)</span><br><span class="language-javascript">    <span class="hljs-comment">// 1.2 利用map和join方法来渲染页面</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> tbody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// (1). 利用map遍历数组，返回对应tr的数组</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> trArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">          &lt;tr&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.stuId&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.uname&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.age&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.gender&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.salary&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.city&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;<span class="hljs-subst">$&#123;ele.time&#125;</span>&lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">              &lt;a href=&quot;javascript:&quot; data-id=&quot;<span class="hljs-subst">$&#123;index&#125;</span>&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;i class=&quot;iconfont icon-shanchu&quot;&gt;&lt;/i&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                删除</span></span><br><span class="hljs-string"><span class="language-javascript">              &lt;/a&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/td&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">          &lt;/tr&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span></span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(trArr)</span><br><span class="language-javascript">      <span class="hljs-comment">// (2). 把数组转换为字符串 join</span></span><br><span class="language-javascript">      <span class="hljs-comment">// (3). 把生成的字符串追加给tbody </span></span><br><span class="language-javascript">      tbody.<span class="hljs-property">innerHTML</span> = trArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript">      <span class="hljs-comment">// 显示共计有几条数据</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.title span&#x27;</span>).<span class="hljs-property">innerHTML</span> = arr.<span class="hljs-property">length</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">render</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 新增业务</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> info = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.info&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> uname = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.uname&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> age = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.age&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> salary = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.salary&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> gender = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.gender&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> city = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.city&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 2.1 form表单注册提交事件，阻止默认行为</span></span><br><span class="language-javascript">    info.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">      <span class="hljs-comment">// 2.2 非空判断</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!uname.<span class="hljs-property">value</span> || !age.<span class="hljs-property">value</span> || !salary.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;输入内容不能为空&#x27;</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-comment">// 2.3 给 arr 数组追加对象，里面存储 表单获取过来的数据</span></span><br><span class="language-javascript">      arr.<span class="hljs-title function_">push</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 处理 stuId：数组最后一条数据的stuId + 1      </span></span><br><span class="language-javascript">        <span class="hljs-attr">stuId</span>: arr.<span class="hljs-property">length</span> ? arr[arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">stuId</span> + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">uname</span>: uname.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: age.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">salary</span>: salary.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">gender</span>: gender.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">city</span>: city.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">time</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleString</span>()</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">      <span class="hljs-comment">// 2.4 渲染页面和重置表单（reset()方法）</span></span><br><span class="language-javascript">      <span class="hljs-title function_">render</span>()</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reset</span>() <span class="hljs-comment">// 重置表单</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 2.5 把数组重新存入本地存储里面，记得转换为JSON字符串存储</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr))</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 3. 删除业务</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 3.1 采用事件委托形式，给 tbody 注册点击事件</span></span><br><span class="language-javascript">    tbody.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 判断是否点击的是删除按钮  A 链接</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span> === <span class="hljs-string">&#x27;A&#x27;</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// alert(11)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 3.2 得到当前点击链接的索引号。渲染数据的时候，动态给a链接添加自定义属性例如 data-id=&quot;0&quot;</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">id</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 确认框 确认是否要真的删除</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;您确定要删除这条数据吗？&#x27;</span>)) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 3.3 根据索引号，利用 splice 删除数组这条数据</span></span><br><span class="language-javascript">          arr.<span class="hljs-title function_">splice</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">id</span>, <span class="hljs-number">1</span>)</span><br><span class="language-javascript">          <span class="hljs-comment">// 3.4 重新渲染页面 </span></span><br><span class="language-javascript">          <span class="hljs-title function_">render</span>()</span><br><span class="language-javascript">          <span class="hljs-comment">// 3.5 把最新 arr 数组存入本地存储</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr))</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h4><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#721c24</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.title</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">933px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ebebeb</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f2f2f2</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.title</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">margin</span>: -<span class="hljs-number">3px</span> <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#f26934</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>&#125;<br><br><span class="hljs-selector-tag">table</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">950px</span>;<br>  <span class="hljs-attribute">border-collapse</span>: collapse;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#3c3637</span>;<br>&#125;<br><br><span class="hljs-selector-tag">th</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f2f2f2</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  <span class="hljs-attribute">text-align</span>: left;<br>&#125;<br><br><span class="hljs-selector-tag">td</span>,<br><span class="hljs-selector-tag">th</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ebebeb</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">td</span> &#123;<br><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><br>&#125;<br><br><span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">tr</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fbfafa</span>;<br>&#125;<br><br><span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f26934</span>;<br>&#125;<br><br><span class="hljs-selector-class">.info</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">900px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">input</span>,<br><span class="hljs-selector-class">.info</span> select &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ebebeb</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">70px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5dbfd8</span>;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#52abc1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>JS小案例</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
